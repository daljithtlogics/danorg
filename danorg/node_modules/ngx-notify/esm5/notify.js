import { ApplicationRef, Component, ComponentFactoryResolver, EventEmitter, Injectable, Injector, Input, NgModule, NgZone, Optional, ViewEncapsulation } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { DomSanitizer } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

var defaultIcons = {
    alert: "\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"/>\n    </svg>",
    error: "\n    <svg viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\"><path d=\"M512 937.19552c-234.83392 0-425.19552-190.36672-425.19552-425.19552 0-234.8288 190.36672-425.19552 425.19552-425.19552 234.8288 0 425.20064 190.36672 425.20064 425.19552S746.8288 937.19552 512 937.19552z m0-797.24544c-205.47072 0-372.04992 166.57408-372.04992 372.04992 0 205.47072 166.5792 372.0448 372.04992 372.0448s372.0448-166.57408 372.0448-372.0448S717.47072 139.95008 512 139.95008z m37.7344 372.18816l112.59392 112.61952c10.37824 10.36288 10.37824 27.19744 0 37.57568s-27.20768 10.37824-37.57568 0l-112.61952-112.59392-113.3568 113.3568a26.75712 26.75712 0 0 1-37.87264 0 26.76224 26.76224 0 0 1 0-37.86752L474.2656 511.8464 361.66656 399.24736a26.5728 26.5728 0 1 1 37.5808-37.5808L511.8464 474.2656l114.20672-114.20672a26.78784 26.78784 0 0 1 37.87264 37.888l-114.19136 114.19136z\"></path></svg>\n    ",
    info: "\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z\"/>\n    </svg>\n    ",
    success: "\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"/>\n    </svg>\n    "
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NotifyServiceConfig = /** @class */ (function () {
    function NotifyServiceConfig() {
        /**
         * 容器，默认：`document.body`
         */
        this.container = null;
    }
    return NotifyServiceConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NotifyService = /** @class */ (function () {
    function NotifyService(resolver, applicationRef, injector, config) {
        this.resolver = resolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
        this.config = config;
        this.emitter = new Subject();
        this.icons = defaultIcons;
        if (config) {
            this.container = config.container;
        }
    }
    /**
     * @param {?} notify
     * @param {?=} to
     * @return {?}
     */
    NotifyService.prototype.set = /**
     * @param {?} notify
     * @param {?=} to
     * @return {?}
     */
    function (notify, to) {
        if (to === void 0) { to = true; }
        if (!this.notifyHolderComponent) {
            this.notifyHolderComponent = this.createNotifyHolder();
            this.updateSetting({});
        }
        if (to) {
            notify = Object.assign({}, this.config.notify, notify);
            notify.id = notify.id
                ? notify.id
                : Math.random()
                    .toString(36)
                    .substring(3);
            notify.click = new EventEmitter();
        }
        this.emitter.next({ command: 'set', notify: notify, add: to });
        return notify;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyService.prototype.updateSetting = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.emitter.next({
            command: 'options',
            holderOptions: Object.assign({}, this.config.options, options),
        });
    };
    /**
     * @return {?}
     */
    NotifyService.prototype.createNotifyHolder = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ factory = this.resolver.resolveComponentFactory(NotifyHolderComponent), /** @type {?} */
        ref = factory.create(this.injector), /** @type {?} */
        rootNode = /** @type {?} */ ((/** @type {?} */ (ref.hostView))
            .rootNodes[0]);
        if (!this.container) {
            this.container = document.body;
        }
        this.applicationRef.attachView(ref.hostView);
        ref.onDestroy(function () {
            _this.applicationRef.detachView(ref.hostView);
        });
        this.container.appendChild(rootNode);
        return ref.instance;
    };
    /**
     * @return {?}
     */
    NotifyService.prototype.getChangeEmitter = /**
     * @return {?}
     */
    function () {
        return this.emitter;
    };
    /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotifyService.prototype.success = /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        return this.set(Object.assign({}, override, {
            title: title,
            content: content || '',
            type: 'success',
            icon: this.icons.success,
        }));
    };
    /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotifyService.prototype.error = /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        return this.set(Object.assign({}, override, {
            title: title,
            content: content || '',
            type: 'error',
            icon: this.icons.error,
        }));
    };
    /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotifyService.prototype.alert = /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        return this.set(Object.assign({}, override, {
            title: title,
            content: content || '',
            type: 'alert',
            icon: this.icons.alert,
        }));
    };
    /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotifyService.prototype.info = /**
     * @param {?} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        return this.set(Object.assign({}, override, {
            title: title,
            content: content || '',
            type: 'info',
            icon: this.icons.info,
        }));
    };
    /**
     * @param {?} title
     * @param {?} content
     * @param {?} type
     * @param {?=} override
     * @return {?}
     */
    NotifyService.prototype.bare = /**
     * @param {?} title
     * @param {?} content
     * @param {?} type
     * @param {?=} override
     * @return {?}
     */
    function (title, content, type, override) {
        return this.set(Object.assign({}, override, {
            title: title,
            content: content || '',
            type: type,
        }));
    };
    /**
     * @param {?} title
     * @param {?} content
     * @param {?} html
     * @param {?=} type
     * @param {?=} override
     * @return {?}
     */
    NotifyService.prototype.html = /**
     * @param {?} title
     * @param {?} content
     * @param {?} html
     * @param {?=} type
     * @param {?=} override
     * @return {?}
     */
    function (title, content, html, type, override) {
        return this.set(Object.assign({}, override, {
            title: title,
            content: content || '',
            html: html,
            type: type,
        }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NotifyService.prototype.remove = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.emitter.next({ command: 'remove', id: id });
    };
    /**
     * @return {?}
     */
    NotifyService.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.emitter.next({ command: 'clear' });
    };
    NotifyService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NotifyService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
        { type: ApplicationRef, },
        { type: Injector, },
        { type: NotifyServiceConfig, decorators: [{ type: Optional },] },
    ]; };
    return NotifyService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NotifyHolderComponent = /** @class */ (function () {
    function NotifyHolderComponent(injector) {
        var _this = this;
        this.notifies = [];
        this.styles = {};
        this.listener = injector
            .get(NotifyService)
            .getChangeEmitter()
            .subscribe(function (item) {
            switch (item.command) {
                case 'clear':
                    _this.notifies = [];
                    break;
                case 'remove':
                    _this.remove(/** @type {?} */ ((item.id)));
                    break;
                case 'set':
                    if (item.add)
                        _this.add(/** @type {?} */ ((item.notify)));
                    else
                        _this.defaultBehavior(item);
                    break;
                case 'options':
                    _this.options = Object.assign({
                        lastOnBottom: true,
                        minWidth: 300,
                        maxWidth: 300,
                        maxStack: 8,
                        position: ['right', 'bottom'],
                        offset: [20, 20],
                        zIndex: 1031,
                    }, /** @type {?} */ ((item.holderOptions)));
                    _this.styles = {
                        'z-index': _this.options.zIndex,
                        'min-width.px': _this.options.minWidth,
                        'max-width.px': _this.options.maxWidth,
                    };
                    _this.styles[_this.options.position[0] + '.px'] = _this.options.offset[0];
                    _this.styles[_this.options.position[1] + '.px'] = _this.options.offset[1];
                    break;
                default:
                    _this.defaultBehavior(item);
                    break;
            }
        });
    }
    /**
     * @return {?}
     */
    NotifyHolderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} value
     * @return {?}
     */
    NotifyHolderComponent.prototype.defaultBehavior = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.notifies.splice(this.notifies.indexOf(value.notify), 1);
        if (value.notify.onDestroy || this.options.onDestroy) {
            var /** @type {?} */ emitItem = this.getEmit(value.notify, false);
            if (value.notify.onDestroy)
                value.notify.onDestroy(emitItem);
            if (this.options.onDestroy)
                this.options.onDestroy(emitItem);
        }
    };
    /**
     * @param {?} notify
     * @param {?} to
     * @return {?}
     */
    NotifyHolderComponent.prototype.getEmit = /**
     * @param {?} notify
     * @param {?} to
     * @return {?}
     */
    function (notify, to) {
        var /** @type {?} */ res = {
            createdOn: notify.createdOn,
            id: notify.id,
            type: notify.type,
            icon: notify.icon,
            title: notify.title,
            content: notify.content,
            html: notify.html,
        };
        if (!to)
            res.destroyedOn = new Date();
        return res;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NotifyHolderComponent.prototype.remove = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ index = 0, /** @type {?} */
        item = null, /** @type {?} */
        allow = false;
        this.notifies.forEach(function (notify, idx) {
            if (notify.id === id) {
                index = idx;
                allow = true;
                
            }
        });
        if (allow) {
            this.notifies.splice(index, 1);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NotifyHolderComponent.prototype.add = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item = Object.assign({
            type: 'success',
            timeout: 1000 * 3,
            pauseOnHover: true,
            progress: false,
            clickToClose: true,
            theme: 'default',
            animate_in: 'notify-fade-in',
            animate_out: 'notify-fade-out',
            createdOn: new Date(),
        }, item);
        if (!item.html) {
            switch (item.theme) {
                case 'bootstrap':
                    item.html = "<div class=\"alert alert-{bstype}\" role=\"alert\"><strong>{title}</strong> {content}</div>";
                    break;
                default:
                    item.html = "<div class=\"notify-title\">{title}</div><div class=\"notify-content\">{content}</div><div class=\"notify-icon\">{icon}</div>";
                    break;
            }
        }
        if (this.options.lastOnBottom) {
            if (this.notifies.length >= this.options.maxStack)
                this.notifies.splice(0, 1);
            this.notifies.push(item);
        }
        else {
            if (this.notifies.length >= this.options.maxStack)
                this.notifies.splice(this.notifies.length - 1, 1);
            this.notifies.splice(0, 0, item);
        }
        if (item.onCreate || this.options.onCreate) {
            var /** @type {?} */ emitItem = this.getEmit(item, true);
            if (item.onCreate)
                item.onCreate(emitItem);
            if (this.options.onCreate)
                this.options.onCreate(emitItem);
        }
    };
    /**
     * @return {?}
     */
    NotifyHolderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.listener)
            this.listener.unsubscribe();
    };
    NotifyHolderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notify-holder',
                    template: "<div class=\"notifies\" [ngStyle]=\"styles\" [ngClass]=\"options.position\" [class]=\"options.className\"> <notify *ngFor=\"let n of notifies; let i = index\" [item]=\"n\"></notify> </div> ",
                    styles: [".notifies {\n  position: fixed;\n}\n.notify {\n  width: 100%;\n  box-sizing: border-box;\n  position: relative;\n  margin-bottom: 10px;\n  color: #fff;\n  cursor: pointer;\n  transition: all 0.5s;\n}\n.notify-theme-default {\n  padding: 10px 20px;\n}\n.notify-theme-default.notify-alert {\n  background: #ffdb5b;\n}\n.notify-theme-default.notify-alert .notify-progress span {\n  background: #edc242;\n}\n.notify-theme-default.notify-success {\n  background: #8bc34a;\n}\n.notify-theme-default.notify-success .notify-progress span {\n  background: #689f38;\n}\n.notify-theme-default.notify-error {\n  background: #f44336;\n}\n.notify-theme-default.notify-error .notify-progress span {\n  background: #d32f2f;\n}\n.notify-theme-default.notify-info {\n  background: #03a9f4;\n}\n.notify-theme-default.notify-info .notify-progress span {\n  background: #0288d1;\n}\n.notify-theme-bootstrap.notify-alert .notify-progress span {\n  background: #edc242;\n}\n.notify-theme-bootstrap.notify-success .notify-progress span {\n  background: #689f38;\n}\n.notify-theme-bootstrap.notify-error .notify-progress span {\n  background: #d32f2f;\n}\n.notify-theme-bootstrap.notify-info .notify-progress span {\n  background: #0288d1;\n}\n.notify-title {\n  margin: 0;\n  padding: 0;\n  line-height: 30px;\n  font-size: 16px;\n  font-weight: bold;\n}\n.notify-content {\n  margin: 0;\n  font-size: 14px;\n  padding: 0 50px 0 0;\n  line-height: 20px;\n}\n.notify-icon {\n  position: absolute;\n  box-sizing: border-box;\n  top: 0;\n  right: 0;\n  height: 100%;\n  max-width: 70px;\n  width: 100%;\n}\n.notify-icon svg {\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n  fill: #fff;\n}\n.notify-icon > * {\n  max-width: 70px;\n}\n.notify-progress {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 5px;\n}\n.notify-progress span {\n  float: left;\n  height: 100%;\n}\n.notify-rtl {\n  direction: rtl;\n}\n.notify-rtl .notify-title {\n  padding-left: 50px;\n}\n.notify-rtl .notify-content {\n  padding: 0 0 0 50px;\n}\n.notify-rtl .notify-icon {\n  left: 0;\n  right: auto;\n}\n.notify-fade-in {\n  animation-duration: 1s;\n  animation-fill-mode: both;\n  -webkit-animation-name: fadeIn;\n  animation-name: fadeIn;\n}\n.notify-fade-out {\n  animation-duration: 1s;\n  animation-fill-mode: both;\n  -webkit-animation-name: fadeOut;\n  animation-name: fadeOut;\n}\n@-webkit-keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@-webkit-keyframes fadeOut {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n@keyframes fadeOut {\n  0% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n"],
                    encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false
                },] },
    ];
    /** @nocollapse */
    NotifyHolderComponent.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return NotifyHolderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NotifyComponent = /** @class */ (function () {
    function NotifyComponent(sanitizer, zone, notifyService) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.zone = zone;
        this.notifyService = notifyService;
        this.classes = {};
        this.stopTime = false;
        this.count = 0;
        this.progressWidth = 0;
        this.instance = function () {
            _this.zone.runOutsideAngular(function () {
                _this.zone.run(function () { return _this.diff = (new Date().getTime() - _this.start) - (_this.count * _this.speed); });
                if (_this.count++ >= _this.steps) {
                    _this.zone.run(function () {
                        _this.remove();
                    });
                }
                else if (!_this.stopTime) {
                    if (_this.item.progress)
                        _this.zone.run(function () { return _this.progressWidth += 100 / _this.steps; });
                    _this.timer = setTimeout(_this.instance, (_this.speed - _this.diff));
                }
            });
        };
    }
    /**
     * @return {?}
     */
    NotifyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        switch (this.item.theme) {
            case 'bootstrap':
                switch (this.item.type) {
                    case 'alert':
                        this.item["bstype"] = 'warning';
                        break;
                    case 'error':
                        this.item["bstype"] = 'danger';
                        break;
                    default:
                        this.item["bstype"] = this.item.type;
                        break;
                }
                break;
        }
        this.html = this.sanitizer.bypassSecurityTrustHtml(this.item.html.replace(/\{([a-z]+)\}/g, function (full, key) {
            return _this.item[key] || '';
        }));
        this.classes['notify-theme-' + this.item.theme] = true;
        this.classes['notify-' + this.item.type] = true;
        if (this.item.rtl === true)
            this.classes['notify-rtl'] = true;
        if (this.item.animate_in) {
            this.classes['animated'] = true;
            this.classes[this.item.animate_in] = true;
        }
        if (this.item.className) {
            this.classes[this.item.className] = true;
        }
        if (this.item.timeout > 0)
            this.startTimeout();
    };
    /**
     * @return {?}
     */
    NotifyComponent.prototype.startTimeout = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.steps = this.item.timeout / 10;
        this.speed = this.item.timeout / this.steps;
        this.start = new Date().getTime();
        this.zone.runOutsideAngular(function () { return _this.timer = setTimeout(_this.instance, _this.speed); });
    };
    /**
     * @return {?}
     */
    NotifyComponent.prototype.onEnter = /**
     * @return {?}
     */
    function () {
        if (this.item.pauseOnHover) {
            this.stopTime = true;
        }
    };
    /**
     * @return {?}
     */
    NotifyComponent.prototype.onLeave = /**
     * @return {?}
     */
    function () {
        if (this.item.pauseOnHover) {
            this.stopTime = false;
            setTimeout(this.instance, (this.speed - this.diff));
        }
    };
    /**
     * @param {?} $e
     * @return {?}
     */
    NotifyComponent.prototype.onClick = /**
     * @param {?} $e
     * @return {?}
     */
    function ($e) {
        /** @type {?} */ ((this.item.click)).emit($e);
        if (this.item.clickToClose) {
            this.remove();
        }
    };
    /**
     * @return {?}
     */
    NotifyComponent.prototype.remove = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.item.animate_out) {
            this.classes[this.item.animate_in] = false;
            this.classes[this.item.animate_out] = true;
            this.zone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.zone.run(function () { return _this.notifyService.set(_this.item, false); });
                }, 500);
            });
        }
        else {
            this.notifyService.set(this.item, false);
        }
    };
    /**
     * @return {?}
     */
    NotifyComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.timer);
    };
    NotifyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notify',
                    template: "<div class=\"notify\" (click)=\"onClick($event)\" [ngClass]=\"classes\" [class]=\"animate\" (mouseenter)=\"onEnter()\" (mouseleave)=\"onLeave()\"> <div [innerHTML]=\"html\"></div> <div class=\"notify-progress\" *ngIf=\"item.progress\"> <span [ngStyle]=\"{'width': progressWidth + '%'}\"></span> </div> </div> ",
                    preserveWhitespaces: false
                },] },
    ];
    /** @nocollapse */
    NotifyComponent.ctorParameters = function () { return [
        { type: DomSanitizer, },
        { type: NgZone, },
        { type: NotifyService, },
    ]; };
    NotifyComponent.propDecorators = {
        "item": [{ type: Input },],
    };
    return NotifyComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NotifyPushService = /** @class */ (function () {
    function NotifyPushService() {
        this.permission = this.isSupported() ? Notification.permission : 'denied';
    }
    /**
     * @return {?}
     */
    NotifyPushService.prototype.requestPermission = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isSupported())
            Notification.requestPermission(function (status) { return (_this.permission = status); });
    };
    /**
     * @return {?}
     */
    NotifyPushService.prototype.isSupported = /**
     * @return {?}
     */
    function () {
        return 'Notification' in window;
    };
    /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    NotifyPushService.prototype.create = /**
     * @param {?} title
     * @param {?=} options
     * @return {?}
     */
    function (title, options) {
        var _this = this;
        return new Observable(function (obs) {
            if (!_this.isSupported()) {
                obs.error('不支持');
                obs.complete();
            }
            if (_this.permission !== 'granted') {
                obs.error("\u7528\u6237\u672A\u6388\u6743");
                obs.complete();
            }
            var /** @type {?} */ n = new Notification(title, options);
            n.onshow = function (e) { return obs.next({ notification: n, event: e }); };
            n.onclick = function (e) { return obs.next({ notification: n, event: e }); };
            n.onerror = function (e) { return obs.error({ notification: n, event: e }); };
            n.onclose = function () { return obs.complete(); };
        });
    };
    NotifyPushService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NotifyPushService.ctorParameters = function () { return []; };
    return NotifyPushService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NotifyModule = /** @class */ (function () {
    function NotifyModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NotifyModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NotifyModule,
            providers: [{ provide: NotifyServiceConfig, useValue: config }],
        };
    };
    NotifyModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NotifyHolderComponent, NotifyComponent],
                    providers: [NotifyService, NotifyPushService],
                    entryComponents: [NotifyHolderComponent, NotifyComponent],
                },] },
    ];
    return NotifyModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { defaultIcons, NotifyHolderComponent, NotifyComponent, NotifyServiceConfig, NotifyService, NotifyPushService, NotifyModule };
//# sourceMappingURL=notify.js.map
