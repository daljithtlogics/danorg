/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Directive, HostListener, Inject, Input, PLATFORM_ID, } from '@angular/core';
import { filter } from 'rxjs/operators';
import { commonStringsDefault } from '../../utils';
import { LARGE_BREAKPOINT } from '../../utils/breakpoints/breakpoints';
import { ClrStandaloneCdkTrapFocus } from '../../utils/focus/focus-trap';
import { ResponsiveNavCodes } from './responsive-nav-codes';
import '@cds/core/internal-components/close-button/register.js';
import * as i0 from "@angular/core";
import * as i1 from "../../utils/focus/focus-trap";
import * as i2 from "./providers/responsive-navigation.service";
import * as i3 from "../../utils/focus/focus-trap/standalone-cdk-trap-focus.directive";
const createCdsCloseButton = (document, ariaLabel) => {
    const cdsCloseButton = document.createElement('cds-internal-close-button');
    cdsCloseButton.setAttribute('icon-size', '32');
    cdsCloseButton.setAttribute('aria-label', ariaLabel);
    cdsCloseButton.setAttribute('aria-hidden', 'true');
    cdsCloseButton.setAttribute('type', 'button');
    /**
     * The button is hidden by default based on our Desktop-first approach.
     */
    cdsCloseButton.setAttribute('hidden', 'true');
    cdsCloseButton.className = 'clr-nav-close';
    return cdsCloseButton;
};
export class ClrNavLevel {
    constructor(platformId, cdkTrapFocus, responsiveNavService, elementRef, renderer, injector) {
        this.cdkTrapFocus = cdkTrapFocus;
        this.responsiveNavService = responsiveNavService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._isOpen = false;
        if (isPlatformBrowser(platformId)) {
            this._document = injector.get(DOCUMENT);
        }
        this._subscription = responsiveNavService.navControl
            .pipe(filter(x => x.navLevel === this.level), filter(({ controlCode }) => (controlCode === ResponsiveNavCodes.NAV_OPEN && !this.isOpen) ||
            (controlCode === ResponsiveNavCodes.NAV_CLOSE && this.isOpen)))
            .subscribe(({ controlCode }) => {
            if (controlCode === ResponsiveNavCodes.NAV_OPEN) {
                this.open();
                return;
            }
            this.close();
        });
        this._subscription.add(responsiveNavService.navControl
            .pipe(filter(({ controlCode }) => controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL))
            .subscribe(() => this.close()));
    }
    get level() {
        return this._level;
    }
    // getter to access the responsive navigation codes from the template
    get responsiveNavCodes() {
        return ResponsiveNavCodes;
    }
    get isOpen() {
        return this._isOpen;
    }
    ngOnInit() {
        this.cdkTrapFocus.enabled = false;
        if (!this.closeButtonAriaLabel) {
            this.closeButtonAriaLabel =
                this._level === ResponsiveNavCodes.NAV_LEVEL_1
                    ? commonStringsDefault.responsiveNavToggleClose
                    : commonStringsDefault.responsiveNavOverflowClose;
        }
        if (this.level !== ResponsiveNavCodes.NAV_LEVEL_1 && this.level !== ResponsiveNavCodes.NAV_LEVEL_2) {
            console.error('Nav Level can only be 1 or 2');
            return;
        }
        this.responsiveNavService.registerNav(this.level);
        this.addNavClass(this.level);
    }
    ngAfterViewInit() {
        const closeButton = createCdsCloseButton(this._document, this.closeButtonAriaLabel);
        this.renderer.listen(closeButton, 'click', this.close.bind(this));
        this.renderer.insertBefore(this.elementRef.nativeElement, closeButton, this.elementRef.nativeElement.firstChild); // Adding the button at the top of the nav
        if (this._document.body.clientWidth < LARGE_BREAKPOINT) {
            /**
             * Close if the document body is smaller than the large breakpoint for example:
             * - Refreshing the page
             * - Browser window size is changed when opening the applicaiton
             * - Browser zoom is turned on and zoomed to a size that makes the document smaller than the large breakpoint
             */
            this.close();
        }
    }
    ngOnDestroy() {
        this.responsiveNavService.unregisterNav(this.level);
        this._subscription.unsubscribe();
    }
    onResize(event) {
        const target = event.target;
        if (target.innerWidth < LARGE_BREAKPOINT && this.isOpen) {
            this.close();
            return;
        }
        this.showNavigation();
    }
    // TODO: Figure out whats the best way to do this. Possible methods
    // 1. HostListener (current solution)
    // 2. Directives on the .nav-link class. We discussed on moving away from class selectors but I forget the reason
    // why
    onMouseClick(target) {
        let current = target; // Get the element in the DOM on which the mouse was clicked
        const navHost = this.elementRef.nativeElement; // Get the current nav native HTML element
        // Start checking if current and navHost are equal.
        // If not traverse to the parentNode and check again.
        while (current) {
            if (current === navHost) {
                return;
            }
            else if (current.classList.contains('nav-link') && this._document.body.clientWidth < LARGE_BREAKPOINT) {
                this.close();
                return;
            }
            current = current.parentNode;
        }
    }
    addNavClass(level) {
        const navHostClassList = this.elementRef.nativeElement.classList;
        if (level === ResponsiveNavCodes.NAV_LEVEL_1) {
            navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_1);
        }
        else if (level === ResponsiveNavCodes.NAV_LEVEL_2) {
            navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_2);
        }
    }
    open() {
        this._isOpen = true;
        this.showNavigation();
        this.cdkTrapFocus.enabled = true;
        this.showCloseButton();
        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, this.level);
    }
    close() {
        this._isOpen = false;
        this.hideNavigation();
        this.cdkTrapFocus.enabled = false;
        this.hideCloseButton();
        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, this.level);
    }
    hideNavigation() {
        this.renderer.setAttribute(this.elementRef.nativeElement, 'aria-hidden', 'true');
        this.renderer.setAttribute(this.elementRef.nativeElement, 'hidden', 'true');
    }
    showNavigation() {
        this.renderer.setAttribute(this.elementRef.nativeElement, 'aria-hidden', 'false');
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'hidden');
    }
    hideCloseButton() {
        this.renderer.setAttribute(this.elementRef.nativeElement, 'aria-hidden', 'true');
        this.renderer.setAttribute(this.elementRef.nativeElement.querySelector('.clr-nav-close'), 'hidden', 'true');
    }
    showCloseButton() {
        this.renderer.setAttribute(this.elementRef.nativeElement.querySelector('.clr-nav-close'), 'aria-hidden', 'false');
        this.renderer.removeAttribute(this.elementRef.nativeElement.querySelector('.clr-nav-close'), 'hidden');
    }
}
ClrNavLevel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrNavLevel, deps: [{ token: PLATFORM_ID }, { token: i1.ClrStandaloneCdkTrapFocus }, { token: i2.ResponsiveNavigationService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive });
ClrNavLevel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: ClrNavLevel, selector: "[clr-nav-level]", inputs: { _level: ["clr-nav-level", "_level"], closeButtonAriaLabel: ["closeAriaLabel", "closeButtonAriaLabel"] }, host: { listeners: { "window:resize": "onResize($event)", "click": "onMouseClick($event.target)" } }, hostDirectives: [{ directive: i3.ClrStandaloneCdkTrapFocus }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrNavLevel, decorators: [{
            type: Directive,
            args: [{
                    selector: '[clr-nav-level]',
                    hostDirectives: [ClrStandaloneCdkTrapFocus],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i1.ClrStandaloneCdkTrapFocus }, { type: i2.ResponsiveNavigationService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.Injector }]; }, propDecorators: { _level: [{
                type: Input,
                args: ['clr-nav-level']
            }], closeButtonAriaLabel: [{
                type: Input,
                args: ['closeAriaLabel']
            }], onResize: [{
                type: HostListener,
                args: ['window:resize', ['$event']]
            }], onMouseClick: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,