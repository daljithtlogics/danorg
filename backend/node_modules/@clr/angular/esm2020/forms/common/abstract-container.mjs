/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ContentChild, Directive, Optional } from '@angular/core';
import { ClrControlError } from './error';
import { ClrControlHelper } from './helper';
import { CONTROL_STATE } from './if-control-state/if-control-state.service';
import { ClrLabel } from './label';
import { ClrControlSuccess } from './success';
import * as i0 from "@angular/core";
import * as i1 from "./if-control-state/if-control-state.service";
import * as i2 from "./providers/layout.service";
import * as i3 from "./providers/control-class.service";
import * as i4 from "./providers/ng-control.service";
export class ClrAbstractContainer {
    constructor(ifControlStateService, layoutService, controlClassService, ngControlService) {
        this.ifControlStateService = ifControlStateService;
        this.layoutService = layoutService;
        this.controlClassService = controlClassService;
        this.ngControlService = ngControlService;
        this._dynamic = false;
        this.subscriptions = [];
        this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe((state) => {
            this.state = state;
            this.updateHelpers();
        }));
        this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {
            this.control = control;
        }));
    }
    /**
     * @NOTE
     * Helper control is a bit different than the others, it must be visible most of the time:
     *   - Helper must NOT be visible when CONTROL_STATE is not NONE and Success or Error components are \
     * defined.
     *
     * For example user implement only Error control then if CONTROL_STATE is VALID then helper
     * control must be visible.
     */
    get showHelper() {
        // without existence of helper component there is no need of additional checks.
        if (!!this.controlHelperComponent === false) {
            return false;
        }
        return (
        /* Helper Component exist and the state of the form is NONE (not touched) */
        (!!this.controlHelperComponent && (!this.touched || this.state === CONTROL_STATE.NONE)) ||
            /* or there is no success component but the state of the form is VALID - show helper information */
            (!!this.controlSuccessComponent === false && this.state === CONTROL_STATE.VALID) ||
            /* or there is no error component but the state of the form is INVALID - show helper information */
            (!!this.controlErrorComponent === false && this.state === CONTROL_STATE.INVALID));
    }
    get showValid() {
        return this.touched && this.state === CONTROL_STATE.VALID && !!this.controlSuccessComponent;
    }
    get showInvalid() {
        return this.touched && this.state === CONTROL_STATE.INVALID && !!this.controlErrorComponent;
    }
    get touched() {
        return this.control?.touched;
    }
    ngAfterContentInit() {
        /**
         * We gonna set the helper control state, after all or most of the components
         * are ready - also this will trigger some initial flows into wrappers and controls,
         * like locating IDs  and setting  attributes.
         */
        this.updateHelpers();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
    }
    controlClass() {
        /**
         * Decide what subtext to display:
         *   - container is valid but no success component is implemented - use helper class
         *   - container is valid and success component is implemented - use success class
         */
        if ((!this.controlSuccessComponent && this.state === CONTROL_STATE.VALID) || !this.touched) {
            return this.controlClassService.controlClass(CONTROL_STATE.NONE, this.addGrid());
        }
        /**
         * Pass form control state and return string of classes to be applied to the container.
         */
        return this.controlClassService.controlClass(this.state, this.addGrid());
    }
    addGrid() {
        return this.layoutService && !this.layoutService.isVertical();
    }
    updateHelpers() {
        if (this.ngControlService) {
            this.ngControlService.setHelpers({
                show: this.showInvalid || this.showHelper || this.showValid,
                showInvalid: this.showInvalid,
                showHelper: this.showHelper,
                showValid: this.showValid,
            });
        }
    }
}
ClrAbstractContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrAbstractContainer, deps: [{ token: i1.IfControlStateService }, { token: i2.LayoutService, optional: true }, { token: i3.ControlClassService }, { token: i4.NgControlService }], target: i0.ɵɵFactoryTarget.Directive });
ClrAbstractContainer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: ClrAbstractContainer, queries: [{ propertyName: "label", first: true, predicate: ClrLabel, descendants: true }, { propertyName: "controlSuccessComponent", first: true, predicate: ClrControlSuccess, descendants: true }, { propertyName: "controlErrorComponent", first: true, predicate: ClrControlError, descendants: true }, { propertyName: "controlHelperComponent", first: true, predicate: ClrControlHelper, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrAbstractContainer, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.IfControlStateService }, { type: i2.LayoutService, decorators: [{
                    type: Optional
                }] }, { type: i3.ControlClassService }, { type: i4.NgControlService }]; }, propDecorators: { label: [{
                type: ContentChild,
                args: [ClrLabel, { static: false }]
            }], controlSuccessComponent: [{
                type: ContentChild,
                args: [ClrControlSuccess]
            }], controlErrorComponent: [{
                type: ContentChild,
                args: [ClrControlError]
            }], controlHelperComponent: [{
                type: ContentChild,
                args: [ClrControlHelper]
            }] } });
//# sourceMappingURL=data:application/json;base64,