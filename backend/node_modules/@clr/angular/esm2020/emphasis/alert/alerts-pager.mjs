/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./providers/multi-alert.service";
import * as i2 from "../../utils/i18n/common-strings.service";
import * as i3 from "../../icon/icon";
export class ClrAlertsPager {
    constructor(multiAlertService, commonStrings) {
        this.multiAlertService = multiAlertService;
        this.commonStrings = commonStrings;
        this.currentAlertChange = new EventEmitter(false);
        this.currentAlertIndexChange = new EventEmitter();
    }
    /**
     * Input/Output to support two way binding on current alert instance
     */
    get currentAlert() {
        return this.multiAlertService.currentAlert;
    }
    set currentAlert(alert) {
        if (alert) {
            this.multiAlertService.currentAlert = alert;
        }
    }
    /**
     * Input/Output to support two way binding on current alert index
     */
    get currentAlertIndex() {
        return this.multiAlertService.current;
    }
    set currentAlertIndex(index) {
        this.multiAlertService.current = index;
    }
    get previousAlertAriaLabel() {
        const CURRENT = this.currentAlertIndex + 1;
        return this.commonStrings.parse(this.commonStrings.keys.alertPreviousAlertAriaLabel, {
            CURRENT: (CURRENT === 1 ? this.multiAlertService.count : CURRENT - 1).toString(),
            COUNT: this.multiAlertService.count.toString(),
        });
    }
    get nextAlertAriaLabel() {
        const CURRENT = this.currentAlertIndex + 1;
        return this.commonStrings.parse(this.commonStrings.keys.alertNextAlertAriaLabel, {
            CURRENT: (CURRENT === this.multiAlertService.count ? 1 : CURRENT + 1).toString(),
            COUNT: this.multiAlertService.count.toString(),
        });
    }
    ngOnInit() {
        this.multiAlertServiceChanges = this.multiAlertService.changes.subscribe(index => {
            this.currentAlertIndexChange.emit(index);
            this.currentAlertChange.emit(this.multiAlertService.activeAlerts[index]);
        });
    }
    ngOnDestroy() {
        this.multiAlertServiceChanges.unsubscribe();
    }
    pageUp() {
        this.multiAlertService.next();
    }
    pageDown() {
        this.multiAlertService.previous();
    }
}
ClrAlertsPager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrAlertsPager, deps: [{ token: i1.MultiAlertService }, { token: i2.ClrCommonStringsService }], target: i0.ɵɵFactoryTarget.Component });
ClrAlertsPager.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: ClrAlertsPager, selector: "clr-alerts-pager", inputs: { currentAlert: ["clrCurrentAlert", "currentAlert"], currentAlertIndex: ["clrCurrentAlertIndex", "currentAlertIndex"] }, outputs: { currentAlertChange: "clrCurrentAlertChange", currentAlertIndexChange: "clrCurrentAlertIndexChange" }, host: { properties: { "class.alerts-pager": "true" } }, ngImport: i0, template: "<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class=\"alerts-pager-control\">\n  <div class=\"alerts-page-down\">\n    <button class=\"alerts-pager-button\" type=\"button\" (click)=\"pageDown()\" [attr.aria-label]=\"previousAlertAriaLabel\">\n      <cds-icon shape=\"angle\" direction=\"left\"></cds-icon>\n    </button>\n  </div>\n  <div class=\"alerts-pager-text\">{{this.multiAlertService.current+1}} / {{this.multiAlertService.count}}</div>\n  <div class=\"alerts-page-up\">\n    <button class=\"alerts-pager-button\" type=\"button\" (click)=\"pageUp()\" [attr.aria-label]=\"nextAlertAriaLabel\">\n      <cds-icon shape=\"angle\" direction=\"right\"></cds-icon>\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.CdsIconCustomTag, selector: "cds-icon" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrAlertsPager, decorators: [{
            type: Component,
            args: [{ selector: 'clr-alerts-pager', host: { '[class.alerts-pager]': 'true' }, template: "<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class=\"alerts-pager-control\">\n  <div class=\"alerts-page-down\">\n    <button class=\"alerts-pager-button\" type=\"button\" (click)=\"pageDown()\" [attr.aria-label]=\"previousAlertAriaLabel\">\n      <cds-icon shape=\"angle\" direction=\"left\"></cds-icon>\n    </button>\n  </div>\n  <div class=\"alerts-pager-text\">{{this.multiAlertService.current+1}} / {{this.multiAlertService.count}}</div>\n  <div class=\"alerts-page-up\">\n    <button class=\"alerts-pager-button\" type=\"button\" (click)=\"pageUp()\" [attr.aria-label]=\"nextAlertAriaLabel\">\n      <cds-icon shape=\"angle\" direction=\"right\"></cds-icon>\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MultiAlertService }, { type: i2.ClrCommonStringsService }]; }, propDecorators: { currentAlertChange: [{
                type: Output,
                args: ['clrCurrentAlertChange']
            }], currentAlertIndexChange: [{
                type: Output,
                args: ['clrCurrentAlertIndexChange']
            }], currentAlert: [{
                type: Input,
                args: ['clrCurrentAlert']
            }], currentAlertIndex: [{
                type: Input,
                args: ['clrCurrentAlertIndex']
            }] } });
//# sourceMappingURL=data:application/json;base64,