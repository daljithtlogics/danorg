/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class TreeFocusManagerService {
    constructor() {
        this._focusRequest = new Subject();
        this._focusChange = new Subject();
    }
    get focusRequest() {
        return this._focusRequest.asObservable();
    }
    get focusChange() {
        return this._focusChange.asObservable();
    }
    focusNode(model) {
        if (model) {
            this._focusRequest.next(model.nodeId);
        }
    }
    broadcastFocusedNode(nodeId) {
        if (this.focusedNodeId !== nodeId) {
            this.focusedNodeId = nodeId;
            this._focusChange.next(nodeId);
        }
    }
    focusParent(model) {
        if (model) {
            this.focusNode(model.parent);
        }
    }
    focusFirstVisibleNode() {
        const focusModel = this.rootNodeModels && this.rootNodeModels[0];
        this.focusNode(focusModel);
    }
    focusLastVisibleNode() {
        this.focusNode(this.findLastVisibleInTree());
    }
    focusNodeAbove(model) {
        this.focusNode(this.findNodeAbove(model));
    }
    focusNodeBelow(model) {
        this.focusNode(this.findNodeBelow(model));
    }
    focusNodeStartsWith(searchString, model) {
        this.focusNode(this.findClosestNodeStartsWith(searchString, model));
    }
    findSiblings(model) {
        // the method will return not only sibling models but also itself among them
        if (model.parent) {
            return model.parent.children;
        }
        else {
            return this.rootNodeModels;
        }
    }
    findLastVisibleInNode(model) {
        // the method will traverse through until it finds the last visible node from the given node
        if (!model) {
            return null;
        }
        if (model.expanded && model.children.length > 0) {
            const children = model.children;
            const lastChild = children[children.length - 1];
            return this.findLastVisibleInNode(lastChild);
        }
        else {
            return model;
        }
    }
    findNextFocusable(model) {
        if (!model) {
            return null;
        }
        const siblings = this.findSiblings(model);
        const selfIndex = siblings.indexOf(model);
        if (selfIndex < siblings.length - 1) {
            return siblings[selfIndex + 1];
        }
        else if (selfIndex === siblings.length - 1) {
            return this.findNextFocusable(model.parent);
        }
        return null;
    }
    findLastVisibleInTree() {
        const lastRootNode = this.rootNodeModels && this.rootNodeModels.length && this.rootNodeModels[this.rootNodeModels.length - 1];
        return this.findLastVisibleInNode(lastRootNode);
    }
    findNodeAbove(model) {
        if (!model) {
            return null;
        }
        const siblings = this.findSiblings(model);
        const selfIndex = siblings.indexOf(model);
        if (selfIndex === 0) {
            return model.parent;
        }
        else if (selfIndex > 0) {
            return this.findLastVisibleInNode(siblings[selfIndex - 1]);
        }
        return null;
    }
    findNodeBelow(model) {
        if (!model) {
            return null;
        }
        if (model.expanded && model.children.length > 0) {
            return model.children[0];
        }
        else {
            return this.findNextFocusable(model);
        }
    }
    findDescendentNodeStartsWith(searchString, model) {
        if (model.expanded && model.children.length > 0) {
            for (const childModel of model.children) {
                const found = this.findNodeStartsWith(searchString, childModel);
                if (found) {
                    return found;
                }
            }
        }
        return null;
    }
    findSiblingNodeStartsWith(searchString, model) {
        const siblings = this.findSiblings(model);
        const selfIndex = siblings.indexOf(model);
        // Look from sibling nodes
        for (let i = selfIndex + 1; i < siblings.length; i++) {
            const siblingModel = siblings[i];
            const found = this.findNodeStartsWith(searchString, siblingModel);
            if (found) {
                return found;
            }
        }
        return null;
    }
    findRootNodeStartsWith(searchString, model) {
        for (const rootModel of this.rootNodeModels) {
            // Don't look from a parent yet
            if (model.parent && model.parent === rootModel) {
                continue;
            }
            const found = this.findNodeStartsWith(searchString, rootModel);
            if (found) {
                return found;
            }
        }
        return null;
    }
    findNodeStartsWith(searchString, model) {
        if (!model) {
            return null;
        }
        if (model.textContent.startsWith(searchString)) {
            return model;
        }
        return this.findDescendentNodeStartsWith(searchString, model);
    }
    findClosestNodeStartsWith(searchString, model) {
        if (!model) {
            return null;
        }
        const foundFromDescendents = this.findDescendentNodeStartsWith(searchString, model);
        if (foundFromDescendents) {
            return foundFromDescendents;
        }
        const foundFromSiblings = this.findSiblingNodeStartsWith(searchString, model);
        if (foundFromSiblings) {
            return foundFromSiblings;
        }
        const foundFromRootNodes = this.findRootNodeStartsWith(searchString, model);
        if (foundFromRootNodes) {
            return foundFromRootNodes;
        }
        // Now look from its own direct parent
        return this.findNodeStartsWith(searchString, model.parent);
    }
}
TreeFocusManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TreeFocusManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TreeFocusManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TreeFocusManagerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: TreeFocusManagerService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,