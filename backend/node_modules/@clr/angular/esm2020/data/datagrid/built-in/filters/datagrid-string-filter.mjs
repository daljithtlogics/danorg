/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { ClrDatagridFilter } from '../../datagrid-filter';
import { CustomFilter } from '../../providers/custom-filter';
import { RegisteredFilter } from '../../providers/filters';
import { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';
import { DatagridStringFilterImpl } from './datagrid-string-filter-impl';
import * as i0 from "@angular/core";
import * as i1 from "../../providers/filters";
import * as i2 from "../../../../utils/dom-adapter/dom-adapter";
import * as i3 from "../../../../utils/i18n/common-strings.service";
import * as i4 from "../../../../utils/popover/providers/popover-toggle.service";
import * as i5 from "@angular/forms";
import * as i6 from "../../datagrid-filter";
export class DatagridStringFilter extends DatagridFilterRegistrar {
    constructor(filters, domAdapter, commonStrings, smartToggleService, ngZone) {
        super(filters);
        this.domAdapter = domAdapter;
        this.commonStrings = commonStrings;
        this.smartToggleService = smartToggleService;
        this.ngZone = ngZone;
        this.filterValueChange = new EventEmitter();
        /**
         * Indicates if the filter dropdown is open
         */
        this.open = false;
        this.subs = [];
    }
    /**
     * Customizable filter logic based on a search text
     */
    set customStringFilter(value) {
        if (value instanceof RegisteredFilter) {
            this.setFilter(value);
        }
        else {
            this.setFilter(new DatagridStringFilterImpl(value));
        }
        if (this.initFilterValue) {
            this.value = this.initFilterValue;
            // This initFilterValue should be used only once after the filter registration
            // So deleting this property value to prevent it from being used again
            // if this customStringFilter property is set again
            delete this.initFilterValue;
        }
    }
    /**
     * Common setter for the input value
     */
    get value() {
        return this.filter.value;
    }
    set value(value) {
        if (this.filter && typeof value === 'string') {
            if (!value) {
                value = '';
            }
            if (value !== this.filter.value) {
                this.filter.value = value;
                this.filterValueChange.emit(value);
            }
        }
        else {
            this.initFilterValue = value;
        }
    }
    get placeholderValue() {
        return this.placeholder || this.commonStrings.keys.filterItems;
    }
    ngAfterViewInit() {
        this.subs.push(this.smartToggleService.openChange.subscribe(openChange => {
            this.open = openChange;
            // Note: this is being run outside of the Angular zone because `element.focus()` doesn't require
            // running change detection.
            this.ngZone.runOutsideAngular(() => {
                // The animation frame in used because when this executes, the input isn't displayed.
                // Note: `element.focus()` causes re-layout and this may lead to frame drop on slower devices.
                // `setTimeout` is a macrotask and macrotasks are executed within the current rendering frame.
                // Animation tasks are executed within the next rendering frame.
                requestAnimationFrame(() => {
                    this.domAdapter.focus(this.input.nativeElement);
                });
            });
        }));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.subs.forEach(sub => sub.unsubscribe());
    }
}
DatagridStringFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: DatagridStringFilter, deps: [{ token: i1.FiltersProvider }, { token: i2.DomAdapter }, { token: i3.ClrCommonStringsService }, { token: i4.ClrPopoverToggleService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
DatagridStringFilter.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: DatagridStringFilter, selector: "clr-dg-string-filter", inputs: { placeholder: ["clrFilterPlaceholder", "placeholder"], customStringFilter: ["clrDgStringFilter", "customStringFilter"], value: ["clrFilterValue", "value"] }, outputs: { filterValueChange: "clrFilterValueChange" }, providers: [{ provide: CustomFilter, useExisting: DatagridStringFilter }], viewQueries: [{ propertyName: "input", first: true, predicate: ["input"], descendants: true }, { propertyName: "filterContainer", first: true, predicate: ClrDatagridFilter, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        #input
        type="text"
        autocomplete="off"
        name="search"
        [(ngModel)]="value"
        class="clr-input"
        [attr.aria-label]="placeholderValue"
        [placeholder]="placeholderValue"
      />
    </clr-dg-filter>
  `, isInline: true, dependencies: [{ kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i6.ClrDatagridFilter, selector: "clr-dg-filter", inputs: ["clrDgFilterOpen", "clrDgFilter"], outputs: ["clrDgFilterOpenChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: DatagridStringFilter, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-dg-string-filter',
                    providers: [{ provide: CustomFilter, useExisting: DatagridStringFilter }],
                    template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        #input
        type="text"
        autocomplete="off"
        name="search"
        [(ngModel)]="value"
        class="clr-input"
        [attr.aria-label]="placeholderValue"
        [placeholder]="placeholderValue"
      />
    </clr-dg-filter>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.FiltersProvider }, { type: i2.DomAdapter }, { type: i3.ClrCommonStringsService }, { type: i4.ClrPopoverToggleService }, { type: i0.NgZone }]; }, propDecorators: { placeholder: [{
                type: Input,
                args: ['clrFilterPlaceholder']
            }], filterValueChange: [{
                type: Output,
                args: ['clrFilterValueChange']
            }], input: [{
                type: ViewChild,
                args: ['input']
            }], filterContainer: [{
                type: ViewChild,
                args: [ClrDatagridFilter]
            }], customStringFilter: [{
                type: Input,
                args: ['clrDgStringFilter']
            }], value: [{
                type: Input,
                args: ['clrFilterValue']
            }] } });
//# sourceMappingURL=data:application/json;base64,