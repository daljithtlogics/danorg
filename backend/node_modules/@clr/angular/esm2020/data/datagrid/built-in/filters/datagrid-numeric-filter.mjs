/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ClrDatagridFilter } from '../../datagrid-filter';
import { CustomFilter } from '../../providers/custom-filter';
import { RegisteredFilter } from '../../providers/filters';
import { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';
import { DatagridNumericFilterImpl } from './datagrid-numeric-filter-impl';
import * as i0 from "@angular/core";
import * as i1 from "../../providers/filters";
import * as i2 from "../../../../utils/dom-adapter/dom-adapter";
import * as i3 from "../../../../utils/i18n/common-strings.service";
import * as i4 from "../../../../utils/popover/providers/popover-toggle.service";
import * as i5 from "@angular/forms";
import * as i6 from "../../datagrid-filter";
export class DatagridNumericFilter extends DatagridFilterRegistrar {
    constructor(filters, domAdapter, commonStrings, popoverToggleService, ngZone) {
        super(filters);
        this.domAdapter = domAdapter;
        this.commonStrings = commonStrings;
        this.popoverToggleService = popoverToggleService;
        this.ngZone = ngZone;
        this.filterValueChange = new EventEmitter();
        /**
         * Indicates if the filter dropdown is open
         */
        this.open = false;
        this.subscriptions = [];
    }
    /**
     * Common setter for the input values
     */
    get value() {
        return [this.filter.low, this.filter.high];
    }
    set value(values) {
        if (this.filter && Array.isArray(values)) {
            if (values && (values[0] !== this.filter.low || values[1] !== this.filter.high)) {
                if (typeof values[0] === 'number') {
                    this.filter.low = values[0];
                }
                else {
                    this.filter.low = null;
                }
                if (typeof values[1] === 'number') {
                    this.filter.high = values[1];
                }
                else {
                    this.filter.high = null;
                }
                this.filterValueChange.emit(values);
            }
        }
        else {
            this.initFilterValues = values;
        }
    }
    /**
     * Customizable filter logic based on high and low values
     */
    set customNumericFilter(value) {
        if (value instanceof RegisteredFilter) {
            this.setFilter(value);
        }
        else {
            this.setFilter(new DatagridNumericFilterImpl(value));
        }
        if (this.initFilterValues) {
            this.value = this.initFilterValues;
            // This initFilterValues should be used only once after the filter registration
            // So deleting this property value to prevent it from being used again
            // if this customStringFilter property is set again
            delete this.initFilterValues;
        }
    }
    get maxPlaceholderValue() {
        return this.maxPlaceholder || this.commonStrings.keys.maxValue;
    }
    get minPlaceholderValue() {
        return this.minPlaceholder || this.commonStrings.keys.minValue;
    }
    get low() {
        if (typeof this.filter.low === 'number' && isFinite(this.filter.low)) {
            return this.filter.low;
        }
        else {
            // There's not a low limit
            return null;
        }
    }
    set low(low) {
        if (typeof low === 'number' && low !== this.filter.low) {
            this.filter.low = low;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
        else if (typeof low !== 'number') {
            this.filter.low = null;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
    }
    get high() {
        if (typeof this.filter.high === 'number' && isFinite(this.filter.high)) {
            return this.filter.high;
        }
        else {
            // There's not a high limit
            return null;
        }
    }
    set high(high) {
        if (typeof high === 'number' && high !== this.filter.high) {
            this.filter.high = high;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
        else if (typeof high !== 'number') {
            this.filter.high = null;
            this.filterValueChange.emit([this.filter.low, this.filter.high]);
        }
    }
    ngAfterViewInit() {
        this.subscriptions.push(this.popoverToggleService.openChange.subscribe(openChange => {
            this.open = openChange;
            // Note: this is being run outside of the Angular zone because `element.focus()` doesn't require
            // running change detection.
            this.ngZone.runOutsideAngular(() => {
                // The animation frame in used because when this executes, the input isn't displayed.
                // Note: `element.focus()` causes re-layout and this may lead to frame drop on slower devices.
                // `setTimeout` is a macrotask and macrotasks are executed within the current rendering frame.
                // Animation tasks are executed within the next rendering frame.
                requestAnimationFrame(() => {
                    this.domAdapter.focus(this.input.nativeElement);
                });
            });
        }));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.subscriptions.forEach(sub => {
            sub.unsubscribe();
        });
    }
}
DatagridNumericFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: DatagridNumericFilter, deps: [{ token: i1.FiltersProvider }, { token: i2.DomAdapter }, { token: i3.ClrCommonStringsService }, { token: i4.ClrPopoverToggleService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
DatagridNumericFilter.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: DatagridNumericFilter, selector: "clr-dg-numeric-filter", inputs: { minPlaceholder: ["clrFilterMinPlaceholder", "minPlaceholder"], maxPlaceholder: ["clrFilterMaxPlaceholder", "maxPlaceholder"], value: ["clrFilterValue", "value"], customNumericFilter: ["clrDgNumericFilter", "customNumericFilter"] }, outputs: { filterValueChange: "clrFilterValueChange" }, providers: [{ provide: CustomFilter, useExisting: DatagridNumericFilter }], viewQueries: [{ propertyName: "input", first: true, predicate: ["input_low"], descendants: true }, { propertyName: "filterContainer", first: true, predicate: ClrDatagridFilter, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        class="datagrid-numeric-filter-input"
        #input_low
        type="number"
        autocomplete="off"
        name="low"
        [(ngModel)]="low"
        [placeholder]="minPlaceholderValue"
        [attr.aria-label]="minPlaceholderValue"
      />
      <span class="datagrid-filter-input-spacer"></span>
      <input
        class="datagrid-numeric-filter-input"
        #input_high
        type="number"
        autocomplete="off"
        name="high"
        [(ngModel)]="high"
        [placeholder]="maxPlaceholderValue"
        [attr.aria-label]="maxPlaceholderValue"
      />
    </clr-dg-filter>
  `, isInline: true, dependencies: [{ kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i6.ClrDatagridFilter, selector: "clr-dg-filter", inputs: ["clrDgFilterOpen", "clrDgFilter"], outputs: ["clrDgFilterOpenChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: DatagridNumericFilter, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-dg-numeric-filter',
                    providers: [{ provide: CustomFilter, useExisting: DatagridNumericFilter }],
                    template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        class="datagrid-numeric-filter-input"
        #input_low
        type="number"
        autocomplete="off"
        name="low"
        [(ngModel)]="low"
        [placeholder]="minPlaceholderValue"
        [attr.aria-label]="minPlaceholderValue"
      />
      <span class="datagrid-filter-input-spacer"></span>
      <input
        class="datagrid-numeric-filter-input"
        #input_high
        type="number"
        autocomplete="off"
        name="high"
        [(ngModel)]="high"
        [placeholder]="maxPlaceholderValue"
        [attr.aria-label]="maxPlaceholderValue"
      />
    </clr-dg-filter>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.FiltersProvider }, { type: i2.DomAdapter }, { type: i3.ClrCommonStringsService }, { type: i4.ClrPopoverToggleService }, { type: i0.NgZone }]; }, propDecorators: { minPlaceholder: [{
                type: Input,
                args: ['clrFilterMinPlaceholder']
            }], maxPlaceholder: [{
                type: Input,
                args: ['clrFilterMaxPlaceholder']
            }], filterValueChange: [{
                type: Output,
                args: ['clrFilterValueChange']
            }], input: [{
                type: ViewChild,
                args: ['input_low']
            }], filterContainer: [{
                type: ViewChild,
                args: [ClrDatagridFilter]
            }], value: [{
                type: Input,
                args: ['clrFilterValue']
            }], customNumericFilter: [{
                type: Input,
                args: ['clrDgNumericFilter']
            }] } });
//# sourceMappingURL=data:application/json;base64,