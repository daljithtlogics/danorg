{"version":3,"file":"956.6ea72306ebe32109.js","mappings":"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","names":["i0","HealthCheckComponent_div_6_ng_container_4_Template","HealthCheckComponent_div_6_ng_template_5_Template","_c0","status_r2","_r4","ctx_r0","healthCheckService","lastCheck$","HealthCheckComponent_tr_28_ng_container_5_Template","HealthCheckComponent_tr_28_ng_template_6_Template","row_r6","key","result","status","_r8","message","HealthCheckComponent","constructor","this","i1","selectors","decls","vars","consts","template","rf","ctx","HealthCheckComponent_div_6_Template","refresh","HealthCheckComponent_tr_28_Template","status$","details$","job","progress","JobStateLabelComponent","iconShape","state","JobState","COMPLETED","FAILED","CANCELLED","PENDING","RETRYING","RUNNING","colorType","inputs","JobStateLabelComponent_span_4_Template","item_r8","name","JobListComponent_ng_template_40_ng_container_0_Template","JobListComponent_ng_template_40_ng_template_1_Template","_r10","job_r13","id","job_r14","createdAt","job_r15","queueName","job_r16","data","JobListComponent_ng_template_57_vdr_dropdown_0_Template","job_r19","attempts","retries","JobListComponent_ng_template_60_div_1_Template","JobListComponent_ng_template_60_div_2_Template","job_r24","duration","job_r25","error","_r33","item","ctx_r31","cancelJob","JobListComponent_ng_template_66_vdr_dropdown_0_Template","JobListComponent_ng_template_66_vdr_dropdown_1_Template","JobListComponent_ng_template_66_vdr_dropdown_2_Template","ctx_r7","hasResult","isSettled","JobListComponent","BaseListComponent","dataService","router","route","super","liveUpdate","FormControl","queueFilter","stateFilter","setQueryFn","args","settings","getAllJobs","jobs","skip","take","value","eq","options","filter","sort","SortOrder","DESC","ngOnInit","timer","pipe","takeUntil","destroy$","subscribe","queues$","getJobQueues","mapStream","res","jobQueues","map","queues","running","Object","keys","length","i2","features","JobListComponent_ng_template_40_Template","$event","setPageNumber","setItemsPerPage","JobListComponent_ng_template_48_Template","JobListComponent_ng_template_51_Template","JobListComponent_ng_template_54_Template","JobListComponent_ng_template_57_Template","JobListComponent_ng_template_60_Template","JobListComponent_ng_template_63_Template","JobListComponent_ng_template_66_Template","items$","itemsPerPage$","totalItems$","currentPage$","systemRoutes","path","component","breadcrumb","_","SystemModule","SharedModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./src/lib/system/src/components/health-check/health-check.component.html","./src/lib/system/src/components/health-check/health-check.component.ts","./src/lib/system/src/components/job-state-label/job-state-label.component.html","./src/lib/system/src/components/job-state-label/job-state-label.component.ts","./src/lib/system/src/components/job-list/job-list.component.html","./src/lib/system/src/components/job-list/job-list.component.ts","./src/lib/system/src/system.routes.ts","./src/lib/system/src/system.module.ts"],"sourcesContent":["<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\r\n                    <div class=\"status-icon\">\r\n                        <clr-icon\r\n                            [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\r\n                            [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\r\n                            size=\"48\"\r\n                        ></clr-icon>\r\n                    </div>\r\n                    <div class=\"status-detail\">\r\n                        <ng-container *ngIf=\"status === 'ok'; else error\">\r\n                            {{ 'system.health-all-systems-up' | translate }}\r\n                        </ng-container>\r\n                        <ng-template #error>\r\n                            {{ 'system.health-error' | translate }}\r\n                        </ng-template>\r\n                        <div class=\"last-checked\">\r\n                            {{ 'system.health-last-checked' | translate }}:\r\n                            {{ healthCheckService.lastCheck$ | async | localeDate : 'mediumTime' }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\r\n                <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\r\n                    <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\r\n                </button>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n    <vdr-page-block>\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"left\">\r\n                        {{ 'common.name' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-status' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-message' | translate }}\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let row of healthCheckService.details$ | async\">\r\n                    <td class=\"align-middle left\">{{ row.key }}</td>\r\n                    <td class=\"align-middle left\">\r\n                        <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\r\n                            <ng-container *ngIf=\"row.result.status === 'up'; else down\">\r\n                                <clr-icon shape=\"check-circle\"></clr-icon>\r\n                                {{ 'system.health-status-up' | translate }}\r\n                            </ng-container>\r\n                            <ng-template #down>\r\n                                <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                                {{ 'system.health-status-down' | translate }}\r\n                            </ng-template>\r\n                        </vdr-chip>\r\n                    </td>\r\n                    <td class=\"align-middle left\">{{ row.result.message }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </vdr-page-block>\r\n</vdr-page-body>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { HealthCheckService } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-health-check',\r\n    templateUrl: './health-check.component.html',\r\n    styleUrls: ['./health-check.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class HealthCheckComponent {\r\n    constructor(public healthCheckService: HealthCheckService) {}\r\n}\r\n","<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { JobInfoFragment, JobState } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'vdr-job-state-label',\n    templateUrl: './job-state-label.component.html',\n    styleUrls: ['./job-state-label.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class JobStateLabelComponent {\n    @Input()\n    job: JobInfoFragment;\n\n    get iconShape(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'check-circle';\n            case JobState.FAILED:\n                return 'exclamation-circle';\n            case JobState.CANCELLED:\n                return 'ban';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return 'hourglass';\n            case JobState.RUNNING:\n                return 'sync';\n        }\n    }\n\n    get colorType(): string {\n        switch (this.job.state) {\n            case JobState.COMPLETED:\n                return 'success';\n            case JobState.FAILED:\n            case JobState.CANCELLED:\n                return 'error';\n            case JobState.PENDING:\n            case JobState.RETRYING:\n                return '';\n            case JobState.RUNNING:\n                return 'warning';\n        }\n    }\n}\n","<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <clr-checkbox-wrapper class=\"mr-2\">\r\n                    <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\" />\r\n                    <label>{{ 'common.live-update' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\r\n                <ng-select\r\n                    class=\"mr-2\"\r\n                    [addTag]=\"false\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    [formControl]=\"stateFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-option [value]=\"''\">\r\n                        <vdr-chip>{{ 'system.job-state-all' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'PENDING'\">\r\n                        <vdr-chip>{{ 'system.job-state-pending' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'RUNNING'\">\r\n                        <vdr-chip colorType=\"warning\">{{ 'system.job-state-running' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'COMPLETED'\">\r\n                        <vdr-chip colorType=\"success\">{{ 'system.job-state-completed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'FAILED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-failed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'CANCELLED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-cancelled' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                </ng-select>\r\n                <ng-select\r\n                    [addTag]=\"false\"\r\n                    [items]=\"queues$ | async\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    bindValue=\"name\"\r\n                    [formControl]=\"queueFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n                        <ng-container *ngIf=\"item.name === 'all'; else others\">\r\n                            <vdr-chip>{{ 'system.all-job-queues' | translate }}</vdr-chip>\r\n                        </ng-container>\r\n                        <ng-template #others>\r\n                            <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </ng-select>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n\r\n    <vdr-data-table-2\r\n        id=\"job-list\"\r\n        [items]=\"items$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        [currentPage]=\"currentPage$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    >\r\n        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.createdAt | timeAgo }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-queue-name' | translate\" id=\"job-queue-name\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-data' | translate\" id=\"job-data\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"job.data\">\r\n                    <button\r\n                        class=\"button-small\"\r\n                        vdrDropdownTrigger\r\n                        [title]=\"'system.job-data' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-state' | translate\" id=\"job-state\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\r\n                <div *ngIf=\"job.state === 'FAILED'\" class=\"retry-info\">after {{ job.attempts }} attempts</div>\r\n                <div *ngIf=\"job.state === 'RUNNING' || job.state === 'RETRYING'\" class=\"retry-info\">\r\n                    attempting {{ job.attempts }} of {{ job.retries + 1 }}\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-duration' | translate\" id=\"job-duration\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.duration | duration }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-result' | translate\" id=\"job-result\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"hasResult(job)\">\r\n                    <button class=\"button-small mr-1\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                        {{ 'system.job-result' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"job.error\">\r\n                    <button class=\"button-small\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                        {{ 'system.job-error' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            {{ job.error }}\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"cancelJob(job.id)\"\r\n                            [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.cancel' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n</vdr-page-body>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetAllJobsQuery,\r\n    GetJobQueueListQuery,\r\n    ItemOf,\r\n    JobState,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable, timer } from 'rxjs';\r\nimport { filter, map, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-job-list',\r\n    templateUrl: './job-list.component.html',\r\n    styleUrls: ['./job-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class JobListComponent\r\n    extends BaseListComponent<GetAllJobsQuery, ItemOf<GetAllJobsQuery, 'jobs'>>\r\n    implements OnInit\r\n{\r\n    queues$: Observable<GetJobQueueListQuery['jobQueues']>;\r\n    liveUpdate = new FormControl(true);\r\n    queueFilter = new FormControl('all');\r\n    stateFilter = new FormControl<JobState | string>('');\r\n\r\n    constructor(private dataService: DataService, router: Router, route: ActivatedRoute) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.settings.getAllJobs(...args),\r\n            data => data.jobs,\r\n            (skip, take) => {\r\n                const queueFilter =\r\n                    this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };\r\n                const stateFilter = this.stateFilter.value;\r\n                return {\r\n                    options: {\r\n                        skip,\r\n                        take,\r\n                        filter: {\r\n                            ...queueFilter,\r\n                            ...(stateFilter ? { state: { eq: stateFilter } } : {}),\r\n                        },\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    },\r\n                };\r\n            },\r\n        );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        timer(5000, 2000)\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n                filter(() => !!this.liveUpdate.value),\r\n            )\r\n            .subscribe(() => {\r\n                this.refresh();\r\n            });\r\n        this.queues$ = this.dataService.settings\r\n            .getJobQueues()\r\n            .mapStream(res => res.jobQueues)\r\n            .pipe(map(queues => [{ name: 'all', running: true }, ...queues]));\r\n    }\r\n\r\n    hasResult(job: ItemOf<GetAllJobsQuery, 'jobs'>): boolean {\r\n        const result = job.result;\r\n        if (result == null) {\r\n            return false;\r\n        }\r\n        if (typeof result === 'object') {\r\n            return Object.keys(result).length > 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    cancelJob(id: string) {\r\n        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\n\r\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\r\nimport { JobListComponent } from './components/job-list/job-list.component';\r\n\r\nexport const systemRoutes: Route[] = [\r\n    {\r\n        path: 'jobs',\r\n        component: JobListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.job-queue'),\r\n        },\r\n    },\r\n    {\r\n        path: 'system-status',\r\n        component: HealthCheckComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.system-status'),\r\n        },\r\n    },\r\n];\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { HealthCheckComponent } from './components/health-check/health-check.component';\r\nimport { JobListComponent } from './components/job-list/job-list.component';\r\nimport { JobStateLabelComponent } from './components/job-state-label/job-state-label.component';\r\nimport { systemRoutes } from './system.routes';\r\n\r\n@NgModule({\r\n    declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],\r\n    imports: [SharedModule, RouterModule.forChild(systemRoutes)],\r\n})\r\nexport class SystemModule {}\r\n"],"x_google_ignoreList":[]}