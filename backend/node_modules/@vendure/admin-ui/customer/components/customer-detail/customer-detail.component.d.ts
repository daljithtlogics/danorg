import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, UntypedFormControl } from '@angular/forms';
import { CustomerDetailQueryDocument, CustomerDetailQueryQuery, DataService, GetAvailableCountriesQuery, GetCustomerHistoryQuery, ModalService, NotificationService, TimelineHistoryEntry, TypedBaseDetailComponent } from '@vendure/admin-ui/core';
import { Observable, Subject } from 'rxjs';
import * as i0 from "@angular/core";
type CustomerWithOrders = NonNullable<CustomerDetailQueryQuery['customer']>;
export declare const CUSTOMER_DETAIL_QUERY: import("apollo-angular").TypedDocumentNode<unknown, unknown>;
export declare class CustomerDetailComponent extends TypedBaseDetailComponent<typeof CustomerDetailQueryDocument, 'customer'> implements OnInit, OnDestroy {
    private changeDetector;
    private formBuilder;
    protected dataService: DataService;
    private modalService;
    private notificationService;
    customFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    addressCustomFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    detailForm: import("@angular/forms").FormGroup<{
        customer: import("@angular/forms").FormGroup<{
            title: import("@angular/forms").FormControl<string | null>;
            firstName: import("@angular/forms").FormControl<string | null>;
            lastName: import("@angular/forms").FormControl<string | null>;
            phoneNumber: import("@angular/forms").FormControl<string | null>;
            emailAddress: import("@angular/forms").FormControl<string | null>;
            password: import("@angular/forms").FormControl<string | null>;
            customFields: import("@angular/forms").FormGroup<{
                [x: string]: import("@angular/forms").FormControl<false | "" | 0 | Date | null>;
            }>;
        }>;
        addresses: import("@angular/forms").FormArray<any>;
    }>;
    availableCountries$: Observable<GetAvailableCountriesQuery['countries']['items']>;
    orders$: Observable<CustomerWithOrders['orders']['items']>;
    ordersCount$: Observable<number>;
    history$: Observable<NonNullable<GetCustomerHistoryQuery['customer']>['history']['items'] | undefined>;
    fetchHistory: Subject<void>;
    defaultShippingAddressId: string;
    defaultBillingAddressId: string;
    addressesToDeleteIds: Set<string>;
    addressDefaultsUpdated: boolean;
    ordersPerPage: number;
    currentOrdersPage: number;
    private orderListUpdates$;
    constructor(changeDetector: ChangeDetectorRef, formBuilder: FormBuilder, dataService: DataService, modalService: ModalService, notificationService: NotificationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    getAddressFormControls(): UntypedFormControl[];
    setDefaultBillingAddressId(id: string): void;
    setDefaultShippingAddressId(id: string): void;
    toggleDeleteAddress(id: string): void;
    addAddress(): void;
    setOrderItemsPerPage(itemsPerPage: number): void;
    setOrderCurrentPage(page: number): void;
    create(): void;
    save(): void;
    addToGroup(): void;
    removeFromGroup(group: CustomerWithOrders['groups'][number]): void;
    addNoteToCustomer({ note }: {
        note: string;
    }): void;
    updateNote(entry: TimelineHistoryEntry): void;
    deleteNote(entry: TimelineHistoryEntry): import("rxjs").Subscription;
    protected setFormValues(entity: CustomerWithOrders): void;
    /**
     * Refetch the customer with the current order list settings.
     */
    private fetchOrdersList;
    private refreshCustomer;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomerDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CustomerDetailComponent, "vdr-customer-detail", never, {}, {}, never, never, false, never>;
}
export {};
