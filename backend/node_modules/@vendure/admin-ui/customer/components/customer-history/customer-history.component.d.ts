import { EventEmitter } from '@angular/core';
import { CustomerFragment, HistoryEntryComponentService, HistoryEntryType, TimelineDisplayType, TimelineHistoryEntry } from '@vendure/admin-ui/core';
import * as i0 from "@angular/core";
export declare class CustomerHistoryComponent {
    private historyEntryComponentService;
    customer: CustomerFragment;
    history: TimelineHistoryEntry[];
    addNote: EventEmitter<{
        note: string;
    }>;
    updateNote: EventEmitter<{
        __typename?: "HistoryEntry" | undefined;
        id: string;
        type: HistoryEntryType;
        createdAt: any;
        isPublic: boolean;
        data: any;
        administrator?: {
            __typename?: "Administrator" | undefined;
            id: string;
            firstName: string;
            lastName: string;
        } | null | undefined;
    }>;
    deleteNote: EventEmitter<{
        __typename?: "HistoryEntry" | undefined;
        id: string;
        type: HistoryEntryType;
        createdAt: any;
        isPublic: boolean;
        data: any;
        administrator?: {
            __typename?: "Administrator" | undefined;
            id: string;
            firstName: string;
            lastName: string;
        } | null | undefined;
    }>;
    note: string;
    expanded: boolean;
    readonly type: typeof HistoryEntryType;
    constructor(historyEntryComponentService: HistoryEntryComponentService);
    hasCustomComponent(type: string): boolean;
    getDisplayType(entry: TimelineHistoryEntry): TimelineDisplayType;
    getTimelineIcon(entry: TimelineHistoryEntry): string | [string, string] | undefined;
    isFeatured(entry: TimelineHistoryEntry): boolean;
    getName(entry: TimelineHistoryEntry): string;
    addNoteToCustomer(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomerHistoryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CustomerHistoryComponent, "vdr-customer-history", never, { "customer": { "alias": "customer"; "required": false; }; "history": { "alias": "history"; "required": false; }; }, { "addNote": "addNote"; "updateNote": "updateNote"; "deleteNote": "deleteNote"; }, never, never, false, never>;
}
