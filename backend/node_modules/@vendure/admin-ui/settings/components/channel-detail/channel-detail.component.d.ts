import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ChannelFragment, CurrencyCode, DataService, GetChannelDetailDocument, GetSellersQuery, LanguageCode, NotificationService, Permission, ServerConfigService, TypedBaseDetailComponent } from '@vendure/admin-ui/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare const GET_CHANNEL_DETAIL: import("apollo-angular").TypedDocumentNode<unknown, unknown>;
export declare class ChannelDetailComponent extends TypedBaseDetailComponent<typeof GetChannelDetailDocument, 'channel'> implements OnInit, OnDestroy {
    protected serverConfigService: ServerConfigService;
    private changeDetector;
    protected dataService: DataService;
    private formBuilder;
    private notificationService;
    DEFAULT_CHANNEL_CODE: string;
    customFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    sellers$: Observable<GetSellersQuery['sellers']['items']>;
    detailForm: import("@angular/forms").FormGroup<{
        code: import("@angular/forms").FormControl<string | null>;
        token: import("@angular/forms").FormControl<string | null>;
        pricesIncludeTax: import("@angular/forms").FormControl<boolean | null>;
        availableLanguageCodes: import("@angular/forms").FormControl<string[] | null>;
        availableCurrencyCodes: import("@angular/forms").FormControl<string[] | null>;
        defaultCurrencyCode: import("@angular/forms").FormControl<CurrencyCode | null>;
        defaultShippingZoneId: import("@angular/forms").FormControl<string | null>;
        defaultLanguageCode: import("@angular/forms").FormControl<LanguageCode | null | undefined>;
        defaultTaxZoneId: import("@angular/forms").FormControl<string | null>;
        sellerId: import("@angular/forms").FormControl<string | null>;
        customFields: import("@angular/forms").FormGroup<{
            [x: string]: import("@angular/forms").FormControl<false | "" | 0 | Date | null>;
        }>;
    }>;
    availableLanguageCodes$: Observable<LanguageCode[]>;
    readonly updatePermission: Permission[];
    constructor(serverConfigService: ServerConfigService, changeDetector: ChangeDetectorRef, dataService: DataService, formBuilder: FormBuilder, notificationService: NotificationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    saveButtonEnabled(): boolean;
    create(): void;
    save(): void;
    /**
     * Update the form values when the entity changes.
     */
    protected setFormValues(entity: ChannelFragment, languageCode: LanguageCode): void;
    private generateToken;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChannelDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChannelDetailComponent, "vdr-channel-detail", never, {}, {}, never, never, false, never>;
}
