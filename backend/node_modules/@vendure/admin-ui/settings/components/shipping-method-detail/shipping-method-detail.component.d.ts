import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ConfigurableOperation, ConfigurableOperationDefinition, DataService, GetActiveChannelQuery, GetShippingMethodDetailDocument, LanguageCode, NotificationService, Permission, ShippingMethodFragment, TestShippingMethodResult, TypedBaseDetailComponent } from '@vendure/admin-ui/core';
import { Observable } from 'rxjs';
import { TestAddress } from '../test-address-form/test-address-form.component';
import { TestOrderLine } from '../test-order-builder/test-order-builder.component';
import * as i0 from "@angular/core";
export declare const GET_SHIPPING_METHOD_DETAIL: import("apollo-angular").TypedDocumentNode<unknown, unknown>;
export declare class ShippingMethodDetailComponent extends TypedBaseDetailComponent<typeof GetShippingMethodDetailDocument, 'shippingMethod'> implements OnInit, OnDestroy {
    private changeDetector;
    protected dataService: DataService;
    private formBuilder;
    private notificationService;
    customFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    detailForm: import("@angular/forms").FormGroup<{
        code: import("@angular/forms").FormControl<string | null>;
        name: import("@angular/forms").FormControl<string | null>;
        description: import("@angular/forms").FormControl<string | null>;
        fulfillmentHandler: import("@angular/forms").FormControl<string | null>;
        checker: import("@angular/forms").FormControl<{
            __typename?: "ConfigurableOperation" | undefined;
            code: string;
            args: {
                __typename?: "ConfigArg" | undefined;
                name: string;
                value: string;
            }[];
        } | null>;
        calculator: import("@angular/forms").FormControl<{
            __typename?: "ConfigurableOperation" | undefined;
            code: string;
            args: {
                __typename?: "ConfigArg" | undefined;
                name: string;
                value: string;
            }[];
        } | null>;
        customFields: import("@angular/forms").FormGroup<{
            [x: string]: import("@angular/forms").FormControl<false | "" | 0 | Date | null>;
        }>;
    }>;
    checkers: ConfigurableOperationDefinition[];
    calculators: ConfigurableOperationDefinition[];
    fulfillmentHandlers: ConfigurableOperationDefinition[];
    selectedChecker?: ConfigurableOperation | null;
    selectedCheckerDefinition?: ConfigurableOperationDefinition;
    selectedCalculator?: ConfigurableOperation | null;
    selectedCalculatorDefinition?: ConfigurableOperationDefinition;
    activeChannel$: Observable<GetActiveChannelQuery['activeChannel']>;
    testAddress: TestAddress;
    testOrderLines: TestOrderLine[];
    testDataUpdated: boolean;
    testResult$: Observable<TestShippingMethodResult | undefined>;
    readonly updatePermission: Permission[];
    private fetchTestResult$;
    constructor(changeDetector: ChangeDetectorRef, dataService: DataService, formBuilder: FormBuilder, notificationService: NotificationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    updateCode(currentCode: string | undefined, nameValue: string): void;
    selectChecker(checker: ConfigurableOperationDefinition): void;
    selectCalculator(calculator: ConfigurableOperationDefinition): void;
    create(): void;
    save(): void;
    setTestOrderLines(event: TestOrderLine[]): void;
    setTestAddress(event: TestAddress): void;
    allTestDataPresent(): boolean;
    runTest(): void;
    /**
     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which
     * can then be persisted to the API.
     */
    private getUpdatedShippingMethod;
    protected setFormValues(shippingMethod: ShippingMethodFragment, languageCode: LanguageCode): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ShippingMethodDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ShippingMethodDetailComponent, "vdr-shipping-method-detail", never, {}, {}, never, never, false, never>;
}
