import { DOCUMENT } from '@angular/common';
import { Component, HostListener, Inject, isDevMode } from '@angular/core';
import { filter, map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./data/providers/data.service";
import * as i2 from "./data/server-config";
import * as i3 from "./providers/local-storage/local-storage.service";
import * as i4 from "@angular/router";
import * as i5 from "./components/overlay-host/overlay-host.component";
import * as i6 from "@angular/common";
export class AppComponent {
    constructor(dataService, serverConfigService, localStorageService, document) {
        this.dataService = dataService;
        this.serverConfigService = serverConfigService;
        this.localStorageService = localStorageService;
        this.document = document;
        this._document = document;
    }
    ngOnInit() {
        this.loading$ = this.dataService.client
            .getNetworkStatus()
            .stream$.pipe(map(data => 0 < data.networkStatus.inFlightRequests));
        this.dataService.client
            .uiState()
            .mapStream(data => data.uiState.theme)
            .subscribe(theme => {
            this._document?.body.setAttribute('data-theme', theme);
        });
        // Once logged in, keep the localStorage "contentLanguageCode" in sync with the
        // uiState. Also perform a check to ensure that the current contentLanguage is
        // one of the availableLanguages per GlobalSettings.
        this.dataService.client
            .userStatus()
            .mapStream(({ userStatus }) => userStatus.isLoggedIn)
            .pipe(filter(loggedIn => loggedIn === true), switchMap(() => this.dataService.client.uiState().mapStream(data => data.uiState.contentLanguage)), switchMap(contentLang => this.serverConfigService
            .getAvailableLanguages()
            .pipe(map(available => [contentLang, available]))))
            .subscribe({
            next: ([contentLanguage, availableLanguages]) => {
                this.localStorageService.set('contentLanguageCode', contentLanguage);
                if (availableLanguages.length && !availableLanguages.includes(contentLanguage)) {
                    this.dataService.client.setContentLanguage(availableLanguages[0]).subscribe();
                }
            },
        });
        this.dataService.client.userStatus().stream$.subscribe(({ userStatus }) => {
            this.localStorageService.setAdminId(userStatus.administratorId);
            if (userStatus.administratorId) {
                const theme = this.localStorageService.get('activeTheme');
                if (theme) {
                    this.dataService.client.setUiTheme(theme).subscribe(() => {
                        this.localStorageService.set('activeTheme', theme);
                    });
                }
                const activeChannelToken = this.localStorageService.get('activeChannelToken');
                if (activeChannelToken) {
                    const activeChannel = userStatus.channels.find(c => c.token === activeChannelToken);
                    if (activeChannel) {
                        this.dataService.client.setActiveChannel(activeChannel.id).subscribe();
                    }
                }
            }
        });
        if (isDevMode()) {
            // eslint-disable-next-line no-console
            console.log(`%cVendure Admin UI: Press "ctrl/cmd + u" to view UI extension points`, `color: #17C1FF; font-weight: bold;`);
        }
    }
    handleGlobalHotkeys(event) {
        if ((event.ctrlKey === true || event.metaKey === true) && event.key === 'u') {
            event.preventDefault();
            if (isDevMode()) {
                this.dataService.client
                    .uiState()
                    .single$.pipe(switchMap(({ uiState }) => this.dataService.client.setDisplayUiExtensionPoints(!uiState.displayUiExtensionPoints)))
                    .subscribe();
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AppComponent, deps: [{ token: i1.DataService }, { token: i2.ServerConfigService }, { token: i3.LocalStorageService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: AppComponent, selector: "vdr-root", host: { listeners: { "window:keydown": "handleGlobalHotkeys($event)" } }, ngImport: i0, template: "<div class=\"progress loop\" [class.visible]=\"loading$ | async\"></div>\r\n<router-outlet></router-outlet>\r\n<vdr-overlay-host></vdr-overlay-host>\r\n", styles: [".progress{position:absolute;overflow:hidden;height:4px;background-color:var(--color-grey-500);opacity:0;transition:opacity .1s}.progress.visible{opacity:1}\n"], dependencies: [{ kind: "directive", type: i4.RouterOutlet, selector: "router-outlet", inputs: ["name"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }, { kind: "component", type: i5.OverlayHostComponent, selector: "vdr-overlay-host" }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AppComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-root', template: "<div class=\"progress loop\" [class.visible]=\"loading$ | async\"></div>\r\n<router-outlet></router-outlet>\r\n<vdr-overlay-host></vdr-overlay-host>\r\n", styles: [".progress{position:absolute;overflow:hidden;height:4px;background-color:var(--color-grey-500);opacity:0;transition:opacity .1s}.progress.visible{opacity:1}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i2.ServerConfigService }, { type: i3.LocalStorageService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { handleGlobalHotkeys: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,