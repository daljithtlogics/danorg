import { Injectable } from '@angular/core';
import { lastValueFrom } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * An adapter that allows the Angular HttpClient to be used as a replacement for the global `fetch` function.
 * This is used to supply a custom fetch function to the apollo-upload-client whilst also allowing the
 * use of Angular's http infrastructure such as interceptors.
 */
export class FetchAdapter {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.fetch = (input, init) => {
            const url = typeof input === 'string' ? input : input.url;
            const method = typeof input === 'string' ? (init.method ? init.method : 'GET') : input.method;
            return lastValueFrom(this.httpClient.request(method, url, {
                body: init.body,
                headers: init.headers,
                observe: 'response',
                responseType: 'json',
                withCredentials: true,
            })).then(result => new Response(JSON.stringify(result.body), {
                status: result.status,
                statusText: result.statusText,
            }));
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FetchAdapter, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FetchAdapter }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FetchAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2gtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvZmV0Y2gtYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQUVyQzs7OztHQUlHO0FBRUgsTUFBTSxPQUFPLFlBQVk7SUFDckIsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUUxQyxVQUFLLEdBQUcsQ0FBQyxLQUF1QixFQUFFLElBQWlCLEVBQXFCLEVBQUU7WUFDdEUsTUFBTSxHQUFHLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDMUQsTUFBTSxNQUFNLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBRTlGLE9BQU8sYUFBYSxDQUNoQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUNqQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFjO2dCQUM1QixPQUFPLEVBQUUsVUFBVTtnQkFDbkIsWUFBWSxFQUFFLE1BQU07Z0JBQ3BCLGVBQWUsRUFBRSxJQUFJO2FBQ3hCLENBQUMsQ0FDTCxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNuRCxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07Z0JBQ3JCLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTthQUNoQyxDQUFDLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQztJQWxCMkMsQ0FBQzs4R0FEckMsWUFBWTtrSEFBWixZQUFZOzsyRkFBWixZQUFZO2tCQUR4QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBsYXN0VmFsdWVGcm9tIH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICogQW4gYWRhcHRlciB0aGF0IGFsbG93cyB0aGUgQW5ndWxhciBIdHRwQ2xpZW50IHRvIGJlIHVzZWQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlIGdsb2JhbCBgZmV0Y2hgIGZ1bmN0aW9uLlxyXG4gKiBUaGlzIGlzIHVzZWQgdG8gc3VwcGx5IGEgY3VzdG9tIGZldGNoIGZ1bmN0aW9uIHRvIHRoZSBhcG9sbG8tdXBsb2FkLWNsaWVudCB3aGlsc3QgYWxzbyBhbGxvd2luZyB0aGVcclxuICogdXNlIG9mIEFuZ3VsYXIncyBodHRwIGluZnJhc3RydWN0dXJlIHN1Y2ggYXMgaW50ZXJjZXB0b3JzLlxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmV0Y2hBZGFwdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cclxuXHJcbiAgICBmZXRjaCA9IChpbnB1dDogUmVxdWVzdCB8IHN0cmluZywgaW5pdDogUmVxdWVzdEluaXQpOiBQcm9taXNlPFJlc3BvbnNlPiA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyA/IGlucHV0IDogaW5wdXQudXJsO1xyXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgPyAoaW5pdC5tZXRob2QgPyBpbml0Lm1ldGhvZCA6ICdHRVQnKSA6IGlucHV0Lm1ldGhvZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZUZyb20oXHJcbiAgICAgICAgICAgIHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB7XHJcbiAgICAgICAgICAgICAgICBib2R5OiBpbml0LmJvZHksXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBpbml0LmhlYWRlcnMgYXMgYW55LFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICApLnRoZW4ocmVzdWx0ID0+IG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShyZXN1bHQuYm9keSksIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcclxuICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHJlc3VsdC5zdGF0dXNUZXh0LFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG59XHJcbiJdfQ==