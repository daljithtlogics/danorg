import { CREATE_ADMINISTRATOR, CREATE_ROLE, DELETE_ADMINISTRATOR, DELETE_ADMINISTRATORS, DELETE_ROLE, DELETE_ROLES, GET_ACTIVE_ADMINISTRATOR, GET_ROLES, UPDATE_ACTIVE_ADMINISTRATOR, UPDATE_ADMINISTRATOR, UPDATE_ROLE, } from '../definitions/administrator-definitions';
export class AdministratorDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getActiveAdministrator() {
        return this.baseDataService.query(GET_ACTIVE_ADMINISTRATOR, {});
    }
    createAdministrator(input) {
        return this.baseDataService.mutate(CREATE_ADMINISTRATOR, { input });
    }
    updateAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ADMINISTRATOR, { input });
    }
    updateActiveAdministrator(input) {
        return this.baseDataService.mutate(UPDATE_ACTIVE_ADMINISTRATOR, { input });
    }
    deleteAdministrator(id) {
        return this.baseDataService.mutate(DELETE_ADMINISTRATOR, { id });
    }
    deleteAdministrators(ids) {
        return this.baseDataService.mutate(DELETE_ADMINISTRATORS, { ids });
    }
    getRoles(take = 10, skip = 0) {
        return this.baseDataService.query(GET_ROLES, {
            options: {
                take,
                skip,
            },
        });
    }
    createRole(input) {
        return this.baseDataService.mutate(CREATE_ROLE, {
            input,
        });
    }
    updateRole(input) {
        return this.baseDataService.mutate(UPDATE_ROLE, {
            input,
        });
    }
    deleteRole(id) {
        return this.baseDataService.mutate(DELETE_ROLE, {
            id,
        });
    }
    deleteRoles(ids) {
        return this.baseDataService.mutate(DELETE_ROLES, {
            ids,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW5pc3RyYXRvci1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvcHJvdmlkZXJzL2FkbWluaXN0cmF0b3ItZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLG9CQUFvQixFQUNwQixxQkFBcUIsRUFDckIsV0FBVyxFQUNYLFlBQVksRUFDWix3QkFBd0IsRUFDeEIsU0FBUyxFQUNULDJCQUEyQixFQUMzQixvQkFBb0IsRUFDcEIsV0FBVyxHQUNkLE1BQU0sMENBQTBDLENBQUM7QUFJbEQsTUFBTSxPQUFPLHdCQUF3QjtJQUNqQyxZQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFBRyxDQUFDO0lBRXhELHNCQUFzQjtRQUNsQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFzQyx3QkFBd0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsbUJBQW1CLENBQUMsS0FBdUM7UUFDdkQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FHaEMsb0JBQW9CLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxLQUF1QztRQUN2RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUdoQyxvQkFBb0IsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELHlCQUF5QixDQUFDLEtBQTZDO1FBQ25FLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBR2hDLDJCQUEyQixFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsbUJBQW1CLENBQUMsRUFBVTtRQUMxQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUdoQyxvQkFBb0IsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELG9CQUFvQixDQUFDLEdBQWE7UUFDOUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FHaEMscUJBQXFCLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQztRQUN4QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUF3RCxTQUFTLEVBQUU7WUFDaEcsT0FBTyxFQUFFO2dCQUNMLElBQUk7Z0JBQ0osSUFBSTthQUNQO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUE4QjtRQUNyQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixXQUFXLEVBQ1g7WUFDSSxLQUFLO1NBQ1IsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUE4QjtRQUNyQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUM5QixXQUFXLEVBQ1g7WUFDSSxLQUFLO1NBQ1IsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUVELFVBQVUsQ0FBQyxFQUFVO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQzlCLFdBQVcsRUFDWDtZQUNJLEVBQUU7U0FDTCxDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQWE7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FDOUIsWUFBWSxFQUNaO1lBQ0ksR0FBRztTQUNOLENBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIENvZGVnZW4gZnJvbSAnLi4vLi4vY29tbW9uL2dlbmVyYXRlZC10eXBlcyc7XHJcbmltcG9ydCB7XHJcbiAgICBDUkVBVEVfQURNSU5JU1RSQVRPUixcclxuICAgIENSRUFURV9ST0xFLFxyXG4gICAgREVMRVRFX0FETUlOSVNUUkFUT1IsXHJcbiAgICBERUxFVEVfQURNSU5JU1RSQVRPUlMsXHJcbiAgICBERUxFVEVfUk9MRSxcclxuICAgIERFTEVURV9ST0xFUyxcclxuICAgIEdFVF9BQ1RJVkVfQURNSU5JU1RSQVRPUixcclxuICAgIEdFVF9ST0xFUyxcclxuICAgIFVQREFURV9BQ1RJVkVfQURNSU5JU1RSQVRPUixcclxuICAgIFVQREFURV9BRE1JTklTVFJBVE9SLFxyXG4gICAgVVBEQVRFX1JPTEUsXHJcbn0gZnJvbSAnLi4vZGVmaW5pdGlvbnMvYWRtaW5pc3RyYXRvci1kZWZpbml0aW9ucyc7XHJcblxyXG5pbXBvcnQgeyBCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZGF0YS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBZG1pbmlzdHJhdG9yRGF0YVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlRGF0YVNlcnZpY2U6IEJhc2VEYXRhU2VydmljZSkge31cclxuXHJcbiAgICBnZXRBY3RpdmVBZG1pbmlzdHJhdG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxDb2RlZ2VuLkdldEFjdGl2ZUFkbWluaXN0cmF0b3JRdWVyeT4oR0VUX0FDVElWRV9BRE1JTklTVFJBVE9SLCB7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQWRtaW5pc3RyYXRvcihpbnB1dDogQ29kZWdlbi5DcmVhdGVBZG1pbmlzdHJhdG9ySW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFxyXG4gICAgICAgICAgICBDb2RlZ2VuLkNyZWF0ZUFkbWluaXN0cmF0b3JNdXRhdGlvbixcclxuICAgICAgICAgICAgQ29kZWdlbi5DcmVhdGVBZG1pbmlzdHJhdG9yTXV0YXRpb25WYXJpYWJsZXNcclxuICAgICAgICA+KENSRUFURV9BRE1JTklTVFJBVE9SLCB7IGlucHV0IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUFkbWluaXN0cmF0b3IoaW5wdXQ6IENvZGVnZW4uVXBkYXRlQWRtaW5pc3RyYXRvcklucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxcclxuICAgICAgICAgICAgQ29kZWdlbi5VcGRhdGVBZG1pbmlzdHJhdG9yTXV0YXRpb24sXHJcbiAgICAgICAgICAgIENvZGVnZW4uVXBkYXRlQWRtaW5pc3RyYXRvck11dGF0aW9uVmFyaWFibGVzXHJcbiAgICAgICAgPihVUERBVEVfQURNSU5JU1RSQVRPUiwgeyBpbnB1dCB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVBY3RpdmVBZG1pbmlzdHJhdG9yKGlucHV0OiBDb2RlZ2VuLlVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JJbnB1dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIENvZGVnZW4uVXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvck11dGF0aW9uLFxyXG4gICAgICAgICAgICBDb2RlZ2VuLlVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3JNdXRhdGlvblZhcmlhYmxlc1xyXG4gICAgICAgID4oVVBEQVRFX0FDVElWRV9BRE1JTklTVFJBVE9SLCB7IGlucHV0IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUFkbWluaXN0cmF0b3IoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIENvZGVnZW4uRGVsZXRlQWRtaW5pc3RyYXRvck11dGF0aW9uLFxyXG4gICAgICAgICAgICBDb2RlZ2VuLkRlbGV0ZUFkbWluaXN0cmF0b3JNdXRhdGlvblZhcmlhYmxlc1xyXG4gICAgICAgID4oREVMRVRFX0FETUlOSVNUUkFUT1IsIHsgaWQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlQWRtaW5pc3RyYXRvcnMoaWRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIENvZGVnZW4uRGVsZXRlQWRtaW5pc3RyYXRvcnNNdXRhdGlvbixcclxuICAgICAgICAgICAgQ29kZWdlbi5EZWxldGVBZG1pbmlzdHJhdG9yc011dGF0aW9uVmFyaWFibGVzXHJcbiAgICAgICAgPihERUxFVEVfQURNSU5JU1RSQVRPUlMsIHsgaWRzIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJvbGVzKHRha2UgPSAxMCwgc2tpcCA9IDApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UucXVlcnk8Q29kZWdlbi5HZXRSb2xlc1F1ZXJ5LCBDb2RlZ2VuLkdldFJvbGVzUXVlcnlWYXJpYWJsZXM+KEdFVF9ST0xFUywge1xyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICB0YWtlLFxyXG4gICAgICAgICAgICAgICAgc2tpcCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVSb2xlKGlucHV0OiBDb2RlZ2VuLkNyZWF0ZVJvbGVJbnB1dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8Q29kZWdlbi5DcmVhdGVSb2xlTXV0YXRpb24sIENvZGVnZW4uQ3JlYXRlUm9sZU11dGF0aW9uVmFyaWFibGVzPihcclxuICAgICAgICAgICAgQ1JFQVRFX1JPTEUsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlucHV0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUm9sZShpbnB1dDogQ29kZWdlbi5VcGRhdGVSb2xlSW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPENvZGVnZW4uVXBkYXRlUm9sZU11dGF0aW9uLCBDb2RlZ2VuLlVwZGF0ZVJvbGVNdXRhdGlvblZhcmlhYmxlcz4oXHJcbiAgICAgICAgICAgIFVQREFURV9ST0xFLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVJvbGUoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8Q29kZWdlbi5EZWxldGVSb2xlTXV0YXRpb24sIENvZGVnZW4uRGVsZXRlUm9sZU11dGF0aW9uVmFyaWFibGVzPihcclxuICAgICAgICAgICAgREVMRVRFX1JPTEUsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlUm9sZXMoaWRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8Q29kZWdlbi5EZWxldGVSb2xlc011dGF0aW9uLCBDb2RlZ2VuLkRlbGV0ZVJvbGVzTXV0YXRpb25WYXJpYWJsZXM+KFxyXG4gICAgICAgICAgICBERUxFVEVfUk9MRVMsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlkcyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==