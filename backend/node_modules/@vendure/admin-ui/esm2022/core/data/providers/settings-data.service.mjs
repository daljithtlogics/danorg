import { pick } from '@vendure/common/lib/pick';
import { JobState, } from '../../common/generated-types';
import { ADD_MEMBERS_TO_ZONE, CANCEL_JOB, CREATE_CHANNEL, CREATE_COUNTRY, CREATE_PAYMENT_METHOD, CREATE_SELLER, CREATE_TAX_CATEGORY, CREATE_TAX_RATE, CREATE_ZONE, DELETE_CHANNEL, DELETE_CHANNELS, DELETE_COUNTRIES, DELETE_COUNTRY, DELETE_PAYMENT_METHOD, DELETE_PAYMENT_METHODS, DELETE_SELLER, DELETE_SELLERS, DELETE_TAX_CATEGORIES, DELETE_TAX_CATEGORY, DELETE_TAX_RATE, DELETE_TAX_RATES, DELETE_ZONE, DELETE_ZONES, GET_ACTIVE_CHANNEL, GET_AVAILABLE_COUNTRIES, GET_CHANNELS, GET_GLOBAL_SETTINGS, GET_JOB_INFO, GET_JOB_QUEUE_LIST, GET_JOBS_BY_ID, GET_JOBS_LIST, GET_PAYMENT_METHOD_OPERATIONS, GET_SELLERS, GET_TAX_CATEGORIES, GET_TAX_RATE_LIST_SIMPLE, GET_ZONE, REMOVE_MEMBERS_FROM_ZONE, UPDATE_CHANNEL, UPDATE_COUNTRY, UPDATE_GLOBAL_SETTINGS, UPDATE_PAYMENT_METHOD, UPDATE_SELLER, UPDATE_TAX_CATEGORY, UPDATE_TAX_RATE, UPDATE_ZONE, } from '../definitions/settings-definitions';
export class SettingsDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getAvailableCountries() {
        return this.baseDataService.query(GET_AVAILABLE_COUNTRIES);
    }
    createCountry(input) {
        return this.baseDataService.mutate(CREATE_COUNTRY, {
            input: pick(input, ['code', 'enabled', 'translations', 'customFields']),
        });
    }
    updateCountry(input) {
        return this.baseDataService.mutate(UPDATE_COUNTRY, {
            input: pick(input, ['id', 'code', 'enabled', 'translations', 'customFields']),
        });
    }
    deleteCountry(id) {
        return this.baseDataService.mutate(DELETE_COUNTRY, {
            id,
        });
    }
    deleteCountries(ids) {
        return this.baseDataService.mutate(DELETE_COUNTRIES, {
            ids,
        });
    }
    getZone(id) {
        return this.baseDataService.query(GET_ZONE, {
            id,
        });
    }
    createZone(input) {
        return this.baseDataService.mutate(CREATE_ZONE, {
            input,
        });
    }
    updateZone(input) {
        return this.baseDataService.mutate(UPDATE_ZONE, {
            input,
        });
    }
    deleteZone(id) {
        return this.baseDataService.mutate(DELETE_ZONE, {
            id,
        });
    }
    deleteZones(ids) {
        return this.baseDataService.mutate(DELETE_ZONES, {
            ids,
        });
    }
    addMembersToZone(zoneId, memberIds) {
        return this.baseDataService.mutate(ADD_MEMBERS_TO_ZONE, {
            zoneId,
            memberIds,
        });
    }
    removeMembersFromZone(zoneId, memberIds) {
        return this.baseDataService.mutate(REMOVE_MEMBERS_FROM_ZONE, {
            zoneId,
            memberIds,
        });
    }
    getTaxCategories(options = {}) {
        return this.baseDataService.query(GET_TAX_CATEGORIES, {
            options,
        });
    }
    createTaxCategory(input) {
        return this.baseDataService.mutate(CREATE_TAX_CATEGORY, {
            input,
        });
    }
    updateTaxCategory(input) {
        return this.baseDataService.mutate(UPDATE_TAX_CATEGORY, {
            input,
        });
    }
    deleteTaxCategory(id) {
        return this.baseDataService.mutate(DELETE_TAX_CATEGORY, {
            id,
        });
    }
    deleteTaxCategories(ids) {
        return this.baseDataService.mutate(DELETE_TAX_CATEGORIES, {
            ids,
        });
    }
    getTaxRatesSimple(take = 10, skip = 0, fetchPolicy) {
        return this.baseDataService.query(GET_TAX_RATE_LIST_SIMPLE, {
            options: {
                take,
                skip,
            },
        }, fetchPolicy);
    }
    createTaxRate(input) {
        return this.baseDataService.mutate(CREATE_TAX_RATE, {
            input,
        });
    }
    updateTaxRate(input) {
        return this.baseDataService.mutate(UPDATE_TAX_RATE, {
            input,
        });
    }
    deleteTaxRate(id) {
        return this.baseDataService.mutate(DELETE_TAX_RATE, {
            id,
        });
    }
    deleteTaxRates(ids) {
        return this.baseDataService.mutate(DELETE_TAX_RATES, {
            ids,
        });
    }
    getChannels(options = {}) {
        return this.baseDataService.query(GET_CHANNELS, { options });
    }
    getSellerList(options) {
        return this.baseDataService.query(GET_SELLERS, { options });
    }
    createSeller(input) {
        return this.baseDataService.mutate(CREATE_SELLER, {
            input,
        });
    }
    updateSeller(input) {
        return this.baseDataService.mutate(UPDATE_SELLER, {
            input,
        });
    }
    deleteSeller(id) {
        return this.baseDataService.mutate(DELETE_SELLER, {
            id,
        });
    }
    deleteSellers(ids) {
        return this.baseDataService.mutate(DELETE_SELLERS, {
            ids,
        });
    }
    getActiveChannel(fetchPolicy) {
        return this.baseDataService.query(GET_ACTIVE_CHANNEL, {}, fetchPolicy);
    }
    createChannel(input) {
        return this.baseDataService.mutate(CREATE_CHANNEL, {
            input,
        });
    }
    updateChannel(input) {
        return this.baseDataService.mutate(UPDATE_CHANNEL, {
            input,
        });
    }
    deleteChannel(id) {
        return this.baseDataService.mutate(DELETE_CHANNEL, {
            id,
        });
    }
    deleteChannels(ids) {
        return this.baseDataService.mutate(DELETE_CHANNELS, {
            ids,
        });
    }
    createPaymentMethod(input) {
        return this.baseDataService.mutate(CREATE_PAYMENT_METHOD, {
            input: pick(input, ['code', 'checker', 'handler', 'enabled', 'translations', 'customFields']),
        });
    }
    updatePaymentMethod(input) {
        return this.baseDataService.mutate(UPDATE_PAYMENT_METHOD, {
            input: pick(input, [
                'id',
                'code',
                'checker',
                'handler',
                'enabled',
                'translations',
                'customFields',
            ]),
        });
    }
    deletePaymentMethod(id, force) {
        return this.baseDataService.mutate(DELETE_PAYMENT_METHOD, {
            id,
            force,
        });
    }
    deletePaymentMethods(ids, force) {
        return this.baseDataService.mutate(DELETE_PAYMENT_METHODS, {
            ids,
            force,
        });
    }
    getPaymentMethodOperations() {
        return this.baseDataService.query(GET_PAYMENT_METHOD_OPERATIONS);
    }
    getGlobalSettings(fetchPolicy) {
        return this.baseDataService.query(GET_GLOBAL_SETTINGS, undefined, fetchPolicy);
    }
    updateGlobalSettings(input) {
        return this.baseDataService.mutate(UPDATE_GLOBAL_SETTINGS, {
            input,
        });
    }
    getJob(id) {
        return this.baseDataService.query(GET_JOB_INFO, {
            id,
        });
    }
    pollJobs(ids) {
        return this.baseDataService.query(GET_JOBS_BY_ID, {
            ids,
        });
    }
    getAllJobs(options) {
        return this.baseDataService.query(GET_JOBS_LIST, {
            options,
        }, 'cache-first');
    }
    getJobQueues() {
        return this.baseDataService.query(GET_JOB_QUEUE_LIST);
    }
    getRunningJobs() {
        return this.baseDataService.query(GET_JOBS_LIST, {
            options: {
                filter: {
                    state: {
                        eq: JobState.RUNNING,
                    },
                },
            },
        });
    }
    cancelJob(id) {
        return this.baseDataService.mutate(CANCEL_JOB, {
            id,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,