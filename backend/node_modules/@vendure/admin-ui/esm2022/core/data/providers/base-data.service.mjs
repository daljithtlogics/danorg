import { Injectable } from '@angular/core';
import { simpleDeepClone } from '@vendure/common/lib/simple-deep-clone';
import { map } from 'rxjs/operators';
import { QueryResult } from '../query-result';
import { addCustomFields } from '../utils/add-custom-fields';
import { isEntityCreateOrUpdateMutation, removeReadonlyCustomFields, } from '../utils/remove-readonly-custom-fields';
import { transformRelationCustomFieldInputs } from '../utils/transform-relation-custom-field-inputs';
import * as i0 from "@angular/core";
import * as i1 from "apollo-angular";
import * as i2 from "../server-config";
export class BaseDataService {
    constructor(apollo, serverConfigService) {
        this.apollo = apollo;
        this.serverConfigService = serverConfigService;
    }
    get customFields() {
        return this.serverConfigService.serverConfig.customFieldConfig || {};
    }
    /**
     * Performs a GraphQL watch query
     */
    query(query, variables, fetchPolicy = 'cache-and-network') {
        const withCustomFields = addCustomFields(query, this.customFields);
        const queryRef = this.apollo.watchQuery({
            query: withCustomFields,
            variables,
            fetchPolicy,
        });
        const queryResult = new QueryResult(queryRef, this.apollo);
        return queryResult;
    }
    /**
     * Performs a GraphQL mutation
     */
    mutate(mutation, variables, update) {
        const withCustomFields = addCustomFields(mutation, this.customFields);
        const withoutReadonlyFields = this.prepareCustomFields(mutation, variables);
        return this.apollo
            .mutate({
            mutation: withCustomFields,
            variables: withoutReadonlyFields,
            update,
        })
            .pipe(map(result => result.data));
    }
    prepareCustomFields(mutation, variables) {
        const entity = isEntityCreateOrUpdateMutation(mutation);
        if (entity) {
            const customFieldConfig = this.customFields[entity];
            if (variables && customFieldConfig) {
                let variablesClone = simpleDeepClone(variables);
                variablesClone = removeReadonlyCustomFields(variablesClone, customFieldConfig);
                variablesClone = transformRelationCustomFieldInputs(variablesClone, customFieldConfig);
                return variablesClone;
            }
        }
        return variables;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BaseDataService, deps: [{ token: i1.Apollo }, { token: i2.ServerConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BaseDataService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BaseDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Apollo }, { type: i2.ServerConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvcHJvdmlkZXJzL2Jhc2UtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBSXhFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUdyQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFDSCw4QkFBOEIsRUFDOUIsMEJBQTBCLEdBQzdCLE1BQU0sd0NBQXdDLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0saURBQWlELENBQUM7Ozs7QUFHckcsTUFBTSxPQUFPLGVBQWU7SUFDeEIsWUFBb0IsTUFBYyxFQUFVLG1CQUF3QztRQUFoRSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUFHLENBQUM7SUFFeEYsSUFBWSxZQUFZO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUM7SUFDekUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUNELEtBQTZDLEVBQzdDLFNBQWEsRUFDYixjQUFxQyxtQkFBbUI7UUFFeEQsTUFBTSxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNuRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBTztZQUMxQyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFNBQVM7WUFDVCxXQUFXO1NBQ2QsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQVMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRSxPQUFPLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQ0YsUUFBZ0QsRUFDaEQsU0FBYSxFQUNiLE1BQTZCO1FBRTdCLE1BQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTVFLE9BQU8sSUFBSSxDQUFDLE1BQU07YUFDYixNQUFNLENBQU87WUFDVixRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRSxxQkFBcUI7WUFDaEMsTUFBTTtTQUNULENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUUsTUFBZ0MsQ0FBQyxJQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTyxtQkFBbUIsQ0FBSSxRQUFzQixFQUFFLFNBQVk7UUFDL0QsTUFBTSxNQUFNLEdBQUcsOEJBQThCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEQsSUFBSSxTQUFTLElBQUksaUJBQWlCLEVBQUU7Z0JBQ2hDLElBQUksY0FBYyxHQUFHLGVBQWUsQ0FBQyxTQUFnQixDQUFDLENBQUM7Z0JBQ3ZELGNBQWMsR0FBRywwQkFBMEIsQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztnQkFDL0UsY0FBYyxHQUFHLGtDQUFrQyxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUN2RixPQUFPLGNBQWMsQ0FBQzthQUN6QjtTQUNKO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs4R0F6RFEsZUFBZTtrSEFBZixlQUFlOzsyRkFBZixlQUFlO2tCQUQzQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNdXRhdGlvblVwZGF0ZXJGbiwgU2luZ2xlRXhlY3V0aW9uUmVzdWx0LCBXYXRjaFF1ZXJ5RmV0Y2hQb2xpY3kgfSBmcm9tICdAYXBvbGxvL2NsaWVudC9jb3JlJztcclxuaW1wb3J0IHsgVHlwZWREb2N1bWVudE5vZGUgfSBmcm9tICdAZ3JhcGhxbC10eXBlZC1kb2N1bWVudC1ub2RlL2NvcmUnO1xyXG5pbXBvcnQgeyBzaW1wbGVEZWVwQ2xvbmUgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NpbXBsZS1kZWVwLWNsb25lJztcclxuaW1wb3J0IHsgQXBvbGxvIH0gZnJvbSAnYXBvbGxvLWFuZ3VsYXInO1xyXG5pbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsL2xhbmd1YWdlL2FzdCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgQ3VzdG9tRmllbGRzIH0gZnJvbSAnLi4vLi4vY29tbW9uL2dlbmVyYXRlZC10eXBlcyc7XHJcbmltcG9ydCB7IFF1ZXJ5UmVzdWx0IH0gZnJvbSAnLi4vcXVlcnktcmVzdWx0JztcclxuaW1wb3J0IHsgU2VydmVyQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL3NlcnZlci1jb25maWcnO1xyXG5pbXBvcnQgeyBhZGRDdXN0b21GaWVsZHMgfSBmcm9tICcuLi91dGlscy9hZGQtY3VzdG9tLWZpZWxkcyc7XHJcbmltcG9ydCB7XHJcbiAgICBpc0VudGl0eUNyZWF0ZU9yVXBkYXRlTXV0YXRpb24sXHJcbiAgICByZW1vdmVSZWFkb25seUN1c3RvbUZpZWxkcyxcclxufSBmcm9tICcuLi91dGlscy9yZW1vdmUtcmVhZG9ubHktY3VzdG9tLWZpZWxkcyc7XHJcbmltcG9ydCB7IHRyYW5zZm9ybVJlbGF0aW9uQ3VzdG9tRmllbGRJbnB1dHMgfSBmcm9tICcuLi91dGlscy90cmFuc2Zvcm0tcmVsYXRpb24tY3VzdG9tLWZpZWxkLWlucHV0cyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYXNlRGF0YVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcG9sbG86IEFwb2xsbywgcHJpdmF0ZSBzZXJ2ZXJDb25maWdTZXJ2aWNlOiBTZXJ2ZXJDb25maWdTZXJ2aWNlKSB7fVxyXG5cclxuICAgIHByaXZhdGUgZ2V0IGN1c3RvbUZpZWxkcygpOiBDdXN0b21GaWVsZHMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZlckNvbmZpZ1NlcnZpY2Uuc2VydmVyQ29uZmlnLmN1c3RvbUZpZWxkQ29uZmlnIHx8IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBHcmFwaFFMIHdhdGNoIHF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIHF1ZXJ5PFQsIFYgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55Pj4oXHJcbiAgICAgICAgcXVlcnk6IERvY3VtZW50Tm9kZSB8IFR5cGVkRG9jdW1lbnROb2RlPFQsIFY+LFxyXG4gICAgICAgIHZhcmlhYmxlcz86IFYsXHJcbiAgICAgICAgZmV0Y2hQb2xpY3k6IFdhdGNoUXVlcnlGZXRjaFBvbGljeSA9ICdjYWNoZS1hbmQtbmV0d29yaycsXHJcbiAgICApOiBRdWVyeVJlc3VsdDxULCBWPiB7XHJcbiAgICAgICAgY29uc3Qgd2l0aEN1c3RvbUZpZWxkcyA9IGFkZEN1c3RvbUZpZWxkcyhxdWVyeSwgdGhpcy5jdXN0b21GaWVsZHMpO1xyXG4gICAgICAgIGNvbnN0IHF1ZXJ5UmVmID0gdGhpcy5hcG9sbG8ud2F0Y2hRdWVyeTxULCBWPih7XHJcbiAgICAgICAgICAgIHF1ZXJ5OiB3aXRoQ3VzdG9tRmllbGRzLFxyXG4gICAgICAgICAgICB2YXJpYWJsZXMsXHJcbiAgICAgICAgICAgIGZldGNoUG9saWN5LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHF1ZXJ5UmVzdWx0ID0gbmV3IFF1ZXJ5UmVzdWx0PFQsIGFueT4ocXVlcnlSZWYsIHRoaXMuYXBvbGxvKTtcclxuICAgICAgICByZXR1cm4gcXVlcnlSZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBhIEdyYXBoUUwgbXV0YXRpb25cclxuICAgICAqL1xyXG4gICAgbXV0YXRlPFQsIFYgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55Pj4oXHJcbiAgICAgICAgbXV0YXRpb246IERvY3VtZW50Tm9kZSB8IFR5cGVkRG9jdW1lbnROb2RlPFQsIFY+LFxyXG4gICAgICAgIHZhcmlhYmxlcz86IFYsXHJcbiAgICAgICAgdXBkYXRlPzogTXV0YXRpb25VcGRhdGVyRm48VD4sXHJcbiAgICApOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgICAgICBjb25zdCB3aXRoQ3VzdG9tRmllbGRzID0gYWRkQ3VzdG9tRmllbGRzKG11dGF0aW9uLCB0aGlzLmN1c3RvbUZpZWxkcyk7XHJcbiAgICAgICAgY29uc3Qgd2l0aG91dFJlYWRvbmx5RmllbGRzID0gdGhpcy5wcmVwYXJlQ3VzdG9tRmllbGRzKG11dGF0aW9uLCB2YXJpYWJsZXMpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5hcG9sbG9cclxuICAgICAgICAgICAgLm11dGF0ZTxULCBWPih7XHJcbiAgICAgICAgICAgICAgICBtdXRhdGlvbjogd2l0aEN1c3RvbUZpZWxkcyxcclxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogd2l0aG91dFJlYWRvbmx5RmllbGRzLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocmVzdWx0ID0+IChyZXN1bHQgYXMgU2luZ2xlRXhlY3V0aW9uUmVzdWx0KS5kYXRhIGFzIFQpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHByZXBhcmVDdXN0b21GaWVsZHM8Vj4obXV0YXRpb246IERvY3VtZW50Tm9kZSwgdmFyaWFibGVzOiBWKTogViB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5ID0gaXNFbnRpdHlDcmVhdGVPclVwZGF0ZU11dGF0aW9uKG11dGF0aW9uKTtcclxuICAgICAgICBpZiAoZW50aXR5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUZpZWxkQ29uZmlnID0gdGhpcy5jdXN0b21GaWVsZHNbZW50aXR5XTtcclxuICAgICAgICAgICAgaWYgKHZhcmlhYmxlcyAmJiBjdXN0b21GaWVsZENvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhcmlhYmxlc0Nsb25lID0gc2ltcGxlRGVlcENsb25lKHZhcmlhYmxlcyBhcyBhbnkpO1xyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzQ2xvbmUgPSByZW1vdmVSZWFkb25seUN1c3RvbUZpZWxkcyh2YXJpYWJsZXNDbG9uZSwgY3VzdG9tRmllbGRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzQ2xvbmUgPSB0cmFuc2Zvcm1SZWxhdGlvbkN1c3RvbUZpZWxkSW5wdXRzKHZhcmlhYmxlc0Nsb25lLCBjdXN0b21GaWVsZENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFyaWFibGVzQ2xvbmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlcztcclxuICAgIH1cclxufVxyXG4iXX0=