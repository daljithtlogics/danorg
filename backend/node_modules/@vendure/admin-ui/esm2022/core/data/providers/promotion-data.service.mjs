import { pick } from '@vendure/common/lib/pick';
import { CREATE_PROMOTION, DELETE_PROMOTION, DELETE_PROMOTIONS, GET_ADJUSTMENT_OPERATIONS, UPDATE_PROMOTION, } from '../definitions/promotion-definitions';
export class PromotionDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getPromotionActionsAndConditions() {
        return this.baseDataService.query(GET_ADJUSTMENT_OPERATIONS);
    }
    createPromotion(input) {
        return this.baseDataService.mutate(CREATE_PROMOTION, {
            input: pick(input, [
                'conditions',
                'actions',
                'couponCode',
                'startsAt',
                'endsAt',
                'perCustomerUsageLimit',
                'usageLimit',
                'enabled',
                'translations',
                'customFields',
            ]),
        });
    }
    updatePromotion(input) {
        return this.baseDataService.mutate(UPDATE_PROMOTION, {
            input: pick(input, [
                'id',
                'conditions',
                'actions',
                'couponCode',
                'startsAt',
                'endsAt',
                'perCustomerUsageLimit',
                'usageLimit',
                'enabled',
                'translations',
                'customFields',
            ]),
        });
    }
    deletePromotion(id) {
        return this.baseDataService.mutate(DELETE_PROMOTION, { id });
    }
    deletePromotions(ids) {
        return this.baseDataService.mutate(DELETE_PROMOTIONS, { ids });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbW90aW9uLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvcHJvbW90aW9uLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHaEQsT0FBTyxFQUNILGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLHlCQUF5QixFQUN6QixnQkFBZ0IsR0FDbkIsTUFBTSxzQ0FBc0MsQ0FBQztBQUk5QyxNQUFNLE9BQU8sb0JBQW9CO0lBQzdCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUFHLENBQUM7SUFFeEQsZ0NBQWdDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQXVDLHlCQUF5QixDQUFDLENBQUM7SUFDdkcsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFtQztRQUMvQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUdoQyxnQkFBZ0IsRUFBRTtZQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZixZQUFZO2dCQUNaLFNBQVM7Z0JBQ1QsWUFBWTtnQkFDWixVQUFVO2dCQUNWLFFBQVE7Z0JBQ1IsdUJBQXVCO2dCQUN2QixZQUFZO2dCQUNaLFNBQVM7Z0JBQ1QsY0FBYztnQkFDZCxjQUFjO2FBQ2pCLENBQUM7U0FDTCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQW1DO1FBQy9DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBR2hDLGdCQUFnQixFQUFFO1lBQ2hCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNmLElBQUk7Z0JBQ0osWUFBWTtnQkFDWixTQUFTO2dCQUNULFlBQVk7Z0JBQ1osVUFBVTtnQkFDVixRQUFRO2dCQUNSLHVCQUF1QjtnQkFDdkIsWUFBWTtnQkFDWixTQUFTO2dCQUNULGNBQWM7Z0JBQ2QsY0FBYzthQUNqQixDQUFDO1NBQ0wsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGVBQWUsQ0FBQyxFQUFVO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBR2hDLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsR0FBYTtRQUMxQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUdoQyxpQkFBaUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGljayB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvcGljayc7XHJcblxyXG5pbXBvcnQgKiBhcyBDb2RlZ2VuIGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgQ1JFQVRFX1BST01PVElPTixcclxuICAgIERFTEVURV9QUk9NT1RJT04sXHJcbiAgICBERUxFVEVfUFJPTU9USU9OUyxcclxuICAgIEdFVF9BREpVU1RNRU5UX09QRVJBVElPTlMsXHJcbiAgICBVUERBVEVfUFJPTU9USU9OLFxyXG59IGZyb20gJy4uL2RlZmluaXRpb25zL3Byb21vdGlvbi1kZWZpbml0aW9ucyc7XHJcblxyXG5pbXBvcnQgeyBCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZGF0YS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9tb3Rpb25EYXRhU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2VEYXRhU2VydmljZTogQmFzZURhdGFTZXJ2aWNlKSB7fVxyXG5cclxuICAgIGdldFByb21vdGlvbkFjdGlvbnNBbmRDb25kaXRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxDb2RlZ2VuLkdldEFkanVzdG1lbnRPcGVyYXRpb25zUXVlcnk+KEdFVF9BREpVU1RNRU5UX09QRVJBVElPTlMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVByb21vdGlvbihpbnB1dDogQ29kZWdlbi5DcmVhdGVQcm9tb3Rpb25JbnB1dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIENvZGVnZW4uQ3JlYXRlUHJvbW90aW9uTXV0YXRpb24sXHJcbiAgICAgICAgICAgIENvZGVnZW4uQ3JlYXRlUHJvbW90aW9uTXV0YXRpb25WYXJpYWJsZXNcclxuICAgICAgICA+KENSRUFURV9QUk9NT1RJT04sIHtcclxuICAgICAgICAgICAgaW5wdXQ6IHBpY2soaW5wdXQsIFtcclxuICAgICAgICAgICAgICAgICdjb25kaXRpb25zJyxcclxuICAgICAgICAgICAgICAgICdhY3Rpb25zJyxcclxuICAgICAgICAgICAgICAgICdjb3Vwb25Db2RlJyxcclxuICAgICAgICAgICAgICAgICdzdGFydHNBdCcsXHJcbiAgICAgICAgICAgICAgICAnZW5kc0F0JyxcclxuICAgICAgICAgICAgICAgICdwZXJDdXN0b21lclVzYWdlTGltaXQnLFxyXG4gICAgICAgICAgICAgICAgJ3VzYWdlTGltaXQnLFxyXG4gICAgICAgICAgICAgICAgJ2VuYWJsZWQnLFxyXG4gICAgICAgICAgICAgICAgJ3RyYW5zbGF0aW9ucycsXHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tRmllbGRzJyxcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUHJvbW90aW9uKGlucHV0OiBDb2RlZ2VuLlVwZGF0ZVByb21vdGlvbklucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxcclxuICAgICAgICAgICAgQ29kZWdlbi5VcGRhdGVQcm9tb3Rpb25NdXRhdGlvbixcclxuICAgICAgICAgICAgQ29kZWdlbi5VcGRhdGVQcm9tb3Rpb25NdXRhdGlvblZhcmlhYmxlc1xyXG4gICAgICAgID4oVVBEQVRFX1BST01PVElPTiwge1xyXG4gICAgICAgICAgICBpbnB1dDogcGljayhpbnB1dCwgW1xyXG4gICAgICAgICAgICAgICAgJ2lkJyxcclxuICAgICAgICAgICAgICAgICdjb25kaXRpb25zJyxcclxuICAgICAgICAgICAgICAgICdhY3Rpb25zJyxcclxuICAgICAgICAgICAgICAgICdjb3Vwb25Db2RlJyxcclxuICAgICAgICAgICAgICAgICdzdGFydHNBdCcsXHJcbiAgICAgICAgICAgICAgICAnZW5kc0F0JyxcclxuICAgICAgICAgICAgICAgICdwZXJDdXN0b21lclVzYWdlTGltaXQnLFxyXG4gICAgICAgICAgICAgICAgJ3VzYWdlTGltaXQnLFxyXG4gICAgICAgICAgICAgICAgJ2VuYWJsZWQnLFxyXG4gICAgICAgICAgICAgICAgJ3RyYW5zbGF0aW9ucycsXHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tRmllbGRzJyxcclxuICAgICAgICAgICAgXSksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlUHJvbW90aW9uKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlRGF0YVNlcnZpY2UubXV0YXRlPFxyXG4gICAgICAgICAgICBDb2RlZ2VuLkRlbGV0ZVByb21vdGlvbk11dGF0aW9uLFxyXG4gICAgICAgICAgICBDb2RlZ2VuLkRlbGV0ZVByb21vdGlvbk11dGF0aW9uVmFyaWFibGVzXHJcbiAgICAgICAgPihERUxFVEVfUFJPTU9USU9OLCB7IGlkIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVByb21vdGlvbnMoaWRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIENvZGVnZW4uRGVsZXRlUHJvbW90aW9uc011dGF0aW9uLFxyXG4gICAgICAgICAgICBDb2RlZ2VuLkRlbGV0ZVByb21vdGlvbnNNdXRhdGlvblZhcmlhYmxlc1xyXG4gICAgICAgID4oREVMRVRFX1BST01PVElPTlMsIHsgaWRzIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==