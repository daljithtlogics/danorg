import { pick } from '@vendure/common/lib/pick';
import { CREATE_SHIPPING_METHOD, DELETE_SHIPPING_METHOD, DELETE_SHIPPING_METHODS, GET_SHIPPING_METHOD_OPERATIONS, TEST_ELIGIBLE_SHIPPING_METHODS, TEST_SHIPPING_METHOD, UPDATE_SHIPPING_METHOD, } from '../definitions/shipping-definitions';
export class ShippingMethodDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getShippingMethodOperations() {
        return this.baseDataService.query(GET_SHIPPING_METHOD_OPERATIONS);
    }
    createShippingMethod(input) {
        const variables = {
            input: pick(input, [
                'code',
                'checker',
                'calculator',
                'fulfillmentHandler',
                'customFields',
                'translations',
            ]),
        };
        return this.baseDataService.mutate(CREATE_SHIPPING_METHOD, variables);
    }
    updateShippingMethod(input) {
        const variables = {
            input: pick(input, [
                'id',
                'code',
                'checker',
                'calculator',
                'fulfillmentHandler',
                'customFields',
                'translations',
            ]),
        };
        return this.baseDataService.mutate(UPDATE_SHIPPING_METHOD, variables);
    }
    deleteShippingMethod(id) {
        return this.baseDataService.mutate(DELETE_SHIPPING_METHOD, {
            id,
        });
    }
    deleteShippingMethods(ids) {
        return this.baseDataService.mutate(DELETE_SHIPPING_METHODS, {
            ids,
        });
    }
    testShippingMethod(input) {
        return this.baseDataService.query(TEST_SHIPPING_METHOD, {
            input,
        });
    }
    testEligibleShippingMethods(input) {
        return this.baseDataService.query(TEST_ELIGIBLE_SHIPPING_METHODS, {
            input,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpcHBpbmctbWV0aG9kLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9wcm92aWRlcnMvc2hpcHBpbmctbWV0aG9kLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHaEQsT0FBTyxFQUNILHNCQUFzQixFQUN0QixzQkFBc0IsRUFDdEIsdUJBQXVCLEVBQ3ZCLDhCQUE4QixFQUM5Qiw4QkFBOEIsRUFDOUIsb0JBQW9CLEVBQ3BCLHNCQUFzQixHQUN6QixNQUFNLHFDQUFxQyxDQUFDO0FBSTdDLE1BQU0sT0FBTyx5QkFBeUI7SUFDbEMsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQUcsQ0FBQztJQUV4RCwyQkFBMkI7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FDN0IsOEJBQThCLENBQ2pDLENBQUM7SUFDTixDQUFDO0lBRUQsb0JBQW9CLENBQUMsS0FBd0M7UUFDekQsTUFBTSxTQUFTLEdBQWtEO1lBQzdELEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNmLE1BQU07Z0JBQ04sU0FBUztnQkFDVCxZQUFZO2dCQUNaLG9CQUFvQjtnQkFDcEIsY0FBYztnQkFDZCxjQUFjO2FBQ2pCLENBQUM7U0FDTCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FHaEMsc0JBQXNCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELG9CQUFvQixDQUFDLEtBQXdDO1FBQ3pELE1BQU0sU0FBUyxHQUFrRDtZQUM3RCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZixJQUFJO2dCQUNKLE1BQU07Z0JBQ04sU0FBUztnQkFDVCxZQUFZO2dCQUNaLG9CQUFvQjtnQkFDcEIsY0FBYztnQkFDZCxjQUFjO2FBQ2pCLENBQUM7U0FDTCxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FHaEMsc0JBQXNCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELG9CQUFvQixDQUFDLEVBQVU7UUFDM0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FHaEMsc0JBQXNCLEVBQUU7WUFDdEIsRUFBRTtTQUNMLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxHQUFhO1FBQy9CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBR2hDLHVCQUF1QixFQUFFO1lBQ3ZCLEdBQUc7U0FDTixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBc0M7UUFDckQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FHL0Isb0JBQW9CLEVBQUU7WUFDcEIsS0FBSztTQUNSLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCwyQkFBMkIsQ0FBQyxLQUErQztRQUN2RSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUcvQiw4QkFBOEIsRUFBRTtZQUM5QixLQUFLO1NBQ1IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGljayB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvcGljayc7XHJcblxyXG5pbXBvcnQgKiBhcyBDb2RlZ2VuIGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgQ1JFQVRFX1NISVBQSU5HX01FVEhPRCxcclxuICAgIERFTEVURV9TSElQUElOR19NRVRIT0QsXHJcbiAgICBERUxFVEVfU0hJUFBJTkdfTUVUSE9EUyxcclxuICAgIEdFVF9TSElQUElOR19NRVRIT0RfT1BFUkFUSU9OUyxcclxuICAgIFRFU1RfRUxJR0lCTEVfU0hJUFBJTkdfTUVUSE9EUyxcclxuICAgIFRFU1RfU0hJUFBJTkdfTUVUSE9ELFxyXG4gICAgVVBEQVRFX1NISVBQSU5HX01FVEhPRCxcclxufSBmcm9tICcuLi9kZWZpbml0aW9ucy9zaGlwcGluZy1kZWZpbml0aW9ucyc7XHJcblxyXG5pbXBvcnQgeyBCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZGF0YS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTaGlwcGluZ01ldGhvZERhdGFTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZURhdGFTZXJ2aWNlOiBCYXNlRGF0YVNlcnZpY2UpIHt9XHJcblxyXG4gICAgZ2V0U2hpcHBpbmdNZXRob2RPcGVyYXRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxDb2RlZ2VuLkdldFNoaXBwaW5nTWV0aG9kT3BlcmF0aW9uc1F1ZXJ5PihcclxuICAgICAgICAgICAgR0VUX1NISVBQSU5HX01FVEhPRF9PUEVSQVRJT05TLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2hpcHBpbmdNZXRob2QoaW5wdXQ6IENvZGVnZW4uQ3JlYXRlU2hpcHBpbmdNZXRob2RJbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IHZhcmlhYmxlczogQ29kZWdlbi5DcmVhdGVTaGlwcGluZ01ldGhvZE11dGF0aW9uVmFyaWFibGVzID0ge1xyXG4gICAgICAgICAgICBpbnB1dDogcGljayhpbnB1dCwgW1xyXG4gICAgICAgICAgICAgICAgJ2NvZGUnLFxyXG4gICAgICAgICAgICAgICAgJ2NoZWNrZXInLFxyXG4gICAgICAgICAgICAgICAgJ2NhbGN1bGF0b3InLFxyXG4gICAgICAgICAgICAgICAgJ2Z1bGZpbGxtZW50SGFuZGxlcicsXHJcbiAgICAgICAgICAgICAgICAnY3VzdG9tRmllbGRzJyxcclxuICAgICAgICAgICAgICAgICd0cmFuc2xhdGlvbnMnLFxyXG4gICAgICAgICAgICBdKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIENvZGVnZW4uQ3JlYXRlU2hpcHBpbmdNZXRob2RNdXRhdGlvbixcclxuICAgICAgICAgICAgQ29kZWdlbi5DcmVhdGVTaGlwcGluZ01ldGhvZE11dGF0aW9uVmFyaWFibGVzXHJcbiAgICAgICAgPihDUkVBVEVfU0hJUFBJTkdfTUVUSE9ELCB2YXJpYWJsZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNoaXBwaW5nTWV0aG9kKGlucHV0OiBDb2RlZ2VuLlVwZGF0ZVNoaXBwaW5nTWV0aG9kSW5wdXQpIHtcclxuICAgICAgICBjb25zdCB2YXJpYWJsZXM6IENvZGVnZW4uVXBkYXRlU2hpcHBpbmdNZXRob2RNdXRhdGlvblZhcmlhYmxlcyA9IHtcclxuICAgICAgICAgICAgaW5wdXQ6IHBpY2soaW5wdXQsIFtcclxuICAgICAgICAgICAgICAgICdpZCcsXHJcbiAgICAgICAgICAgICAgICAnY29kZScsXHJcbiAgICAgICAgICAgICAgICAnY2hlY2tlcicsXHJcbiAgICAgICAgICAgICAgICAnY2FsY3VsYXRvcicsXHJcbiAgICAgICAgICAgICAgICAnZnVsZmlsbG1lbnRIYW5kbGVyJyxcclxuICAgICAgICAgICAgICAgICdjdXN0b21GaWVsZHMnLFxyXG4gICAgICAgICAgICAgICAgJ3RyYW5zbGF0aW9ucycsXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxcclxuICAgICAgICAgICAgQ29kZWdlbi5VcGRhdGVTaGlwcGluZ01ldGhvZE11dGF0aW9uLFxyXG4gICAgICAgICAgICBDb2RlZ2VuLlVwZGF0ZVNoaXBwaW5nTWV0aG9kTXV0YXRpb25WYXJpYWJsZXNcclxuICAgICAgICA+KFVQREFURV9TSElQUElOR19NRVRIT0QsIHZhcmlhYmxlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlU2hpcHBpbmdNZXRob2QoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5tdXRhdGU8XHJcbiAgICAgICAgICAgIENvZGVnZW4uRGVsZXRlU2hpcHBpbmdNZXRob2RNdXRhdGlvbixcclxuICAgICAgICAgICAgQ29kZWdlbi5EZWxldGVTaGlwcGluZ01ldGhvZE11dGF0aW9uVmFyaWFibGVzXHJcbiAgICAgICAgPihERUxFVEVfU0hJUFBJTkdfTUVUSE9ELCB7XHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVNoaXBwaW5nTWV0aG9kcyhpZHM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLm11dGF0ZTxcclxuICAgICAgICAgICAgQ29kZWdlbi5EZWxldGVTaGlwcGluZ01ldGhvZHNNdXRhdGlvbixcclxuICAgICAgICAgICAgQ29kZWdlbi5EZWxldGVTaGlwcGluZ01ldGhvZHNNdXRhdGlvblZhcmlhYmxlc1xyXG4gICAgICAgID4oREVMRVRFX1NISVBQSU5HX01FVEhPRFMsIHtcclxuICAgICAgICAgICAgaWRzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRlc3RTaGlwcGluZ01ldGhvZChpbnB1dDogQ29kZWdlbi5UZXN0U2hpcHBpbmdNZXRob2RJbnB1dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VEYXRhU2VydmljZS5xdWVyeTxcclxuICAgICAgICAgICAgQ29kZWdlbi5UZXN0U2hpcHBpbmdNZXRob2RRdWVyeSxcclxuICAgICAgICAgICAgQ29kZWdlbi5UZXN0U2hpcHBpbmdNZXRob2RRdWVyeVZhcmlhYmxlc1xyXG4gICAgICAgID4oVEVTVF9TSElQUElOR19NRVRIT0QsIHtcclxuICAgICAgICAgICAgaW5wdXQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGVzdEVsaWdpYmxlU2hpcHBpbmdNZXRob2RzKGlucHV0OiBDb2RlZ2VuLlRlc3RFbGlnaWJsZVNoaXBwaW5nTWV0aG9kc0lucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZURhdGFTZXJ2aWNlLnF1ZXJ5PFxyXG4gICAgICAgICAgICBDb2RlZ2VuLlRlc3RFbGlnaWJsZVNoaXBwaW5nTWV0aG9kc1F1ZXJ5LFxyXG4gICAgICAgICAgICBDb2RlZ2VuLlRlc3RFbGlnaWJsZVNoaXBwaW5nTWV0aG9kc1F1ZXJ5VmFyaWFibGVzXHJcbiAgICAgICAgPihURVNUX0VMSUdJQkxFX1NISVBQSU5HX01FVEhPRFMsIHtcclxuICAgICAgICAgICAgaW5wdXQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19