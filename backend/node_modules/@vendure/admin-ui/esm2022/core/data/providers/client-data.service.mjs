import { SetMainNavExpandedDocument } from '../../common/generated-types';
import { GET_NEWTORK_STATUS, GET_UI_STATE, GET_USER_STATUS, REQUEST_COMPLETED, REQUEST_STARTED, SET_ACTIVE_CHANNEL, SET_AS_LOGGED_IN, SET_AS_LOGGED_OUT, SET_CONTENT_LANGUAGE, SET_DISPLAY_UI_EXTENSION_POINTS, SET_UI_LANGUAGE_AND_LOCALE, SET_UI_LOCALE, SET_UI_THEME, UPDATE_USER_CHANNELS, } from '../definitions/client-definitions';
/**
 * Note: local queries all have a fetch-policy of "cache-first" explicitly specified due to:
 * https://github.com/apollographql/apollo-link-state/issues/236
 */
export class ClientDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    startRequest() {
        return this.baseDataService.mutate(REQUEST_STARTED);
    }
    completeRequest() {
        return this.baseDataService.mutate(REQUEST_COMPLETED);
    }
    getNetworkStatus() {
        return this.baseDataService.query(GET_NEWTORK_STATUS, {}, 'cache-first');
    }
    loginSuccess(administratorId, username, activeChannelId, channels) {
        return this.baseDataService.mutate(SET_AS_LOGGED_IN, {
            input: {
                administratorId,
                username,
                loginTime: Date.now().toString(),
                activeChannelId,
                channels,
            },
        });
    }
    logOut() {
        return this.baseDataService.mutate(SET_AS_LOGGED_OUT);
    }
    userStatus() {
        return this.baseDataService.query(GET_USER_STATUS, {}, 'cache-first');
    }
    uiState() {
        return this.baseDataService.query(GET_UI_STATE, {}, 'cache-first');
    }
    setUiLanguage(languageCode, locale) {
        return this.baseDataService.mutate(SET_UI_LANGUAGE_AND_LOCALE, {
            languageCode,
            locale,
        });
    }
    setUiLocale(locale) {
        return this.baseDataService.mutate(SET_UI_LOCALE, {
            locale,
        });
    }
    setContentLanguage(languageCode) {
        return this.baseDataService.mutate(SET_CONTENT_LANGUAGE, {
            languageCode,
        });
    }
    setUiTheme(theme) {
        return this.baseDataService.mutate(SET_UI_THEME, {
            theme,
        });
    }
    setDisplayUiExtensionPoints(display) {
        return this.baseDataService.mutate(SET_DISPLAY_UI_EXTENSION_POINTS, {
            display,
        });
    }
    setMainNavExpanded(expanded) {
        return this.baseDataService.mutate(SetMainNavExpandedDocument, {
            expanded,
        });
    }
    setActiveChannel(channelId) {
        return this.baseDataService.mutate(SET_ACTIVE_CHANNEL, {
            channelId,
        });
    }
    updateUserChannels(channels) {
        return this.baseDataService.mutate(UPDATE_USER_CHANNELS, {
            channels,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,