import { pick } from '@vendure/common/lib/pick';
import { ASSIGN_FACETS_TO_CHANNEL, CREATE_FACET, CREATE_FACET_VALUES, DELETE_FACET, DELETE_FACET_VALUES, DELETE_FACETS, GET_FACET_VALUE_LIST, REMOVE_FACETS_FROM_CHANNEL, UPDATE_FACET, UPDATE_FACET_VALUES, } from '../definitions/facet-definitions';
export class FacetDataService {
    constructor(baseDataService) {
        this.baseDataService = baseDataService;
    }
    getFacetValues(options, fetchPolicy) {
        return this.baseDataService.query(GET_FACET_VALUE_LIST, { options }, fetchPolicy);
    }
    createFacet(facet) {
        const input = {
            input: pick(facet, ['code', 'isPrivate', 'translations', 'values', 'customFields']),
        };
        return this.baseDataService.mutate(CREATE_FACET, input);
    }
    updateFacet(facet) {
        const input = {
            input: pick(facet, ['id', 'code', 'isPrivate', 'translations', 'customFields']),
        };
        return this.baseDataService.mutate(UPDATE_FACET, input);
    }
    deleteFacet(id, force) {
        return this.baseDataService.mutate(DELETE_FACET, {
            id,
            force,
        });
    }
    deleteFacets(ids, force) {
        return this.baseDataService.mutate(DELETE_FACETS, {
            ids,
            force,
        });
    }
    createFacetValues(facetValues) {
        const input = {
            input: facetValues.map(pick(['facetId', 'code', 'translations', 'customFields'])),
        };
        return this.baseDataService.mutate(CREATE_FACET_VALUES, input);
    }
    updateFacetValues(facetValues) {
        const input = {
            input: facetValues.map(pick(['id', 'code', 'translations', 'customFields'])),
        };
        return this.baseDataService.mutate(UPDATE_FACET_VALUES, input);
    }
    deleteFacetValues(ids, force) {
        return this.baseDataService.mutate(DELETE_FACET_VALUES, {
            ids,
            force,
        });
    }
    assignFacetsToChannel(input) {
        return this.baseDataService.mutate(ASSIGN_FACETS_TO_CHANNEL, {
            input,
        });
    }
    removeFacetsFromChannel(input) {
        return this.baseDataService.mutate(REMOVE_FACETS_FROM_CHANNEL, {
            input,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,