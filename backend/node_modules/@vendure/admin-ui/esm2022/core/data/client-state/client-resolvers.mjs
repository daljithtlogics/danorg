import { GET_NEWTORK_STATUS, GET_UI_STATE, GET_USER_STATUS } from '../definitions/client-definitions';
export const clientResolvers = {
    Mutation: {
        requestStarted: (_, args, { cache }) => updateRequestsInFlight(cache, 1),
        requestCompleted: (_, args, { cache }) => updateRequestsInFlight(cache, -1),
        setAsLoggedIn: (_, args, { cache }) => {
            const { input: { username, loginTime, channels, activeChannelId, administratorId }, } = args;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const permissions = channels.find(c => c.id === activeChannelId).permissions;
            const data = {
                userStatus: {
                    __typename: 'UserStatus',
                    administratorId,
                    username,
                    loginTime,
                    isLoggedIn: true,
                    permissions,
                    channels,
                    activeChannelId,
                },
            };
            cache.writeQuery({ query: GET_USER_STATUS, data });
            return data.userStatus;
        },
        setAsLoggedOut: (_, args, { cache }) => {
            const data = {
                userStatus: {
                    __typename: 'UserStatus',
                    administratorId: null,
                    username: '',
                    loginTime: '',
                    isLoggedIn: false,
                    permissions: [],
                    channels: [],
                    activeChannelId: null,
                },
            };
            cache.writeQuery({ query: GET_USER_STATUS, data });
            return data.userStatus;
        },
        setUiLanguage: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_UI_STATE });
            const data = updateUiState(previous, 'language', args.languageCode);
            cache.writeQuery({ query: GET_UI_STATE, data });
            return args.languageCode;
        },
        setUiLocale: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_UI_STATE });
            const data = updateUiState(previous, 'locale', args.locale);
            cache.writeQuery({ query: GET_UI_STATE, data });
            return args.locale ?? undefined;
        },
        setContentLanguage: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_UI_STATE });
            const data = updateUiState(previous, 'contentLanguage', args.languageCode);
            cache.writeQuery({ query: GET_UI_STATE, data });
            return args.languageCode;
        },
        setUiTheme: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_UI_STATE });
            const data = updateUiState(previous, 'theme', args.theme);
            cache.writeQuery({ query: GET_UI_STATE, data });
            return args.theme;
        },
        setDisplayUiExtensionPoints: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_UI_STATE });
            const data = updateUiState(previous, 'displayUiExtensionPoints', args.display);
            cache.writeQuery({ query: GET_UI_STATE, data });
            return args.display;
        },
        setMainNavExpanded: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_UI_STATE });
            const data = updateUiState(previous, 'mainNavExpanded', args.expanded);
            cache.writeQuery({ query: GET_UI_STATE, data });
            return args.expanded;
        },
        setActiveChannel: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_USER_STATUS });
            const activeChannel = previous.userStatus.channels.find(c => c.id === args.channelId);
            if (!activeChannel) {
                throw new Error('setActiveChannel: Could not find Channel with ID ' + args.channelId);
            }
            const permissions = activeChannel.permissions;
            const data = {
                userStatus: {
                    ...previous.userStatus,
                    permissions,
                    activeChannelId: activeChannel.id,
                },
            };
            cache.writeQuery({ query: GET_USER_STATUS, data });
            return data.userStatus;
        },
        updateUserChannels: (_, args, { cache }) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const previous = cache.readQuery({ query: GET_USER_STATUS });
            const data = {
                userStatus: {
                    ...previous.userStatus,
                    channels: Array.isArray(args.channels) ? args.channels : [args.channels],
                },
            };
            cache.writeQuery({ query: GET_USER_STATUS, data });
            return data.userStatus;
        },
    },
};
function updateUiState(previous, key, value) {
    return {
        uiState: {
            ...previous.uiState,
            [key]: value,
            __typename: 'UiState',
        },
    };
}
function updateRequestsInFlight(cache, increment) {
    const previous = cache.readQuery({ query: GET_NEWTORK_STATUS });
    const inFlightRequests = previous ? previous.networkStatus.inFlightRequests + increment : increment;
    const data = {
        networkStatus: {
            __typename: 'NetworkStatus',
            inFlightRequests,
        },
    };
    cache.writeQuery({ query: GET_NEWTORK_STATUS, data });
    return inFlightRequests;
}
//# sourceMappingURL=data:application/json;base64,