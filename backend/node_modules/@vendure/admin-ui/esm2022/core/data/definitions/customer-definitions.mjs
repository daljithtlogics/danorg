import { gql } from 'apollo-angular';
import { ERROR_RESULT_FRAGMENT } from './shared-definitions';
export const ADDRESS_FRAGMENT = gql `
    fragment Address on Address {
        id
        createdAt
        updatedAt
        fullName
        company
        streetLine1
        streetLine2
        city
        province
        postalCode
        country {
            id
            code
            name
        }
        phoneNumber
        defaultShippingAddress
        defaultBillingAddress
    }
`;
export const CUSTOMER_FRAGMENT = gql `
    fragment Customer on Customer {
        id
        createdAt
        updatedAt
        title
        firstName
        lastName
        phoneNumber
        emailAddress
        user {
            id
            identifier
            verified
            lastLogin
        }
        addresses {
            ...Address
        }
    }
    ${ADDRESS_FRAGMENT}
`;
export const CUSTOMER_GROUP_FRAGMENT = gql `
    fragment CustomerGroup on CustomerGroup {
        id
        createdAt
        updatedAt
        name
    }
`;
export const GET_CUSTOMER_LIST = gql `
    query GetCustomerList($options: CustomerListOptions) {
        customers(options: $options) {
            items {
                id
                createdAt
                updatedAt
                title
                firstName
                lastName
                emailAddress
                user {
                    id
                    verified
                }
            }
            totalItems
        }
    }
`;
export const CREATE_CUSTOMER = gql `
    mutation CreateCustomer($input: CreateCustomerInput!, $password: String) {
        createCustomer(input: $input, password: $password) {
            ...Customer
            ...ErrorResult
        }
    }
    ${CUSTOMER_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const UPDATE_CUSTOMER = gql `
    mutation UpdateCustomer($input: UpdateCustomerInput!) {
        updateCustomer(input: $input) {
            ...Customer
            ...ErrorResult
        }
    }
    ${CUSTOMER_FRAGMENT}
    ${ERROR_RESULT_FRAGMENT}
`;
export const DELETE_CUSTOMER = gql `
    mutation DeleteCustomer($id: ID!) {
        deleteCustomer(id: $id) {
            result
            message
        }
    }
`;
export const DELETE_CUSTOMERS = gql `
    mutation DeleteCustomers($ids: [ID!]!) {
        deleteCustomers(ids: $ids) {
            result
            message
        }
    }
`;
export const CREATE_CUSTOMER_ADDRESS = gql `
    mutation CreateCustomerAddress($customerId: ID!, $input: CreateAddressInput!) {
        createCustomerAddress(customerId: $customerId, input: $input) {
            ...Address
        }
    }
    ${ADDRESS_FRAGMENT}
`;
export const UPDATE_CUSTOMER_ADDRESS = gql `
    mutation UpdateCustomerAddress($input: UpdateAddressInput!) {
        updateCustomerAddress(input: $input) {
            ...Address
        }
    }
    ${ADDRESS_FRAGMENT}
`;
export const DELETE_CUSTOMER_ADDRESS = gql `
    mutation DeleteCustomerAddress($id: ID!) {
        deleteCustomerAddress(id: $id) {
            success
        }
    }
`;
export const CREATE_CUSTOMER_GROUP = gql `
    mutation CreateCustomerGroup($input: CreateCustomerGroupInput!) {
        createCustomerGroup(input: $input) {
            ...CustomerGroup
        }
    }
    ${CUSTOMER_GROUP_FRAGMENT}
`;
export const UPDATE_CUSTOMER_GROUP = gql `
    mutation UpdateCustomerGroup($input: UpdateCustomerGroupInput!) {
        updateCustomerGroup(input: $input) {
            ...CustomerGroup
        }
    }
    ${CUSTOMER_GROUP_FRAGMENT}
`;
export const DELETE_CUSTOMER_GROUP = gql `
    mutation DeleteCustomerGroup($id: ID!) {
        deleteCustomerGroup(id: $id) {
            result
            message
        }
    }
`;
export const DELETE_CUSTOMER_GROUPS = gql `
    mutation DeleteCustomerGroups($ids: [ID!]!) {
        deleteCustomerGroups(ids: $ids) {
            result
            message
        }
    }
`;
export const GET_CUSTOMER_GROUPS = gql `
    query GetCustomerGroups($options: CustomerGroupListOptions) {
        customerGroups(options: $options) {
            items {
                ...CustomerGroup
            }
            totalItems
        }
    }
    ${CUSTOMER_GROUP_FRAGMENT}
`;
export const GET_CUSTOMER_GROUP_WITH_CUSTOMERS = gql `
    query GetCustomerGroupWithCustomers($id: ID!, $options: CustomerListOptions) {
        customerGroup(id: $id) {
            ...CustomerGroup
            customers(options: $options) {
                items {
                    id
                    createdAt
                    updatedAt
                    emailAddress
                    firstName
                    lastName
                    user {
                        id
                    }
                }
                totalItems
            }
        }
    }
    ${CUSTOMER_GROUP_FRAGMENT}
`;
export const ADD_CUSTOMERS_TO_GROUP = gql `
    mutation AddCustomersToGroup($groupId: ID!, $customerIds: [ID!]!) {
        addCustomersToGroup(customerGroupId: $groupId, customerIds: $customerIds) {
            ...CustomerGroup
        }
    }
    ${CUSTOMER_GROUP_FRAGMENT}
`;
export const REMOVE_CUSTOMERS_FROM_GROUP = gql `
    mutation RemoveCustomersFromGroup($groupId: ID!, $customerIds: [ID!]!) {
        removeCustomersFromGroup(customerGroupId: $groupId, customerIds: $customerIds) {
            ...CustomerGroup
        }
    }
    ${CUSTOMER_GROUP_FRAGMENT}
`;
export const GET_CUSTOMER_HISTORY = gql `
    query GetCustomerHistory($id: ID!, $options: HistoryEntryListOptions) {
        customer(id: $id) {
            id
            history(options: $options) {
                totalItems
                items {
                    id
                    type
                    createdAt
                    isPublic
                    administrator {
                        id
                        firstName
                        lastName
                    }
                    data
                }
            }
        }
    }
`;
export const ADD_NOTE_TO_CUSTOMER = gql `
    mutation AddNoteToCustomer($input: AddNoteToCustomerInput!) {
        addNoteToCustomer(input: $input) {
            id
        }
    }
`;
export const UPDATE_CUSTOMER_NOTE = gql `
    mutation UpdateCustomerNote($input: UpdateCustomerNoteInput!) {
        updateCustomerNote(input: $input) {
            id
            data
            isPublic
        }
    }
`;
export const DELETE_CUSTOMER_NOTE = gql `
    mutation DeleteCustomerNote($id: ID!) {
        deleteCustomerNote(id: $id) {
            result
            message
        }
    }
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tZXItZGVmaW5pdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvZGVmaW5pdGlvbnMvY3VzdG9tZXItZGVmaW5pdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTdELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJsQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQW9COUIsZ0JBQWdCO0NBQ3JCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPekMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CbkMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7TUFPNUIsaUJBQWlCO01BQ2pCLHFCQUFxQjtDQUMxQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQTs7Ozs7OztNQU81QixpQkFBaUI7TUFDakIscUJBQXFCO0NBQzFCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBT2pDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPbEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEdBQUcsQ0FBQTs7Ozs7O01BTXBDLGdCQUFnQjtDQUNyQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNcEMsZ0JBQWdCO0NBQ3JCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUE7Ozs7OztDQU16QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNbEMsdUJBQXVCO0NBQzVCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1sQyx1QkFBdUI7Q0FDNUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU92QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBT3hDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7OztNQVNoQyx1QkFBdUI7Q0FDNUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFvQjlDLHVCQUF1QjtDQUM1QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNbkMsdUJBQXVCO0NBQzVCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU14Qyx1QkFBdUI7Q0FDNUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJ0QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Q0FNdEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Q0FRdEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU90QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ3FsIH0gZnJvbSAnYXBvbGxvLWFuZ3VsYXInO1xyXG5cclxuaW1wb3J0IHsgRVJST1JfUkVTVUxUX0ZSQUdNRU5UIH0gZnJvbSAnLi9zaGFyZWQtZGVmaW5pdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFERFJFU1NfRlJBR01FTlQgPSBncWxgXHJcbiAgICBmcmFnbWVudCBBZGRyZXNzIG9uIEFkZHJlc3Mge1xyXG4gICAgICAgIGlkXHJcbiAgICAgICAgY3JlYXRlZEF0XHJcbiAgICAgICAgdXBkYXRlZEF0XHJcbiAgICAgICAgZnVsbE5hbWVcclxuICAgICAgICBjb21wYW55XHJcbiAgICAgICAgc3RyZWV0TGluZTFcclxuICAgICAgICBzdHJlZXRMaW5lMlxyXG4gICAgICAgIGNpdHlcclxuICAgICAgICBwcm92aW5jZVxyXG4gICAgICAgIHBvc3RhbENvZGVcclxuICAgICAgICBjb3VudHJ5IHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgY29kZVxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBob25lTnVtYmVyXHJcbiAgICAgICAgZGVmYXVsdFNoaXBwaW5nQWRkcmVzc1xyXG4gICAgICAgIGRlZmF1bHRCaWxsaW5nQWRkcmVzc1xyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IENVU1RPTUVSX0ZSQUdNRU5UID0gZ3FsYFxyXG4gICAgZnJhZ21lbnQgQ3VzdG9tZXIgb24gQ3VzdG9tZXIge1xyXG4gICAgICAgIGlkXHJcbiAgICAgICAgY3JlYXRlZEF0XHJcbiAgICAgICAgdXBkYXRlZEF0XHJcbiAgICAgICAgdGl0bGVcclxuICAgICAgICBmaXJzdE5hbWVcclxuICAgICAgICBsYXN0TmFtZVxyXG4gICAgICAgIHBob25lTnVtYmVyXHJcbiAgICAgICAgZW1haWxBZGRyZXNzXHJcbiAgICAgICAgdXNlciB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGlkZW50aWZpZXJcclxuICAgICAgICAgICAgdmVyaWZpZWRcclxuICAgICAgICAgICAgbGFzdExvZ2luXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZHJlc3NlcyB7XHJcbiAgICAgICAgICAgIC4uLkFkZHJlc3NcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0FERFJFU1NfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ1VTVE9NRVJfR1JPVVBfRlJBR01FTlQgPSBncWxgXHJcbiAgICBmcmFnbWVudCBDdXN0b21lckdyb3VwIG9uIEN1c3RvbWVyR3JvdXAge1xyXG4gICAgICAgIGlkXHJcbiAgICAgICAgY3JlYXRlZEF0XHJcbiAgICAgICAgdXBkYXRlZEF0XHJcbiAgICAgICAgbmFtZVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9DVVNUT01FUl9MSVNUID0gZ3FsYFxyXG4gICAgcXVlcnkgR2V0Q3VzdG9tZXJMaXN0KCRvcHRpb25zOiBDdXN0b21lckxpc3RPcHRpb25zKSB7XHJcbiAgICAgICAgY3VzdG9tZXJzKG9wdGlvbnM6ICRvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zIHtcclxuICAgICAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICAgICAgICAgIHVwZGF0ZWRBdFxyXG4gICAgICAgICAgICAgICAgdGl0bGVcclxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZVxyXG4gICAgICAgICAgICAgICAgbGFzdE5hbWVcclxuICAgICAgICAgICAgICAgIGVtYWlsQWRkcmVzc1xyXG4gICAgICAgICAgICAgICAgdXNlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvdGFsSXRlbXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ1JFQVRFX0NVU1RPTUVSID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQ3JlYXRlQ3VzdG9tZXIoJGlucHV0OiBDcmVhdGVDdXN0b21lcklucHV0ISwgJHBhc3N3b3JkOiBTdHJpbmcpIHtcclxuICAgICAgICBjcmVhdGVDdXN0b21lcihpbnB1dDogJGlucHV0LCBwYXNzd29yZDogJHBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIC4uLkN1c3RvbWVyXHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtDVVNUT01FUl9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVQREFURV9DVVNUT01FUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIFVwZGF0ZUN1c3RvbWVyKCRpbnB1dDogVXBkYXRlQ3VzdG9tZXJJbnB1dCEpIHtcclxuICAgICAgICB1cGRhdGVDdXN0b21lcihpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLkN1c3RvbWVyXHJcbiAgICAgICAgICAgIC4uLkVycm9yUmVzdWx0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtDVVNUT01FUl9GUkFHTUVOVH1cclxuICAgICR7RVJST1JfUkVTVUxUX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFTEVURV9DVVNUT01FUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZUN1c3RvbWVyKCRpZDogSUQhKSB7XHJcbiAgICAgICAgZGVsZXRlQ3VzdG9tZXIoaWQ6ICRpZCkge1xyXG4gICAgICAgICAgICByZXN1bHRcclxuICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBERUxFVEVfQ1VTVE9NRVJTID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gRGVsZXRlQ3VzdG9tZXJzKCRpZHM6IFtJRCFdISkge1xyXG4gICAgICAgIGRlbGV0ZUN1c3RvbWVycyhpZHM6ICRpZHMpIHtcclxuICAgICAgICAgICAgcmVzdWx0XHJcbiAgICAgICAgICAgIG1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ1JFQVRFX0NVU1RPTUVSX0FERFJFU1MgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBDcmVhdGVDdXN0b21lckFkZHJlc3MoJGN1c3RvbWVySWQ6IElEISwgJGlucHV0OiBDcmVhdGVBZGRyZXNzSW5wdXQhKSB7XHJcbiAgICAgICAgY3JlYXRlQ3VzdG9tZXJBZGRyZXNzKGN1c3RvbWVySWQ6ICRjdXN0b21lcklkLCBpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLkFkZHJlc3NcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0FERFJFU1NfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVVBEQVRFX0NVU1RPTUVSX0FERFJFU1MgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBVcGRhdGVDdXN0b21lckFkZHJlc3MoJGlucHV0OiBVcGRhdGVBZGRyZXNzSW5wdXQhKSB7XHJcbiAgICAgICAgdXBkYXRlQ3VzdG9tZXJBZGRyZXNzKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uQWRkcmVzc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7QUREUkVTU19GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBERUxFVEVfQ1VTVE9NRVJfQUREUkVTUyA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZUN1c3RvbWVyQWRkcmVzcygkaWQ6IElEISkge1xyXG4gICAgICAgIGRlbGV0ZUN1c3RvbWVyQWRkcmVzcyhpZDogJGlkKSB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3NcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ1JFQVRFX0NVU1RPTUVSX0dST1VQID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQ3JlYXRlQ3VzdG9tZXJHcm91cCgkaW5wdXQ6IENyZWF0ZUN1c3RvbWVyR3JvdXBJbnB1dCEpIHtcclxuICAgICAgICBjcmVhdGVDdXN0b21lckdyb3VwKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uQ3VzdG9tZXJHcm91cFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7Q1VTVE9NRVJfR1JPVVBfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVVBEQVRFX0NVU1RPTUVSX0dST1VQID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gVXBkYXRlQ3VzdG9tZXJHcm91cCgkaW5wdXQ6IFVwZGF0ZUN1c3RvbWVyR3JvdXBJbnB1dCEpIHtcclxuICAgICAgICB1cGRhdGVDdXN0b21lckdyb3VwKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uQ3VzdG9tZXJHcm91cFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7Q1VTVE9NRVJfR1JPVVBfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgREVMRVRFX0NVU1RPTUVSX0dST1VQID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gRGVsZXRlQ3VzdG9tZXJHcm91cCgkaWQ6IElEISkge1xyXG4gICAgICAgIGRlbGV0ZUN1c3RvbWVyR3JvdXAoaWQ6ICRpZCkge1xyXG4gICAgICAgICAgICByZXN1bHRcclxuICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBERUxFVEVfQ1VTVE9NRVJfR1JPVVBTID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gRGVsZXRlQ3VzdG9tZXJHcm91cHMoJGlkczogW0lEIV0hKSB7XHJcbiAgICAgICAgZGVsZXRlQ3VzdG9tZXJHcm91cHMoaWRzOiAkaWRzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFxyXG4gICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9DVVNUT01FUl9HUk9VUFMgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRDdXN0b21lckdyb3Vwcygkb3B0aW9uczogQ3VzdG9tZXJHcm91cExpc3RPcHRpb25zKSB7XHJcbiAgICAgICAgY3VzdG9tZXJHcm91cHMob3B0aW9uczogJG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaXRlbXMge1xyXG4gICAgICAgICAgICAgICAgLi4uQ3VzdG9tZXJHcm91cFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvdGFsSXRlbXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0NVU1RPTUVSX0dST1VQX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9DVVNUT01FUl9HUk9VUF9XSVRIX0NVU1RPTUVSUyA9IGdxbGBcclxuICAgIHF1ZXJ5IEdldEN1c3RvbWVyR3JvdXBXaXRoQ3VzdG9tZXJzKCRpZDogSUQhLCAkb3B0aW9uczogQ3VzdG9tZXJMaXN0T3B0aW9ucykge1xyXG4gICAgICAgIGN1c3RvbWVyR3JvdXAoaWQ6ICRpZCkge1xyXG4gICAgICAgICAgICAuLi5DdXN0b21lckdyb3VwXHJcbiAgICAgICAgICAgIGN1c3RvbWVycyhvcHRpb25zOiAkb3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaXRlbXMge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEF0XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEF0XHJcbiAgICAgICAgICAgICAgICAgICAgZW1haWxBZGRyZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWVcclxuICAgICAgICAgICAgICAgICAgICB1c2VyIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b3RhbEl0ZW1zXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0NVU1RPTUVSX0dST1VQX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFERF9DVVNUT01FUlNfVE9fR1JPVVAgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBBZGRDdXN0b21lcnNUb0dyb3VwKCRncm91cElkOiBJRCEsICRjdXN0b21lcklkczogW0lEIV0hKSB7XHJcbiAgICAgICAgYWRkQ3VzdG9tZXJzVG9Hcm91cChjdXN0b21lckdyb3VwSWQ6ICRncm91cElkLCBjdXN0b21lcklkczogJGN1c3RvbWVySWRzKSB7XHJcbiAgICAgICAgICAgIC4uLkN1c3RvbWVyR3JvdXBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0NVU1RPTUVSX0dST1VQX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFTU9WRV9DVVNUT01FUlNfRlJPTV9HUk9VUCA9IGdxbGBcclxuICAgIG11dGF0aW9uIFJlbW92ZUN1c3RvbWVyc0Zyb21Hcm91cCgkZ3JvdXBJZDogSUQhLCAkY3VzdG9tZXJJZHM6IFtJRCFdISkge1xyXG4gICAgICAgIHJlbW92ZUN1c3RvbWVyc0Zyb21Hcm91cChjdXN0b21lckdyb3VwSWQ6ICRncm91cElkLCBjdXN0b21lcklkczogJGN1c3RvbWVySWRzKSB7XHJcbiAgICAgICAgICAgIC4uLkN1c3RvbWVyR3JvdXBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0NVU1RPTUVSX0dST1VQX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9DVVNUT01FUl9ISVNUT1JZID0gZ3FsYFxyXG4gICAgcXVlcnkgR2V0Q3VzdG9tZXJIaXN0b3J5KCRpZDogSUQhLCAkb3B0aW9uczogSGlzdG9yeUVudHJ5TGlzdE9wdGlvbnMpIHtcclxuICAgICAgICBjdXN0b21lcihpZDogJGlkKSB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGhpc3Rvcnkob3B0aW9uczogJG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsSXRlbXNcclxuICAgICAgICAgICAgICAgIGl0ZW1zIHtcclxuICAgICAgICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICAgICAgICAgICAgICBpc1B1YmxpY1xyXG4gICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0b3Ige1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFERF9OT1RFX1RPX0NVU1RPTUVSID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gQWRkTm90ZVRvQ3VzdG9tZXIoJGlucHV0OiBBZGROb3RlVG9DdXN0b21lcklucHV0ISkge1xyXG4gICAgICAgIGFkZE5vdGVUb0N1c3RvbWVyKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVVBEQVRFX0NVU1RPTUVSX05PVEUgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBVcGRhdGVDdXN0b21lck5vdGUoJGlucHV0OiBVcGRhdGVDdXN0b21lck5vdGVJbnB1dCEpIHtcclxuICAgICAgICB1cGRhdGVDdXN0b21lck5vdGUoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgICAgIGlzUHVibGljXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFTEVURV9DVVNUT01FUl9OT1RFID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gRGVsZXRlQ3VzdG9tZXJOb3RlKCRpZDogSUQhKSB7XHJcbiAgICAgICAgZGVsZXRlQ3VzdG9tZXJOb3RlKGlkOiAkaWQpIHtcclxuICAgICAgICAgICAgcmVzdWx0XHJcbiAgICAgICAgICAgIG1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcbiJdfQ==