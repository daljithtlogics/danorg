import { gql } from 'apollo-angular';
export const ROLE_FRAGMENT = gql `
    fragment Role on Role {
        id
        createdAt
        updatedAt
        code
        description
        permissions
        channels {
            id
            code
            token
        }
    }
`;
export const ADMINISTRATOR_FRAGMENT = gql `
    fragment Administrator on Administrator {
        id
        createdAt
        updatedAt
        firstName
        lastName
        emailAddress
        user {
            id
            identifier
            lastLogin
            roles {
                ...Role
            }
        }
    }
    ${ROLE_FRAGMENT}
`;
export const GET_ACTIVE_ADMINISTRATOR = gql `
    query GetActiveAdministrator {
        activeAdministrator {
            ...Administrator
        }
    }
    ${ADMINISTRATOR_FRAGMENT}
`;
export const CREATE_ADMINISTRATOR = gql `
    mutation CreateAdministrator($input: CreateAdministratorInput!) {
        createAdministrator(input: $input) {
            ...Administrator
        }
    }
    ${ADMINISTRATOR_FRAGMENT}
`;
export const UPDATE_ADMINISTRATOR = gql `
    mutation UpdateAdministrator($input: UpdateAdministratorInput!) {
        updateAdministrator(input: $input) {
            ...Administrator
        }
    }
    ${ADMINISTRATOR_FRAGMENT}
`;
export const UPDATE_ACTIVE_ADMINISTRATOR = gql `
    mutation UpdateActiveAdministrator($input: UpdateActiveAdministratorInput!) {
        updateActiveAdministrator(input: $input) {
            ...Administrator
        }
    }
    ${ADMINISTRATOR_FRAGMENT}
`;
export const DELETE_ADMINISTRATOR = gql `
    mutation DeleteAdministrator($id: ID!) {
        deleteAdministrator(id: $id) {
            result
            message
        }
    }
`;
export const DELETE_ADMINISTRATORS = gql `
    mutation DeleteAdministrators($ids: [ID!]!) {
        deleteAdministrators(ids: $ids) {
            result
            message
        }
    }
`;
export const GET_ROLES = gql `
    query GetRoles($options: RoleListOptions) {
        roles(options: $options) {
            items {
                ...Role
            }
            totalItems
        }
    }
    ${ROLE_FRAGMENT}
`;
export const CREATE_ROLE = gql `
    mutation CreateRole($input: CreateRoleInput!) {
        createRole(input: $input) {
            ...Role
        }
    }
    ${ROLE_FRAGMENT}
`;
export const UPDATE_ROLE = gql `
    mutation UpdateRole($input: UpdateRoleInput!) {
        updateRole(input: $input) {
            ...Role
        }
    }
    ${ROLE_FRAGMENT}
`;
export const DELETE_ROLE = gql `
    mutation DeleteRole($id: ID!) {
        deleteRole(id: $id) {
            result
            message
        }
    }
`;
export const DELETE_ROLES = gql `
    mutation DeleteRoles($ids: [ID!]!) {
        deleteRoles(ids: $ids) {
            result
            message
        }
    }
`;
export const ASSIGN_ROLE_TO_ADMINISTRATOR = gql `
    mutation AssignRoleToAdministrator($administratorId: ID!, $roleId: ID!) {
        assignRoleToAdministrator(administratorId: $administratorId, roleId: $roleId) {
            ...Administrator
        }
    }
    ${ADMINISTRATOR_FRAGMENT}
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW5pc3RyYXRvci1kZWZpbml0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvZGF0YS9kZWZpbml0aW9ucy9hZG1pbmlzdHJhdG9yLWRlZmluaXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7Ozs7OztDQWMvQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztNQWlCbkMsYUFBYTtDQUNsQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNckMsc0JBQXNCO0NBQzNCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU1qQyxzQkFBc0I7Q0FDM0IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQTs7Ozs7O01BTWpDLHNCQUFzQjtDQUMzQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNeEMsc0JBQXNCO0NBQzNCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPdEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU92QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7O01BU3RCLGFBQWE7Q0FDbEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUE7Ozs7OztNQU14QixhQUFhO0NBQ2xCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNeEIsYUFBYTtDQUNsQixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU83QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU85QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNekMsc0JBQXNCO0NBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBncWwgfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcblxyXG5leHBvcnQgY29uc3QgUk9MRV9GUkFHTUVOVCA9IGdxbGBcclxuICAgIGZyYWdtZW50IFJvbGUgb24gUm9sZSB7XHJcbiAgICAgICAgaWRcclxuICAgICAgICBjcmVhdGVkQXRcclxuICAgICAgICB1cGRhdGVkQXRcclxuICAgICAgICBjb2RlXHJcbiAgICAgICAgZGVzY3JpcHRpb25cclxuICAgICAgICBwZXJtaXNzaW9uc1xyXG4gICAgICAgIGNoYW5uZWxzIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgY29kZVxyXG4gICAgICAgICAgICB0b2tlblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBBRE1JTklTVFJBVE9SX0ZSQUdNRU5UID0gZ3FsYFxyXG4gICAgZnJhZ21lbnQgQWRtaW5pc3RyYXRvciBvbiBBZG1pbmlzdHJhdG9yIHtcclxuICAgICAgICBpZFxyXG4gICAgICAgIGNyZWF0ZWRBdFxyXG4gICAgICAgIHVwZGF0ZWRBdFxyXG4gICAgICAgIGZpcnN0TmFtZVxyXG4gICAgICAgIGxhc3ROYW1lXHJcbiAgICAgICAgZW1haWxBZGRyZXNzXHJcbiAgICAgICAgdXNlciB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGlkZW50aWZpZXJcclxuICAgICAgICAgICAgbGFzdExvZ2luXHJcbiAgICAgICAgICAgIHJvbGVzIHtcclxuICAgICAgICAgICAgICAgIC4uLlJvbGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7Uk9MRV9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfQUNUSVZFX0FETUlOSVNUUkFUT1IgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRBY3RpdmVBZG1pbmlzdHJhdG9yIHtcclxuICAgICAgICBhY3RpdmVBZG1pbmlzdHJhdG9yIHtcclxuICAgICAgICAgICAgLi4uQWRtaW5pc3RyYXRvclxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7QURNSU5JU1RSQVRPUl9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBDUkVBVEVfQURNSU5JU1RSQVRPUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIENyZWF0ZUFkbWluaXN0cmF0b3IoJGlucHV0OiBDcmVhdGVBZG1pbmlzdHJhdG9ySW5wdXQhKSB7XHJcbiAgICAgICAgY3JlYXRlQWRtaW5pc3RyYXRvcihpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLkFkbWluaXN0cmF0b3JcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0FETUlOSVNUUkFUT1JfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVVBEQVRFX0FETUlOSVNUUkFUT1IgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBVcGRhdGVBZG1pbmlzdHJhdG9yKCRpbnB1dDogVXBkYXRlQWRtaW5pc3RyYXRvcklucHV0ISkge1xyXG4gICAgICAgIHVwZGF0ZUFkbWluaXN0cmF0b3IoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICAuLi5BZG1pbmlzdHJhdG9yXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtBRE1JTklTVFJBVE9SX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVQREFURV9BQ1RJVkVfQURNSU5JU1RSQVRPUiA9IGdxbGBcclxuICAgIG11dGF0aW9uIFVwZGF0ZUFjdGl2ZUFkbWluaXN0cmF0b3IoJGlucHV0OiBVcGRhdGVBY3RpdmVBZG1pbmlzdHJhdG9ySW5wdXQhKSB7XHJcbiAgICAgICAgdXBkYXRlQWN0aXZlQWRtaW5pc3RyYXRvcihpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLkFkbWluaXN0cmF0b3JcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke0FETUlOSVNUUkFUT1JfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgREVMRVRFX0FETUlOSVNUUkFUT1IgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBEZWxldGVBZG1pbmlzdHJhdG9yKCRpZDogSUQhKSB7XHJcbiAgICAgICAgZGVsZXRlQWRtaW5pc3RyYXRvcihpZDogJGlkKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFxyXG4gICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFTEVURV9BRE1JTklTVFJBVE9SUyA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZUFkbWluaXN0cmF0b3JzKCRpZHM6IFtJRCFdISkge1xyXG4gICAgICAgIGRlbGV0ZUFkbWluaXN0cmF0b3JzKGlkczogJGlkcykge1xyXG4gICAgICAgICAgICByZXN1bHRcclxuICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfUk9MRVMgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRSb2xlcygkb3B0aW9uczogUm9sZUxpc3RPcHRpb25zKSB7XHJcbiAgICAgICAgcm9sZXMob3B0aW9uczogJG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaXRlbXMge1xyXG4gICAgICAgICAgICAgICAgLi4uUm9sZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvdGFsSXRlbXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAke1JPTEVfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ1JFQVRFX1JPTEUgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBDcmVhdGVSb2xlKCRpbnB1dDogQ3JlYXRlUm9sZUlucHV0ISkge1xyXG4gICAgICAgIGNyZWF0ZVJvbGUoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICAuLi5Sb2xlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtST0xFX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVQREFURV9ST0xFID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gVXBkYXRlUm9sZSgkaW5wdXQ6IFVwZGF0ZVJvbGVJbnB1dCEpIHtcclxuICAgICAgICB1cGRhdGVSb2xlKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgLi4uUm9sZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7Uk9MRV9GUkFHTUVOVH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBERUxFVEVfUk9MRSA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZVJvbGUoJGlkOiBJRCEpIHtcclxuICAgICAgICBkZWxldGVSb2xlKGlkOiAkaWQpIHtcclxuICAgICAgICAgICAgcmVzdWx0XHJcbiAgICAgICAgICAgIG1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgREVMRVRFX1JPTEVTID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gRGVsZXRlUm9sZXMoJGlkczogW0lEIV0hKSB7XHJcbiAgICAgICAgZGVsZXRlUm9sZXMoaWRzOiAkaWRzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFxyXG4gICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFTU0lHTl9ST0xFX1RPX0FETUlOSVNUUkFUT1IgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBBc3NpZ25Sb2xlVG9BZG1pbmlzdHJhdG9yKCRhZG1pbmlzdHJhdG9ySWQ6IElEISwgJHJvbGVJZDogSUQhKSB7XHJcbiAgICAgICAgYXNzaWduUm9sZVRvQWRtaW5pc3RyYXRvcihhZG1pbmlzdHJhdG9ySWQ6ICRhZG1pbmlzdHJhdG9ySWQsIHJvbGVJZDogJHJvbGVJZCkge1xyXG4gICAgICAgICAgICAuLi5BZG1pbmlzdHJhdG9yXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtBRE1JTklTVFJBVE9SX0ZSQUdNRU5UfVxyXG5gO1xyXG4iXX0=