import { gql } from 'apollo-angular';
import { CONFIGURABLE_OPERATION_DEF_FRAGMENT, CONFIGURABLE_OPERATION_FRAGMENT } from './shared-definitions';
export const SHIPPING_METHOD_FRAGMENT = gql `
    fragment ShippingMethod on ShippingMethod {
        id
        createdAt
        updatedAt
        code
        name
        description
        fulfillmentHandlerCode
        checker {
            ...ConfigurableOperation
        }
        calculator {
            ...ConfigurableOperation
        }
        translations {
            id
            languageCode
            name
            description
        }
    }
    ${CONFIGURABLE_OPERATION_FRAGMENT}
`;
export const GET_SHIPPING_METHOD_OPERATIONS = gql `
    query GetShippingMethodOperations {
        shippingEligibilityCheckers {
            ...ConfigurableOperationDef
        }
        shippingCalculators {
            ...ConfigurableOperationDef
        }
        fulfillmentHandlers {
            ...ConfigurableOperationDef
        }
    }
    ${CONFIGURABLE_OPERATION_DEF_FRAGMENT}
`;
export const CREATE_SHIPPING_METHOD = gql `
    mutation CreateShippingMethod($input: CreateShippingMethodInput!) {
        createShippingMethod(input: $input) {
            ...ShippingMethod
        }
    }
    ${SHIPPING_METHOD_FRAGMENT}
`;
export const UPDATE_SHIPPING_METHOD = gql `
    mutation UpdateShippingMethod($input: UpdateShippingMethodInput!) {
        updateShippingMethod(input: $input) {
            ...ShippingMethod
        }
    }
    ${SHIPPING_METHOD_FRAGMENT}
`;
export const DELETE_SHIPPING_METHOD = gql `
    mutation DeleteShippingMethod($id: ID!) {
        deleteShippingMethod(id: $id) {
            result
            message
        }
    }
`;
export const DELETE_SHIPPING_METHODS = gql `
    mutation DeleteShippingMethods($ids: [ID!]!) {
        deleteShippingMethods(ids: $ids) {
            result
            message
        }
    }
`;
export const TEST_SHIPPING_METHOD = gql `
    query TestShippingMethod($input: TestShippingMethodInput!) {
        testShippingMethod(input: $input) {
            eligible
            quote {
                price
                priceWithTax
                metadata
            }
        }
    }
`;
export const TEST_ELIGIBLE_SHIPPING_METHODS = gql `
    query TestEligibleShippingMethods($input: TestEligibleShippingMethodsInput!) {
        testEligibleShippingMethods(input: $input) {
            id
            name
            code
            description
            price
            priceWithTax
            metadata
        }
    }
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpcHBpbmctZGVmaW5pdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2RhdGEvZGVmaW5pdGlvbnMvc2hpcHBpbmctZGVmaW5pdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTVHLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXNCckMsK0JBQStCO0NBQ3BDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Ozs7OztNQVkzQyxtQ0FBbUM7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEdBQUcsQ0FBQTs7Ozs7O01BTW5DLHdCQUF3QjtDQUM3QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7TUFNbkMsd0JBQXdCO0NBQzdCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU96QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7OztDQVd0QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7Ozs7Ozs7Q0FZaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdxbCB9IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcclxuXHJcbmltcG9ydCB7IENPTkZJR1VSQUJMRV9PUEVSQVRJT05fREVGX0ZSQUdNRU5ULCBDT05GSUdVUkFCTEVfT1BFUkFUSU9OX0ZSQUdNRU5UIH0gZnJvbSAnLi9zaGFyZWQtZGVmaW5pdGlvbnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNISVBQSU5HX01FVEhPRF9GUkFHTUVOVCA9IGdxbGBcclxuICAgIGZyYWdtZW50IFNoaXBwaW5nTWV0aG9kIG9uIFNoaXBwaW5nTWV0aG9kIHtcclxuICAgICAgICBpZFxyXG4gICAgICAgIGNyZWF0ZWRBdFxyXG4gICAgICAgIHVwZGF0ZWRBdFxyXG4gICAgICAgIGNvZGVcclxuICAgICAgICBuYW1lXHJcbiAgICAgICAgZGVzY3JpcHRpb25cclxuICAgICAgICBmdWxmaWxsbWVudEhhbmRsZXJDb2RlXHJcbiAgICAgICAgY2hlY2tlciB7XHJcbiAgICAgICAgICAgIC4uLkNvbmZpZ3VyYWJsZU9wZXJhdGlvblxyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxjdWxhdG9yIHtcclxuICAgICAgICAgICAgLi4uQ29uZmlndXJhYmxlT3BlcmF0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyYW5zbGF0aW9ucyB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGxhbmd1YWdlQ29kZVxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtDT05GSUdVUkFCTEVfT1BFUkFUSU9OX0ZSQUdNRU5UfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9TSElQUElOR19NRVRIT0RfT1BFUkFUSU9OUyA9IGdxbGBcclxuICAgIHF1ZXJ5IEdldFNoaXBwaW5nTWV0aG9kT3BlcmF0aW9ucyB7XHJcbiAgICAgICAgc2hpcHBpbmdFbGlnaWJpbGl0eUNoZWNrZXJzIHtcclxuICAgICAgICAgICAgLi4uQ29uZmlndXJhYmxlT3BlcmF0aW9uRGVmXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNoaXBwaW5nQ2FsY3VsYXRvcnMge1xyXG4gICAgICAgICAgICAuLi5Db25maWd1cmFibGVPcGVyYXRpb25EZWZcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVsZmlsbG1lbnRIYW5kbGVycyB7XHJcbiAgICAgICAgICAgIC4uLkNvbmZpZ3VyYWJsZU9wZXJhdGlvbkRlZlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICR7Q09ORklHVVJBQkxFX09QRVJBVElPTl9ERUZfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgQ1JFQVRFX1NISVBQSU5HX01FVEhPRCA9IGdxbGBcclxuICAgIG11dGF0aW9uIENyZWF0ZVNoaXBwaW5nTWV0aG9kKCRpbnB1dDogQ3JlYXRlU2hpcHBpbmdNZXRob2RJbnB1dCEpIHtcclxuICAgICAgICBjcmVhdGVTaGlwcGluZ01ldGhvZChpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLlNoaXBwaW5nTWV0aG9kXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtTSElQUElOR19NRVRIT0RfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgVVBEQVRFX1NISVBQSU5HX01FVEhPRCA9IGdxbGBcclxuICAgIG11dGF0aW9uIFVwZGF0ZVNoaXBwaW5nTWV0aG9kKCRpbnB1dDogVXBkYXRlU2hpcHBpbmdNZXRob2RJbnB1dCEpIHtcclxuICAgICAgICB1cGRhdGVTaGlwcGluZ01ldGhvZChpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIC4uLlNoaXBwaW5nTWV0aG9kXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtTSElQUElOR19NRVRIT0RfRlJBR01FTlR9XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgREVMRVRFX1NISVBQSU5HX01FVEhPRCA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZVNoaXBwaW5nTWV0aG9kKCRpZDogSUQhKSB7XHJcbiAgICAgICAgZGVsZXRlU2hpcHBpbmdNZXRob2QoaWQ6ICRpZCkge1xyXG4gICAgICAgICAgICByZXN1bHRcclxuICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBERUxFVEVfU0hJUFBJTkdfTUVUSE9EUyA9IGdxbGBcclxuICAgIG11dGF0aW9uIERlbGV0ZVNoaXBwaW5nTWV0aG9kcygkaWRzOiBbSUQhXSEpIHtcclxuICAgICAgICBkZWxldGVTaGlwcGluZ01ldGhvZHMoaWRzOiAkaWRzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFxyXG4gICAgICAgICAgICBtZXNzYWdlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRFU1RfU0hJUFBJTkdfTUVUSE9EID0gZ3FsYFxyXG4gICAgcXVlcnkgVGVzdFNoaXBwaW5nTWV0aG9kKCRpbnB1dDogVGVzdFNoaXBwaW5nTWV0aG9kSW5wdXQhKSB7XHJcbiAgICAgICAgdGVzdFNoaXBwaW5nTWV0aG9kKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgZWxpZ2libGVcclxuICAgICAgICAgICAgcXVvdGUge1xyXG4gICAgICAgICAgICAgICAgcHJpY2VcclxuICAgICAgICAgICAgICAgIHByaWNlV2l0aFRheFxyXG4gICAgICAgICAgICAgICAgbWV0YWRhdGFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBURVNUX0VMSUdJQkxFX1NISVBQSU5HX01FVEhPRFMgPSBncWxgXHJcbiAgICBxdWVyeSBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHMoJGlucHV0OiBUZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHNJbnB1dCEpIHtcclxuICAgICAgICB0ZXN0RWxpZ2libGVTaGlwcGluZ01ldGhvZHMoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgICAgIGNvZGVcclxuICAgICAgICAgICAgZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgcHJpY2VcclxuICAgICAgICAgICAgcHJpY2VXaXRoVGF4XHJcbiAgICAgICAgICAgIG1ldGFkYXRhXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG4iXX0=