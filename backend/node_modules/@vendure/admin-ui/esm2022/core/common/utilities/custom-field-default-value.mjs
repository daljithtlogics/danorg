import { assertNever } from '@vendure/common/lib/shared-utils';
export function getCustomFieldsDefaults(customFieldConfig) {
    return customFieldConfig.reduce((hash, field) => ({
        ...hash,
        [field.name]: getDefaultValue(field.type, field.nullable ?? undefined),
    }), {});
}
export function getDefaultValue(type, isNullable) {
    switch (type) {
        case 'localeString':
        case 'string':
        case 'text':
        case 'localeText':
            return isNullable ? null : '';
        case 'boolean':
            return isNullable ? null : false;
        case 'float':
        case 'int':
            return isNullable ? null : 0;
        case 'datetime':
            return isNullable ? null : new Date();
        case 'relation':
            return null;
        default:
            assertNever(type);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWZpZWxkLWRlZmF1bHQtdmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2NvbW1vbi91dGlsaXRpZXMvY3VzdG9tLWZpZWxkLWRlZmF1bHQtdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRy9ELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxpQkFBc0M7SUFHMUUsT0FBTyxpQkFBaUIsQ0FBQyxNQUFNLENBQzNCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNkLEdBQUcsSUFBSTtRQUNQLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFBdUIsRUFBRSxLQUFLLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQztLQUM1RixDQUFDLEVBQ0YsRUFBRSxDQUNMLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxJQUFxQixFQUFFLFVBQW9CO0lBQ3ZFLFFBQVEsSUFBSSxFQUFFO1FBQ1YsS0FBSyxjQUFjLENBQUM7UUFDcEIsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssWUFBWTtZQUNiLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNsQyxLQUFLLFNBQVM7WUFDVixPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDckMsS0FBSyxPQUFPLENBQUM7UUFDYixLQUFLLEtBQUs7WUFDTixPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsS0FBSyxVQUFVO1lBQ1gsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQyxLQUFLLFVBQVU7WUFDWCxPQUFPLElBQUksQ0FBQztRQUNoQjtZQUNJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdXN0b21GaWVsZFR5cGUgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC10eXBlcyc7XHJcbmltcG9ydCB7IGFzc2VydE5ldmVyIH0gZnJvbSAnQHZlbmR1cmUvY29tbW9uL2xpYi9zaGFyZWQtdXRpbHMnO1xyXG5pbXBvcnQgeyBDdXN0b21GaWVsZENvbmZpZyB9IGZyb20gJy4uL2dlbmVyYXRlZC10eXBlcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VzdG9tRmllbGRzRGVmYXVsdHMoY3VzdG9tRmllbGRDb25maWc6IEN1c3RvbUZpZWxkQ29uZmlnW10pOiB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXREZWZhdWx0VmFsdWU+O1xyXG59IHtcclxuICAgIHJldHVybiBjdXN0b21GaWVsZENvbmZpZy5yZWR1Y2UoXHJcbiAgICAgICAgKGhhc2gsIGZpZWxkKSA9PiAoe1xyXG4gICAgICAgICAgICAuLi5oYXNoLFxyXG4gICAgICAgICAgICBbZmllbGQubmFtZV06IGdldERlZmF1bHRWYWx1ZShmaWVsZC50eXBlIGFzIEN1c3RvbUZpZWxkVHlwZSwgZmllbGQubnVsbGFibGUgPz8gdW5kZWZpbmVkKSxcclxuICAgICAgICB9KSxcclxuICAgICAgICB7fSxcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUodHlwZTogQ3VzdG9tRmllbGRUeXBlLCBpc051bGxhYmxlPzogYm9vbGVhbikge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnbG9jYWxlU3RyaW5nJzpcclxuICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgIGNhc2UgJ2xvY2FsZVRleHQnOlxyXG4gICAgICAgICAgICByZXR1cm4gaXNOdWxsYWJsZSA/IG51bGwgOiAnJztcclxuICAgICAgICBjYXNlICdib29sZWFuJzpcclxuICAgICAgICAgICAgcmV0dXJuIGlzTnVsbGFibGUgPyBudWxsIDogZmFsc2U7XHJcbiAgICAgICAgY2FzZSAnZmxvYXQnOlxyXG4gICAgICAgIGNhc2UgJ2ludCc6XHJcbiAgICAgICAgICAgIHJldHVybiBpc051bGxhYmxlID8gbnVsbCA6IDA7XHJcbiAgICAgICAgY2FzZSAnZGF0ZXRpbWUnOlxyXG4gICAgICAgICAgICByZXR1cm4gaXNOdWxsYWJsZSA/IG51bGwgOiBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNhc2UgJ3JlbGF0aW9uJzpcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYXNzZXJ0TmV2ZXIodHlwZSk7XHJcbiAgICB9XHJcbn1cclxuIl19