import { DestroyRef, Directive, inject } from '@angular/core';
import { FormControl } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { BehaviorSubject, combineLatest, merge, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, shareReplay, takeUntil, tap } from 'rxjs/operators';
import { DataService } from '../data/providers/data.service';
import { ServerConfigService } from '../data/server-config';
import { DataTableFilterCollection } from '../providers/data-table/data-table-filter-collection';
import { DataTableSortCollection } from '../providers/data-table/data-table-sort-collection';
import { SelectionManager } from './utilities/selection-manager';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * @description
 * This is a base class which implements the logic required to fetch and manipulate
 * a list of data from a query which returns a PaginatedList type.
 *
 * It is normally used in combination with the {@link DataTable2Component}.
 *
 * @docsCategory list-detail-views
 */
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class BaseListComponent {
    constructor(router, route) {
        this.router = router;
        this.route = route;
        this.searchTermControl = new FormControl('');
        this.selectionManager = new SelectionManager({
            multiSelect: true,
            itemsAreEqual: (a, b) => a.id === b.id,
            additiveMode: true,
        });
        this.destroy$ = new Subject();
        this.onPageChangeFn = (skip, take) => ({ options: { skip, take } });
        this.refresh$ = new BehaviorSubject(undefined);
        this.defaults = { take: 10, skip: 0 };
    }
    /**
     * @description
     * Sets the fetch function for the list being implemented.
     */
    setQueryFn(listQueryFn, mappingFn, onPageChangeFn, defaults) {
        this.listQueryFn = listQueryFn;
        this.mappingFn = mappingFn;
        if (onPageChangeFn) {
            this.onPageChangeFn = onPageChangeFn;
        }
        if (defaults) {
            this.defaults = defaults;
        }
    }
    /** @internal */
    ngOnInit() {
        if (!this.listQueryFn) {
            throw new Error(`No listQueryFn has been defined. Please call super.setQueryFn() in the constructor.`);
        }
        this.listQuery = this.listQueryFn(this.defaults.take, this.defaults.skip);
        const fetchPage = ([currentPage, itemsPerPage, _]) => {
            const take = itemsPerPage;
            const skip = (currentPage - 1) * itemsPerPage;
            this.listQuery.ref.refetch(this.onPageChangeFn(skip, take));
        };
        this.result$ = this.listQuery.stream$.pipe(shareReplay(1));
        this.items$ = this.result$.pipe(map(data => this.mappingFn(data).items));
        this.totalItems$ = this.result$.pipe(map(data => this.mappingFn(data).totalItems));
        this.currentPage$ = this.route.queryParamMap.pipe(map(qpm => qpm.get('page')), map(page => (!page ? 1 : +page)), distinctUntilChanged());
        this.itemsPerPage$ = this.route.queryParamMap.pipe(map(qpm => qpm.get('perPage')), map(perPage => (!perPage ? this.defaults.take : +perPage)), distinctUntilChanged());
        combineLatest(this.currentPage$, this.itemsPerPage$, this.refresh$)
            .pipe(takeUntil(this.destroy$))
            .subscribe(fetchPage);
    }
    /**
     * @description
     * Accepts a list of Observables which will trigger a refresh of the list when any of them emit.
     */
    refreshListOnChanges(...streams) {
        const searchTerm$ = this.searchTermControl.valueChanges.pipe(filter(value => value !== null && (2 < value.length || value.length === 0)), debounceTime(250), tap(() => this.setPageNumber(1)));
        merge(searchTerm$, ...streams)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.refresh$.next(undefined));
    }
    /** @internal */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.listQuery.completed$.next();
    }
    /**
     * @description
     * Sets the current page number in the url.
     */
    setPageNumber(page) {
        this.setQueryParam('page', page, { replaceUrl: true });
    }
    /**
     * @description
     * Sets the number of items per page in the url.
     */
    setItemsPerPage(perPage) {
        this.setQueryParam('perPage', perPage, { replaceUrl: true });
    }
    /**
     * @description
     * Re-fetch the current page of results.
     */
    refresh() {
        this.refresh$.next(undefined);
    }
    setQueryParam(keyOrHash, valueOrOptions, maybeOptions) {
        const paramsObject = typeof keyOrHash === 'string' ? { [keyOrHash]: valueOrOptions } : keyOrHash;
        const options = (typeof keyOrHash === 'string' ? maybeOptions : valueOrOptions) ?? {};
        this.router.navigate(['./'], {
            queryParams: typeof keyOrHash === 'string' ? { [keyOrHash]: valueOrOptions } : keyOrHash,
            relativeTo: this.route,
            queryParamsHandling: 'merge',
            ...options,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BaseListComponent, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.2", type: BaseListComponent, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BaseListComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }]; } });
/**
 * @description
 * A version of the {@link BaseListComponent} which is designed to be used with a
 * [TypedDocumentNode](https://the-guild.dev/graphql/codegen/plugins/typescript/typed-document-node).
 *
 * @docsCategory list-detail-views
 */
export class TypedBaseListComponent extends BaseListComponent {
    constructor() {
        super(inject(Router), inject(ActivatedRoute));
        this.dataService = inject(DataService);
        this.router = inject(Router);
        this.serverConfigService = inject(ServerConfigService);
        this.refreshStreams = [];
        this.collections = [];
        const destroyRef = inject(DestroyRef);
        destroyRef.onDestroy(() => {
            this.collections.forEach(c => c.destroy());
        });
    }
    configure(config) {
        super.setQueryFn((args) => this.dataService.query(config.document).refetchOnChannelChange(), data => config.getItems(data), (skip, take) => config.setVariables?.(skip, take) ?? {});
        this.availableLanguages$ = this.serverConfigService.getAvailableLanguages();
        this.contentLanguage$ = this.dataService.client
            .uiState()
            .mapStream(({ uiState }) => uiState.contentLanguage)
            .pipe(tap(() => this.refresh()));
        this.refreshStreams = config.refreshListOnChanges ?? [];
    }
    ngOnInit() {
        super.ngOnInit();
        super.refreshListOnChanges(this.contentLanguage$, ...this.refreshStreams);
    }
    createFilterCollection() {
        const collection = new DataTableFilterCollection(this.router);
        this.collections.push(collection);
        return collection;
    }
    createSortCollection() {
        const collection = new DataTableSortCollection(this.router);
        this.collections.push(collection);
        return collection;
    }
    setLanguage(code) {
        this.dataService.client.setContentLanguage(code).subscribe();
    }
    getCustomFieldConfig(key) {
        return this.serverConfigService.getCustomFieldsFor(key);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: TypedBaseListComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.2", type: TypedBaseListComponent, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: TypedBaseListComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,