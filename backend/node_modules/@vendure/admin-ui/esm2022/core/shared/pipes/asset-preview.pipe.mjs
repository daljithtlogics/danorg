import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @description
 * Given an Asset object (an object with `preview` and optionally `focalPoint` properties), this pipe
 * returns a string with query parameters designed to work with the image resize capabilities of the
 * AssetServerPlugin.
 *
 * @example
 * ```HTML
 * <img [src]="asset | assetPreview:'tiny'" />
 * <img [src]="asset | assetPreview:150" />
 * ```
 *
 * @docsCategory pipes
 */
export class AssetPreviewPipe {
    transform(asset, preset = 'thumb') {
        if (!asset) {
            return '';
        }
        if (asset.preview == null || typeof asset.preview !== 'string') {
            throw new Error(`Expected an Asset, got ${JSON.stringify(asset)}`);
        }
        const fp = asset.focalPoint ? `&fpx=${asset.focalPoint.x}&fpy=${asset.focalPoint.y}` : '';
        if (Number.isNaN(Number(preset))) {
            return `${asset.preview}?preset=${preset}${fp}`;
        }
        else {
            return `${asset.preview}?w=${preset}&h=${preset}${fp}`;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AssetPreviewPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.2", ngImport: i0, type: AssetPreviewPipe, name: "assetPreview" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AssetPreviewPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'assetPreview',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcHJldmlldy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvcGlwZXMvYXNzZXQtcHJldmlldy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOztBQUlwRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtJQUN6QixTQUFTLENBQUMsS0FBcUIsRUFBRSxTQUEwQixPQUFPO1FBQzlELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLElBQUksSUFBSSxPQUFPLEtBQUssQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQzVELE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDMUYsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO1lBQzlCLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxXQUFXLE1BQU0sR0FBRyxFQUFFLEVBQUUsQ0FBQztTQUNuRDthQUFNO1lBQ0gsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLE1BQU0sTUFBTSxNQUFNLE1BQU0sR0FBRyxFQUFFLEVBQUUsQ0FBQztTQUMxRDtJQUNMLENBQUM7OEdBZFEsZ0JBQWdCOzRHQUFoQixnQkFBZ0I7OzJGQUFoQixnQkFBZ0I7a0JBSDVCLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLGNBQWM7aUJBQ3ZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgQXNzZXRGcmFnbWVudCB9IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBHaXZlbiBhbiBBc3NldCBvYmplY3QgKGFuIG9iamVjdCB3aXRoIGBwcmV2aWV3YCBhbmQgb3B0aW9uYWxseSBgZm9jYWxQb2ludGAgcHJvcGVydGllcyksIHRoaXMgcGlwZVxyXG4gKiByZXR1cm5zIGEgc3RyaW5nIHdpdGggcXVlcnkgcGFyYW1ldGVycyBkZXNpZ25lZCB0byB3b3JrIHdpdGggdGhlIGltYWdlIHJlc2l6ZSBjYXBhYmlsaXRpZXMgb2YgdGhlXHJcbiAqIEFzc2V0U2VydmVyUGx1Z2luLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBIVE1MXHJcbiAqIDxpbWcgW3NyY109XCJhc3NldCB8IGFzc2V0UHJldmlldzondGlueSdcIiAvPlxyXG4gKiA8aW1nIFtzcmNdPVwiYXNzZXQgfCBhc3NldFByZXZpZXc6MTUwXCIgLz5cclxuICogYGBgXHJcbiAqXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgcGlwZXNcclxuICovXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdhc3NldFByZXZpZXcnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXNzZXRQcmV2aWV3UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKGFzc2V0PzogQXNzZXRGcmFnbWVudCwgcHJlc2V0OiBzdHJpbmcgfCBudW1iZXIgPSAndGh1bWInKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIWFzc2V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFzc2V0LnByZXZpZXcgPT0gbnVsbCB8fCB0eXBlb2YgYXNzZXQucHJldmlldyAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhbiBBc3NldCwgZ290ICR7SlNPTi5zdHJpbmdpZnkoYXNzZXQpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmcCA9IGFzc2V0LmZvY2FsUG9pbnQgPyBgJmZweD0ke2Fzc2V0LmZvY2FsUG9pbnQueH0mZnB5PSR7YXNzZXQuZm9jYWxQb2ludC55fWAgOiAnJztcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKE51bWJlcihwcmVzZXQpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7YXNzZXQucHJldmlld30/cHJlc2V0PSR7cHJlc2V0fSR7ZnB9YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7YXNzZXQucHJldmlld30/dz0ke3ByZXNldH0maD0ke3ByZXNldH0ke2ZwfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==