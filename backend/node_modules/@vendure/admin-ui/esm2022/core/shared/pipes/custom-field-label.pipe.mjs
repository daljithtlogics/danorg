import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Displays a localized label for a CustomField or StringFieldOption, falling back to the
 * name/value if none are defined.
 */
export class CustomFieldLabelPipe {
    transform(value, uiLanguageCode) {
        if (!value) {
            return value;
        }
        if (Array.isArray(value)) {
            const match = value.find(l => l.languageCode === uiLanguageCode);
            return match ? match.value : value[0].value;
        }
        const { label } = value;
        const name = this.isCustomFieldConfig(value) ? value.name : value.value;
        if (label) {
            const match = label.find(l => l.languageCode === uiLanguageCode);
            return match ? match.value : label[0].value;
        }
        else {
            return name;
        }
    }
    isCustomFieldConfig(input) {
        return input.hasOwnProperty('name');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: CustomFieldLabelPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.2", ngImport: i0, type: CustomFieldLabelPipe, name: "customFieldLabel" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: CustomFieldLabelPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'customFieldLabel',
                    pure: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWZpZWxkLWxhYmVsLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9waXBlcy9jdXN0b20tZmllbGQtbGFiZWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFTcEQ7OztHQUdHO0FBS0gsTUFBTSxPQUFPLG9CQUFvQjtJQUM3QixTQUFTLENBQ0wsS0FBZ0UsRUFDaEUsY0FBbUM7UUFFbkMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxLQUFLLGNBQWMsQ0FBQyxDQUFDO1lBQ2pFLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQy9DO1FBQ0QsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQztRQUN4QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDeEUsSUFBSSxLQUFLLEVBQUU7WUFDUCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNqRSxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUMvQzthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxLQUFVO1FBQ2xDLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDOzhHQXhCUSxvQkFBb0I7NEdBQXBCLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFKaEMsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsa0JBQWtCO29CQUN4QixJQUFJLEVBQUUsSUFBSTtpQkFDYiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICBDdXN0b21GaWVsZENvbmZpZyxcclxuICAgIExhbmd1YWdlQ29kZSxcclxuICAgIExvY2FsaXplZFN0cmluZyxcclxuICAgIFN0cmluZ0ZpZWxkT3B0aW9uLFxyXG59IGZyb20gJy4uLy4uL2NvbW1vbi9nZW5lcmF0ZWQtdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIERpc3BsYXlzIGEgbG9jYWxpemVkIGxhYmVsIGZvciBhIEN1c3RvbUZpZWxkIG9yIFN0cmluZ0ZpZWxkT3B0aW9uLCBmYWxsaW5nIGJhY2sgdG8gdGhlXHJcbiAqIG5hbWUvdmFsdWUgaWYgbm9uZSBhcmUgZGVmaW5lZC5cclxuICovXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdjdXN0b21GaWVsZExhYmVsJyxcclxuICAgIHB1cmU6IHRydWUsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21GaWVsZExhYmVsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKFxyXG4gICAgICAgIHZhbHVlOiBDdXN0b21GaWVsZENvbmZpZyB8IFN0cmluZ0ZpZWxkT3B0aW9uIHwgTG9jYWxpemVkU3RyaW5nW10sXHJcbiAgICAgICAgdWlMYW5ndWFnZUNvZGU6IExhbmd1YWdlQ29kZSB8IG51bGwsXHJcbiAgICApOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB2YWx1ZS5maW5kKGwgPT4gbC5sYW5ndWFnZUNvZGUgPT09IHVpTGFuZ3VhZ2VDb2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2gudmFsdWUgOiB2YWx1ZVswXS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyBsYWJlbCB9ID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuaXNDdXN0b21GaWVsZENvbmZpZyh2YWx1ZSkgPyB2YWx1ZS5uYW1lIDogdmFsdWUudmFsdWU7XHJcbiAgICAgICAgaWYgKGxhYmVsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGFiZWwuZmluZChsID0+IGwubGFuZ3VhZ2VDb2RlID09PSB1aUxhbmd1YWdlQ29kZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoLnZhbHVlIDogbGFiZWxbMF0udmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNDdXN0b21GaWVsZENvbmZpZyhpbnB1dDogYW55KTogaW5wdXQgaXMgQ3VzdG9tRmllbGRDb25maWcge1xyXG4gICAgICAgIHJldHVybiBpbnB1dC5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==