import { Pipe } from '@angular/core';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import * as i0 from "@angular/core";
export class StateI18nTokenPipe {
    constructor() {
        this.stateI18nTokens = {
            Created: _('state.created'),
            Draft: _('state.draft'),
            AddingItems: _('state.adding-items'),
            ArrangingPayment: _('state.arranging-payment'),
            PaymentAuthorized: _('state.payment-authorized'),
            PaymentSettled: _('state.payment-settled'),
            PartiallyShipped: _('state.partially-shipped'),
            Shipped: _('state.shipped'),
            PartiallyDelivered: _('state.partially-delivered'),
            Authorized: _('state.authorized'),
            Delivered: _('state.delivered'),
            Cancelled: _('state.cancelled'),
            Pending: _('state.pending'),
            Settled: _('state.settled'),
            Failed: _('state.failed'),
            Error: _('state.error'),
            Declined: _('state.declined'),
            Modifying: _('state.modifying'),
            ArrangingAdditionalPayment: _('state.arranging-additional-payment'),
        };
    }
    transform(value) {
        if (typeof value === 'string' && value.length) {
            const defaultStateToken = this.stateI18nTokens[value];
            if (defaultStateToken) {
                return defaultStateToken;
            }
            return getOrderStateTranslationToken(value);
        }
        return value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: StateI18nTokenPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.2", ngImport: i0, type: StateI18nTokenPipe, name: "stateI18nToken" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: StateI18nTokenPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'stateI18nToken',
                }]
        }] });
export function getOrderStateTranslationToken(state) {
    return ('state.' +
        state
            .replace(/([a-z])([A-Z])/g, '$1-$2')
            .replace(/ +/g, '-')
            .toLowerCase());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtaTE4bi10b2tlbi5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9zaGFyZWQvcGlwZXMvc3RhdGUtaTE4bi10b2tlbi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7O0FBS3RFLE1BQU0sT0FBTyxrQkFBa0I7SUFIL0I7UUFJcUIsb0JBQWUsR0FBRztZQUMvQixPQUFPLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQztZQUMzQixLQUFLLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUN2QixXQUFXLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO1lBQ3BDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQztZQUM5QyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsMEJBQTBCLENBQUM7WUFDaEQsY0FBYyxFQUFFLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQztZQUMxQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMseUJBQXlCLENBQUM7WUFDOUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUM7WUFDM0Isa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLDJCQUEyQixDQUFDO1lBQ2xELFVBQVUsRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUM7WUFDakMsU0FBUyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztZQUMvQixTQUFTLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1lBQy9CLE9BQU8sRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQzNCLE9BQU8sRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDO1lBQzNCLE1BQU0sRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDO1lBQ3pCLEtBQUssRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQ3ZCLFFBQVEsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUM7WUFDN0IsU0FBUyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztZQUMvQiwwQkFBMEIsRUFBRSxDQUFDLENBQUMsb0NBQW9DLENBQUM7U0FDdEUsQ0FBQztLQVdMO0lBVkcsU0FBUyxDQUFJLEtBQVE7UUFDakIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUMzQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBWSxDQUFDLENBQUM7WUFDN0QsSUFBSSxpQkFBaUIsRUFBRTtnQkFDbkIsT0FBTyxpQkFBaUIsQ0FBQzthQUM1QjtZQUNELE9BQU8sNkJBQTZCLENBQUMsS0FBZSxDQUFNLENBQUM7U0FDOUQ7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzhHQS9CUSxrQkFBa0I7NEdBQWxCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFIOUIsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsZ0JBQWdCO2lCQUN6Qjs7QUFtQ0QsTUFBTSxVQUFVLDZCQUE2QixDQUFDLEtBQWE7SUFDdkQsT0FBTyxDQUNILFFBQVE7UUFDUixLQUFLO2FBQ0EsT0FBTyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQzthQUNuQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQzthQUNuQixXQUFXLEVBQUUsQ0FDckIsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtYXJrZXIgYXMgXyB9IGZyb20gJ0BiaWVzYmplcmcvbmd4LXRyYW5zbGF0ZS1leHRyYWN0LW1hcmtlcic7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnc3RhdGVJMThuVG9rZW4nLFxufSlcbmV4cG9ydCBjbGFzcyBTdGF0ZUkxOG5Ub2tlblBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXRlSTE4blRva2VucyA9IHtcbiAgICAgICAgQ3JlYXRlZDogXygnc3RhdGUuY3JlYXRlZCcpLFxuICAgICAgICBEcmFmdDogXygnc3RhdGUuZHJhZnQnKSxcbiAgICAgICAgQWRkaW5nSXRlbXM6IF8oJ3N0YXRlLmFkZGluZy1pdGVtcycpLFxuICAgICAgICBBcnJhbmdpbmdQYXltZW50OiBfKCdzdGF0ZS5hcnJhbmdpbmctcGF5bWVudCcpLFxuICAgICAgICBQYXltZW50QXV0aG9yaXplZDogXygnc3RhdGUucGF5bWVudC1hdXRob3JpemVkJyksXG4gICAgICAgIFBheW1lbnRTZXR0bGVkOiBfKCdzdGF0ZS5wYXltZW50LXNldHRsZWQnKSxcbiAgICAgICAgUGFydGlhbGx5U2hpcHBlZDogXygnc3RhdGUucGFydGlhbGx5LXNoaXBwZWQnKSxcbiAgICAgICAgU2hpcHBlZDogXygnc3RhdGUuc2hpcHBlZCcpLFxuICAgICAgICBQYXJ0aWFsbHlEZWxpdmVyZWQ6IF8oJ3N0YXRlLnBhcnRpYWxseS1kZWxpdmVyZWQnKSxcbiAgICAgICAgQXV0aG9yaXplZDogXygnc3RhdGUuYXV0aG9yaXplZCcpLFxuICAgICAgICBEZWxpdmVyZWQ6IF8oJ3N0YXRlLmRlbGl2ZXJlZCcpLFxuICAgICAgICBDYW5jZWxsZWQ6IF8oJ3N0YXRlLmNhbmNlbGxlZCcpLFxuICAgICAgICBQZW5kaW5nOiBfKCdzdGF0ZS5wZW5kaW5nJyksXG4gICAgICAgIFNldHRsZWQ6IF8oJ3N0YXRlLnNldHRsZWQnKSxcbiAgICAgICAgRmFpbGVkOiBfKCdzdGF0ZS5mYWlsZWQnKSxcbiAgICAgICAgRXJyb3I6IF8oJ3N0YXRlLmVycm9yJyksXG4gICAgICAgIERlY2xpbmVkOiBfKCdzdGF0ZS5kZWNsaW5lZCcpLFxuICAgICAgICBNb2RpZnlpbmc6IF8oJ3N0YXRlLm1vZGlmeWluZycpLFxuICAgICAgICBBcnJhbmdpbmdBZGRpdGlvbmFsUGF5bWVudDogXygnc3RhdGUuYXJyYW5naW5nLWFkZGl0aW9uYWwtcGF5bWVudCcpLFxuICAgIH07XG4gICAgdHJhbnNmb3JtPFQ+KHZhbHVlOiBUKTogVCB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFN0YXRlVG9rZW4gPSB0aGlzLnN0YXRlSTE4blRva2Vuc1t2YWx1ZSBhcyBhbnldO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRTdGF0ZVRva2VuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRTdGF0ZVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdldE9yZGVyU3RhdGVUcmFuc2xhdGlvblRva2VuKHZhbHVlIGFzIHN0cmluZykgYXMgVDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3JkZXJTdGF0ZVRyYW5zbGF0aW9uVG9rZW4oc3RhdGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgJ3N0YXRlLicgK1xuICAgICAgICBzdGF0ZVxuICAgICAgICAgICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpXG4gICAgICAgICAgICAucmVwbGFjZSgvICsvZywgJy0nKVxuICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICApO1xufVxuIl19