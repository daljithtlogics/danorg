import { ChangeDetectionStrategy, Component, HostBinding, Input, } from '@angular/core';
import { assertNever } from '@vendure/common/lib/shared-utils';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../providers/nav-builder/nav-builder.service";
import * as i2 from "@angular/router";
import * as i3 from "../../../data/providers/data.service";
import * as i4 from "../../../providers/notification/notification.service";
import * as i5 from "@clr/angular";
import * as i6 from "@angular/common";
import * as i7 from "../../directives/if-permissions.directive";
import * as i8 from "../ui-extension-point/ui-extension-point.component";
import * as i9 from "@ngx-translate/core";
export class ActionBarItemsComponent {
    constructor(navBuilderService, route, dataService, notificationService, injector) {
        this.navBuilderService = navBuilderService;
        this.route = route;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.injector = injector;
        this.buttonStates = {};
        this.locationId$ = new BehaviorSubject('');
    }
    ngOnInit() {
        this.items$ = combineLatest(this.navBuilderService.actionBarConfig$, this.locationId$).pipe(map(([items, locationId]) => items.filter(config => config.locationId === locationId)), tap(items => {
            const context = this.createContext();
            for (const item of items) {
                const buttonState$ = typeof item.buttonState === 'function'
                    ? item.buttonState(context)
                    : of({
                        disabled: false,
                        visible: true,
                    });
                this.buttonStates[item.id] = buttonState$;
            }
        }));
    }
    ngOnChanges(changes) {
        if ('locationId' in changes) {
            this.locationId$.next(changes['locationId'].currentValue);
        }
    }
    handleClick(event, item) {
        if (typeof item.onClick === 'function') {
            item.onClick(event, this.createContext());
        }
    }
    getRouterLink(item) {
        return this.navBuilderService.getRouterLink({ routerLink: item.routerLink, context: this.createContext() }, this.route);
    }
    getButtonStyles(item) {
        const styles = ['button'];
        if (item.buttonStyle && item.buttonStyle === 'link') {
            styles.push('btn-link');
            return styles;
        }
        styles.push(this.getButtonColorClass(item));
        return styles;
    }
    getButtonColorClass(item) {
        switch (item.buttonColor) {
            case undefined:
                return '';
            case 'primary':
                return item.buttonStyle === 'outline' ? 'btn-outline' : 'primary';
            case 'success':
                return item.buttonStyle === 'outline' ? 'btn-success-outline' : 'success';
            case 'warning':
                return item.buttonStyle === 'outline' ? 'btn-warning-outline' : 'warning';
            default:
                assertNever(item.buttonColor);
                return '';
        }
    }
    createContext() {
        return {
            route: this.route,
            injector: this.injector,
            dataService: this.dataService,
            notificationService: this.notificationService,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ActionBarItemsComponent, deps: [{ token: i1.NavBuilderService }, { token: i2.ActivatedRoute }, { token: i3.DataService }, { token: i4.NotificationService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: ActionBarItemsComponent, selector: "vdr-action-bar-items", inputs: { locationId: "locationId" }, host: { properties: { "attr.data-location-id": "this.locationId" } }, usesOnChanges: true, ngImport: i0, template: "<vdr-ui-extension-point [locationId]=\"locationId\" api=\"actionBar\" [leftPx]=\"-24\">\r\n    <ng-container *ngFor=\"let item of items$ | async\">\r\n        <ng-container *ngIf=\"buttonStates[item.id] | async as buttonState\">\r\n            <button\r\n                *vdrIfPermissions=\"item.requiresPermission\"\r\n                [routerLink]=\"getRouterLink(item)\"\r\n                [class.hidden]=\"buttonState.visible === false\"\r\n                [disabled]=\"buttonState.disabled || (item.disabled ? (item.disabled | async) : false)\"\r\n                (click)=\"handleClick($event, item)\"\r\n                [ngClass]=\"getButtonStyles(item)\"\r\n                class=\"mr-2\"\r\n            >\r\n                <clr-icon *ngIf=\"item.icon\" [attr.shape]=\"item.icon\"></clr-icon>\r\n                {{ item.label | translate }}\r\n            </button>\r\n        </ng-container>\r\n    </ng-container>\r\n</vdr-ui-extension-point>\r\n", styles: [":host{display:inline-block}button.hidden{display:none}\n"], dependencies: [{ kind: "directive", type: i5.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i7.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i8.UiExtensionPointComponent, selector: "vdr-ui-extension-point", inputs: ["locationId", "metadata", "topPx", "leftPx", "display", "api"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i9.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ActionBarItemsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-action-bar-items', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-ui-extension-point [locationId]=\"locationId\" api=\"actionBar\" [leftPx]=\"-24\">\r\n    <ng-container *ngFor=\"let item of items$ | async\">\r\n        <ng-container *ngIf=\"buttonStates[item.id] | async as buttonState\">\r\n            <button\r\n                *vdrIfPermissions=\"item.requiresPermission\"\r\n                [routerLink]=\"getRouterLink(item)\"\r\n                [class.hidden]=\"buttonState.visible === false\"\r\n                [disabled]=\"buttonState.disabled || (item.disabled ? (item.disabled | async) : false)\"\r\n                (click)=\"handleClick($event, item)\"\r\n                [ngClass]=\"getButtonStyles(item)\"\r\n                class=\"mr-2\"\r\n            >\r\n                <clr-icon *ngIf=\"item.icon\" [attr.shape]=\"item.icon\"></clr-icon>\r\n                {{ item.label | translate }}\r\n            </button>\r\n        </ng-container>\r\n    </ng-container>\r\n</vdr-ui-extension-point>\r\n", styles: [":host{display:inline-block}button.hidden{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NavBuilderService }, { type: i2.ActivatedRoute }, { type: i3.DataService }, { type: i4.NotificationService }, { type: i0.Injector }]; }, propDecorators: { locationId: [{
                type: HostBinding,
                args: ['attr.data-location-id']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,