import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { titleSetter } from '../../../common/title-setter';
import * as i0 from "@angular/core";
import * as i1 from "../../../providers/breadcrumb/breadcrumb.service";
import * as i2 from "@angular/common";
import * as i3 from "@ngx-translate/core";
export class PageTitleComponent {
    constructor(changeDetector, breadcrumbService) {
        this.changeDetector = changeDetector;
        this.breadcrumbService = breadcrumbService;
        this.title = '';
        this.titleChange$ = new BehaviorSubject(undefined);
        this.setTitle = titleSetter();
    }
    ngOnInit() {
        this.title$ = combineLatest(this.titleChange$, this.breadcrumbService.breadcrumbs$).pipe(map(([title, breadcrumbs]) => {
            if (title) {
                return title;
            }
            else {
                return breadcrumbs[breadcrumbs.length - 1].label;
            }
        }), tap(title => this.setTitle(title)));
    }
    ngOnChanges(changes) {
        if (changes.title) {
            this.titleChange$.next(changes.title.currentValue);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: PageTitleComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.BreadcrumbService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: PageTitleComponent, selector: "vdr-page-title", inputs: { title: "title" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"page-title\">\r\n    <h1>{{ (title$ | async) ?? '' | translate }}</h1>\r\n    <div class=\"title-actions\"><ng-content></ng-content></div>\r\n</div>\r\n", styles: [":host{display:block}.page-title{display:flex;gap:calc(var(--space-unit) * 2);margin-bottom:calc(var(--space-unit) * 2)}.page-title h1{margin-top:0;color:var(--color-weight-900);font-weight:600}@media screen and (max-width: 768px){.page-title h1{font-size:var(--font-size-xl)}}@media screen and (max-width: 992px){.page-title h1{font-size:24px}}.title-actions{display:flex;align-items:center}\n"], dependencies: [{ kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: PageTitleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-page-title', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"page-title\">\r\n    <h1>{{ (title$ | async) ?? '' | translate }}</h1>\r\n    <div class=\"title-actions\"><ng-content></ng-content></div>\r\n</div>\r\n", styles: [":host{display:block}.page-title{display:flex;gap:calc(var(--space-unit) * 2);margin-bottom:calc(var(--space-unit) * 2)}.page-title h1{margin-top:0;color:var(--color-weight-900);font-weight:600}@media screen and (max-width: 768px){.page-title h1{font-size:var(--font-size-xl)}}@media screen and (max-width: 992px){.page-title h1{font-size:24px}}.title-actions{display:flex;align-items:center}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.BreadcrumbService }]; }, propDecorators: { title: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS10aXRsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3BhZ2UtdGl0bGUvcGFnZS10aXRsZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3BhZ2UtdGl0bGUvcGFnZS10aXRsZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBRXZCLFNBQVMsRUFDVCxLQUFLLEdBSVIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7O0FBUzNELE1BQU0sT0FBTyxrQkFBa0I7SUFNM0IsWUFBb0IsY0FBaUMsRUFBVSxpQkFBb0M7UUFBL0UsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQVUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUwxRixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1osaUJBQVksR0FBRyxJQUFJLGVBQWUsQ0FBcUIsU0FBUyxDQUFDLENBQUM7UUFFakUsYUFBUSxHQUFHLFdBQVcsRUFBRSxDQUFDO0lBRW9FLENBQUM7SUFFdkcsUUFBUTtRQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDcEYsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUN6QixJQUFJLEtBQUssRUFBRTtnQkFDUCxPQUFPLEtBQUssQ0FBQzthQUNoQjtpQkFBTTtnQkFDSCxPQUFPLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzthQUNwRDtRQUNMLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDckMsQ0FBQztJQUNOLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0RDtJQUNMLENBQUM7OEdBekJRLGtCQUFrQjtrR0FBbEIsa0JBQWtCLHVHQ3BCL0IsdUtBSUE7OzJGRGdCYSxrQkFBa0I7a0JBTjlCLFNBQVM7K0JBQ0ksZ0JBQWdCLG1CQUdULHVCQUF1QixDQUFDLE1BQU07d0lBR3RDLEtBQUs7c0JBQWIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgSW5wdXQsXHJcbiAgICBPbkNoYW5nZXMsXHJcbiAgICBPbkluaXQsXHJcbiAgICBTaW1wbGVDaGFuZ2VzLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IHRpdGxlU2V0dGVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3RpdGxlLXNldHRlcic7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItcGFnZS10aXRsZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGFnZS10aXRsZS5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFtgLi9wYWdlLXRpdGxlLmNvbXBvbmVudC5zY3NzYF0sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBhZ2VUaXRsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIEBJbnB1dCgpIHRpdGxlID0gJyc7XHJcbiAgICBwcml2YXRlIHRpdGxlQ2hhbmdlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xyXG4gICAgcHJvdGVjdGVkIHRpdGxlJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgcmVhZG9ubHkgc2V0VGl0bGUgPSB0aXRsZVNldHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGJyZWFkY3J1bWJTZXJ2aWNlOiBCcmVhZGNydW1iU2VydmljZSkge31cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnRpdGxlJCA9IGNvbWJpbmVMYXRlc3QodGhpcy50aXRsZUNoYW5nZSQsIHRoaXMuYnJlYWRjcnVtYlNlcnZpY2UuYnJlYWRjcnVtYnMkKS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoKFt0aXRsZSwgYnJlYWRjcnVtYnNdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGl0bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGl0bGU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBicmVhZGNydW1ic1ticmVhZGNydW1icy5sZW5ndGggLSAxXS5sYWJlbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHRhcCh0aXRsZSA9PiB0aGlzLnNldFRpdGxlKHRpdGxlKSksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMudGl0bGUpIHtcclxuICAgICAgICAgICAgdGhpcy50aXRsZUNoYW5nZSQubmV4dChjaGFuZ2VzLnRpdGxlLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIjxkaXYgY2xhc3M9XCJwYWdlLXRpdGxlXCI+XHJcbiAgICA8aDE+e3sgKHRpdGxlJCB8IGFzeW5jKSA/PyAnJyB8IHRyYW5zbGF0ZSB9fTwvaDE+XHJcbiAgICA8ZGl2IGNsYXNzPVwidGl0bGUtYWN0aW9uc1wiPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj5cclxuPC9kaXY+XHJcbiJdfQ==