import { Directive, Optional } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/* eslint-disable @angular-eslint/directive-selector */
export class FormFieldControlDirective {
    constructor(elementRef, formControlName) {
        this.elementRef = elementRef;
        this.formControlName = formControlName;
    }
    get valid() {
        return !!this.formControlName && !!this.formControlName.valid;
    }
    get touched() {
        return !!this.formControlName && !!this.formControlName.touched;
    }
    setReadOnly(value) {
        const input = this.elementRef.nativeElement;
        if (isSelectElement(input)) {
            input.disabled = value;
        }
        else {
            input.readOnly = value;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FormFieldControlDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgControl, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.2", type: FormFieldControlDirective, selector: "input, textarea, select", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FormFieldControlDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'input, textarea, select' }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }] }]; } });
function isSelectElement(value) {
    return value.hasOwnProperty('selectedIndex');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvZm9ybS1maWVsZC9mb3JtLWZpZWxkLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFLaEUsdURBQXVEO0FBRXZELE1BQU0sT0FBTyx5QkFBeUI7SUFDbEMsWUFDWSxVQUFvQyxFQUN6QixlQUEwQjtRQURyQyxlQUFVLEdBQVYsVUFBVSxDQUEwQjtRQUN6QixvQkFBZSxHQUFmLGVBQWUsQ0FBVztJQUM5QyxDQUFDO0lBRUosSUFBSSxLQUFLO1FBQ0wsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7SUFDbEUsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBYztRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM1QyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUMxQjthQUFNO1lBQ0gsS0FBSyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDMUI7SUFDTCxDQUFDOzhHQXJCUSx5QkFBeUI7a0dBQXpCLHlCQUF5Qjs7MkZBQXpCLHlCQUF5QjtrQkFEckMsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSx5QkFBeUIsRUFBRTs7MEJBSXpDLFFBQVE7O0FBcUJqQixTQUFTLGVBQWUsQ0FBQyxLQUFtQjtJQUN4QyxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxudHlwZSBJbnB1dEVsZW1lbnQgPSBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudCB8IEhUTUxTZWxlY3RFbGVtZW50O1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1zZWxlY3RvciAqL1xyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcgfSlcclxuZXhwb3J0IGNsYXNzIEZvcm1GaWVsZENvbnRyb2xEaXJlY3RpdmUge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmPElucHV0RWxlbWVudD4sXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgcHVibGljIGZvcm1Db250cm9sTmFtZTogTmdDb250cm9sLFxyXG4gICAgKSB7fVxyXG5cclxuICAgIGdldCB2YWxpZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmZvcm1Db250cm9sTmFtZSAmJiAhIXRoaXMuZm9ybUNvbnRyb2xOYW1lLnZhbGlkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0b3VjaGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuZm9ybUNvbnRyb2xOYW1lICYmICEhdGhpcy5mb3JtQ29udHJvbE5hbWUudG91Y2hlZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRSZWFkT25seSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKGlzU2VsZWN0RWxlbWVudChpbnB1dCkpIHtcclxuICAgICAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbnB1dC5yZWFkT25seSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNTZWxlY3RFbGVtZW50KHZhbHVlOiBJbnB1dEVsZW1lbnQpOiB2YWx1ZSBpcyBIVE1MU2VsZWN0RWxlbWVudCB7XHJcbiAgICByZXR1cm4gdmFsdWUuaGFzT3duUHJvcGVydHkoJ3NlbGVjdGVkSW5kZXgnKTtcclxufVxyXG4iXX0=