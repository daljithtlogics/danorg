/**
 * Retrieve the start and end position of a mark
 * "Borrowed" from [tiptap](https://github.com/scrumpy/tiptap)
 */
export const getMarkRange = (pmPosition = null, type = null) => {
    if (!pmPosition || !type) {
        return false;
    }
    const start = pmPosition.parent.childAfter(pmPosition.parentOffset);
    if (!start.node) {
        return false;
    }
    const mark = start.node.marks.find(({ type: markType }) => markType === type);
    if (!mark) {
        return false;
    }
    let startIndex = pmPosition.index();
    let startPos = pmPosition.start() + start.offset;
    while (startIndex > 0 && mark.isInSet(pmPosition.parent.child(startIndex - 1).marks)) {
        startIndex -= 1;
        startPos -= pmPosition.parent.child(startIndex).nodeSize;
    }
    const endPos = startPos + start.node.nodeSize;
    return { from: startPos, to: endPos };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3JpY2gtdGV4dC1lZGl0b3IvcHJvc2VtaXJyb3IvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQ3hCLGFBQWlDLElBQUksRUFDckMsT0FBb0MsSUFBSSxFQUNKLEVBQUU7SUFDdEMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksRUFBRTtRQUN0QixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUVwRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNiLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUM5RSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1AsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEMsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDakQsT0FBTyxVQUFVLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2xGLFVBQVUsSUFBSSxDQUFDLENBQUM7UUFDaEIsUUFBUSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQztLQUM1RDtJQUVELE1BQU0sTUFBTSxHQUFHLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUU5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDMUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFya1R5cGUsIFJlc29sdmVkUG9zIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlIHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9uIG9mIGEgbWFya1xyXG4gKiBcIkJvcnJvd2VkXCIgZnJvbSBbdGlwdGFwXShodHRwczovL2dpdGh1Yi5jb20vc2NydW1weS90aXB0YXApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0TWFya1JhbmdlID0gKFxyXG4gICAgcG1Qb3NpdGlvbjogUmVzb2x2ZWRQb3MgfCBudWxsID0gbnVsbCxcclxuICAgIHR5cGU6IE1hcmtUeXBlIHwgbnVsbCB8IHVuZGVmaW5lZCA9IG51bGwsXHJcbik6IHsgZnJvbTogbnVtYmVyOyB0bzogbnVtYmVyIH0gfCBmYWxzZSA9PiB7XHJcbiAgICBpZiAoIXBtUG9zaXRpb24gfHwgIXR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3RhcnQgPSBwbVBvc2l0aW9uLnBhcmVudC5jaGlsZEFmdGVyKHBtUG9zaXRpb24ucGFyZW50T2Zmc2V0KTtcclxuXHJcbiAgICBpZiAoIXN0YXJ0Lm5vZGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWFyayA9IHN0YXJ0Lm5vZGUubWFya3MuZmluZCgoeyB0eXBlOiBtYXJrVHlwZSB9KSA9PiBtYXJrVHlwZSA9PT0gdHlwZSk7XHJcbiAgICBpZiAoIW1hcmspIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHN0YXJ0SW5kZXggPSBwbVBvc2l0aW9uLmluZGV4KCk7XHJcbiAgICBsZXQgc3RhcnRQb3MgPSBwbVBvc2l0aW9uLnN0YXJ0KCkgKyBzdGFydC5vZmZzZXQ7XHJcbiAgICB3aGlsZSAoc3RhcnRJbmRleCA+IDAgJiYgbWFyay5pc0luU2V0KHBtUG9zaXRpb24ucGFyZW50LmNoaWxkKHN0YXJ0SW5kZXggLSAxKS5tYXJrcykpIHtcclxuICAgICAgICBzdGFydEluZGV4IC09IDE7XHJcbiAgICAgICAgc3RhcnRQb3MgLT0gcG1Qb3NpdGlvbi5wYXJlbnQuY2hpbGQoc3RhcnRJbmRleCkubm9kZVNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZW5kUG9zID0gc3RhcnRQb3MgKyBzdGFydC5ub2RlLm5vZGVTaXplO1xyXG5cclxuICAgIHJldHVybiB7IGZyb206IHN0YXJ0UG9zLCB0bzogZW5kUG9zIH07XHJcbn07XHJcbiJdfQ==