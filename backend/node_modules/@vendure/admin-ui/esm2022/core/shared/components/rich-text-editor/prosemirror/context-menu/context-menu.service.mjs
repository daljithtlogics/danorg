import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, interval, of, Subject } from 'rxjs';
import { bufferWhen, debounceTime, delayWhen, distinctUntilChanged, filter, map, takeUntil, } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class ContextMenuService {
    constructor() {
        this.menuIsVisible$ = new BehaviorSubject(false);
        this.setContextMenuConfig$ = new Subject();
        const source$ = this.setContextMenuConfig$.asObservable();
        const groupedConfig$ = source$.pipe(bufferWhen(() => source$.pipe(debounceTime(50))), map(group => group.reduce((acc, cur) => {
            if (!acc) {
                return cur;
            }
            else {
                if (cur?.ref === acc.ref) {
                    acc.items.push(
                    // de-duplicate items
                    ...(cur?.items.filter(i => !acc.items.find(ai => ai.label === i.label)) ??
                        []));
                }
            }
            return acc;
        }, undefined)));
        const visible$ = this.menuIsVisible$.pipe(filter(val => val === true));
        const isVisible$ = this.menuIsVisible$.pipe(delayWhen(value => (value ? of(value) : interval(250).pipe(takeUntil(visible$)))), distinctUntilChanged());
        this.contextMenu$ = combineLatest(groupedConfig$, isVisible$).pipe(map(([config, isVisible]) => (isVisible ? config : undefined)));
    }
    setVisibility(isVisible) {
        this.menuIsVisible$.next(isVisible);
    }
    setContextMenu(config) {
        this.setContextMenuConfig$.next(config);
    }
    clearContextMenu() {
        this.setContextMenuConfig$.next(undefined);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ContextMenuService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ContextMenuService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ContextMenuService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3JpY2gtdGV4dC1lZGl0b3IvcHJvc2VtaXJyb3IvY29udGV4dC1tZW51L2NvbnRleHQtbWVudS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDekYsT0FBTyxFQUNILFVBQVUsRUFDVixZQUFZLEVBQ1osU0FBUyxFQUNULG9CQUFvQixFQUNwQixNQUFNLEVBQ04sR0FBRyxFQUVILFNBQVMsR0FFWixNQUFNLGdCQUFnQixDQUFDOztBQXFCeEIsTUFBTSxPQUFPLGtCQUFrQjtJQUkzQjtRQUZRLG1CQUFjLEdBQUcsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFDckQsMEJBQXFCLEdBQUcsSUFBSSxPQUFPLEVBQWlDLENBQUM7UUFFekUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFELE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQy9CLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2hELEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNSLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDTixPQUFPLEdBQUcsQ0FBQzthQUNkO2lCQUFNO2dCQUNILElBQUksR0FBRyxFQUFFLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUN0QixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUk7b0JBQ1YscUJBQXFCO29CQUNyQixHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ25FLEVBQUUsQ0FBQyxDQUNWLENBQUM7aUJBQ0w7YUFDSjtZQUNELE9BQU8sR0FBRyxDQUFDO1FBQ2YsQ0FBQyxFQUFFLFNBQTBDLENBQUMsQ0FDakQsQ0FDSixDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFdkUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ3ZDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqRixvQkFBb0IsRUFBRSxDQUN6QixDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDOUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQ2pFLENBQUM7SUFDTixDQUFDO0lBRUQsYUFBYSxDQUFDLFNBQWtCO1FBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBeUI7UUFDcEMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQyxDQUFDOzhHQS9DUSxrQkFBa0I7a0hBQWxCLGtCQUFrQixjQURMLE1BQU07OzJGQUNuQixrQkFBa0I7a0JBRDlCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIGludGVydmFsLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1xyXG4gICAgYnVmZmVyV2hlbixcclxuICAgIGRlYm91bmNlVGltZSxcclxuICAgIGRlbGF5V2hlbixcclxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxyXG4gICAgZmlsdGVyLFxyXG4gICAgbWFwLFxyXG4gICAgc2tpcCxcclxuICAgIHRha2VVbnRpbCxcclxuICAgIHRhcCxcclxufSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRNZW51Q29uZmlnIHtcclxuICAgIHJlZjogYW55O1xyXG4gICAgaWNvblNoYXBlPzogc3RyaW5nO1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIGVsZW1lbnQ6IEVsZW1lbnQ7XHJcbiAgICBjb29yZHM6IHsgbGVmdDogbnVtYmVyOyByaWdodDogbnVtYmVyOyB0b3A6IG51bWJlcjsgYm90dG9tOiBudW1iZXIgfTtcclxuICAgIGl0ZW1zOiBDb250ZXh0TWVudUl0ZW1bXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0TWVudUl0ZW0ge1xyXG4gICAgc2VwYXJhdG9yPzogYm9vbGVhbjtcclxuICAgIGljb25DbGFzcz86IHN0cmluZztcclxuICAgIGljb25TaGFwZT86IHN0cmluZztcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBlbmFibGVkOiBib29sZWFuO1xyXG4gICAgb25DbGljazogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIENvbnRleHRNZW51U2VydmljZSB7XHJcbiAgICBjb250ZXh0TWVudSQ6IE9ic2VydmFibGU8Q29udGV4dE1lbnVDb25maWcgfCB1bmRlZmluZWQ+O1xyXG4gICAgcHJpdmF0ZSBtZW51SXNWaXNpYmxlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgcHJpdmF0ZSBzZXRDb250ZXh0TWVudUNvbmZpZyQgPSBuZXcgU3ViamVjdDxDb250ZXh0TWVudUNvbmZpZyB8IHVuZGVmaW5lZD4oKTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZSQgPSB0aGlzLnNldENvbnRleHRNZW51Q29uZmlnJC5hc09ic2VydmFibGUoKTtcclxuICAgICAgICBjb25zdCBncm91cGVkQ29uZmlnJCA9IHNvdXJjZSQucGlwZShcclxuICAgICAgICAgICAgYnVmZmVyV2hlbigoKSA9PiBzb3VyY2UkLnBpcGUoZGVib3VuY2VUaW1lKDUwKSkpLFxyXG4gICAgICAgICAgICBtYXAoZ3JvdXAgPT5cclxuICAgICAgICAgICAgICAgIGdyb3VwLnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFjYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXI/LnJlZiA9PT0gYWNjLnJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjLml0ZW1zLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGUtZHVwbGljYXRlIGl0ZW1zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGN1cj8uaXRlbXMuZmlsdGVyKGkgPT4gIWFjYy5pdGVtcy5maW5kKGFpID0+IGFpLmxhYmVsID09PSBpLmxhYmVsKSkgPz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICAgICAgfSwgdW5kZWZpbmVkIGFzIENvbnRleHRNZW51Q29uZmlnIHwgdW5kZWZpbmVkKSxcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCB2aXNpYmxlJCA9IHRoaXMubWVudUlzVmlzaWJsZSQucGlwZShmaWx0ZXIodmFsID0+IHZhbCA9PT0gdHJ1ZSkpO1xyXG5cclxuICAgICAgICBjb25zdCBpc1Zpc2libGUkID0gdGhpcy5tZW51SXNWaXNpYmxlJC5waXBlKFxyXG4gICAgICAgICAgICBkZWxheVdoZW4odmFsdWUgPT4gKHZhbHVlID8gb2YodmFsdWUpIDogaW50ZXJ2YWwoMjUwKS5waXBlKHRha2VVbnRpbCh2aXNpYmxlJCkpKSksXHJcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmNvbnRleHRNZW51JCA9IGNvbWJpbmVMYXRlc3QoZ3JvdXBlZENvbmZpZyQsIGlzVmlzaWJsZSQpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoW2NvbmZpZywgaXNWaXNpYmxlXSkgPT4gKGlzVmlzaWJsZSA/IGNvbmZpZyA6IHVuZGVmaW5lZCkpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VmlzaWJpbGl0eShpc1Zpc2libGU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLm1lbnVJc1Zpc2libGUkLm5leHQoaXNWaXNpYmxlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb250ZXh0TWVudShjb25maWc6IENvbnRleHRNZW51Q29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDb250ZXh0TWVudUNvbmZpZyQubmV4dChjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyQ29udGV4dE1lbnUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDb250ZXh0TWVudUNvbmZpZyQubmV4dCh1bmRlZmluZWQpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==