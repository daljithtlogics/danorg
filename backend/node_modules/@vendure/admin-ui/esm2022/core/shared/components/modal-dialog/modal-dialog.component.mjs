import { Component, } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@clr/angular";
import * as i2 from "@angular/common";
import * as i3 from "./dialog-component-outlet.component";
/**
 * This component should only be instantiated dynamically by the ModalService. It should not be used
 * directly in templates. See {@link ModalService.fromComponent} method for more detail.
 */
export class ModalDialogComponent {
    constructor() {
        this.titleTemplateRef$ = new Subject();
        this.buttonsTemplateRef$ = new Subject();
    }
    /**
     * This callback is invoked when the childComponentType is instantiated in the
     * template by the {@link DialogComponentOutletComponent}.
     * Once we have the instance, we can set the resolveWith function and any
     * locals which were specified in the config.
     */
    onCreate(componentInstance) {
        componentInstance.resolveWith = (result) => {
            this.closeModal(result);
        };
        if (this.options && this.options.locals) {
            // eslint-disable-next-line
            for (const key in this.options.locals) {
                componentInstance[key] = this.options.locals[key];
            }
        }
    }
    /**
     * This should be called by the {@link DialogTitleDirective} only
     */
    registerTitleTemplate(titleTemplateRef) {
        this.titleTemplateRef$.next(titleTemplateRef);
    }
    /**
     * This should be called by the {@link DialogButtonsDirective} only
     */
    registerButtonsTemplate(buttonsTemplateRef) {
        this.buttonsTemplateRef$.next(buttonsTemplateRef);
    }
    /**
     * Called when the modal is closed by clicking the X or the mask.
     */
    modalOpenChange(status) {
        if (status === false) {
            this.closeModal();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ModalDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: ModalDialogComponent, selector: "vdr-modal-dialog", ngImport: i0, template: "<clr-modal\r\n    [clrModalOpen]=\"true\"\r\n    (clrModalOpenChange)=\"modalOpenChange($event)\"\r\n    [clrModalClosable]=\"options?.closable\"\r\n    [clrModalSize]=\"options?.size\"\r\n    [ngClass]=\"'modal-valign-' + (options?.verticalAlign || 'center')\"\r\n>\r\n    <h3 class=\"modal-title\"><ng-container *ngTemplateOutlet=\"(titleTemplateRef$ | async)\"></ng-container></h3>\r\n    <div class=\"modal-body\">\r\n        <vdr-dialog-component-outlet\r\n            [component]=\"childComponentType\"\r\n            (create)=\"onCreate($event)\"\r\n        ></vdr-dialog-component-outlet>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <ng-container *ngTemplateOutlet=\"(buttonsTemplateRef$ | async)\"></ng-container>\r\n    </div>\r\n</clr-modal>\r\n", styles: ["::ng-deep clr-modal.modal-valign-top .modal{justify-content:flex-start}::ng-deep clr-modal.modal-valign-bottom .modal{justify-content:flex-end}.modal-body{display:flex;flex-direction:column;container-type:inline-size}\n"], dependencies: [{ kind: "component", type: i1.ClrModal, selector: "clr-modal", inputs: ["clrModalOpen", "clrModalClosable", "clrModalCloseButtonAriaLabel", "clrModalSize", "clrModalStaticBackdrop", "clrModalSkipAnimation", "clrModalPreventClose", "clrModalLabelledById"], outputs: ["clrModalOpenChange", "clrModalAlternateClose"] }, { kind: "directive", type: i1.ClrModalBody, selector: ".modal-body" }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i3.DialogComponentOutletComponent, selector: "vdr-dialog-component-outlet", inputs: ["component"], outputs: ["create"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ModalDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-modal-dialog', template: "<clr-modal\r\n    [clrModalOpen]=\"true\"\r\n    (clrModalOpenChange)=\"modalOpenChange($event)\"\r\n    [clrModalClosable]=\"options?.closable\"\r\n    [clrModalSize]=\"options?.size\"\r\n    [ngClass]=\"'modal-valign-' + (options?.verticalAlign || 'center')\"\r\n>\r\n    <h3 class=\"modal-title\"><ng-container *ngTemplateOutlet=\"(titleTemplateRef$ | async)\"></ng-container></h3>\r\n    <div class=\"modal-body\">\r\n        <vdr-dialog-component-outlet\r\n            [component]=\"childComponentType\"\r\n            (create)=\"onCreate($event)\"\r\n        ></vdr-dialog-component-outlet>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <ng-container *ngTemplateOutlet=\"(buttonsTemplateRef$ | async)\"></ng-container>\r\n    </div>\r\n</clr-modal>\r\n", styles: ["::ng-deep clr-modal.modal-valign-top .modal{justify-content:flex-start}::ng-deep clr-modal.modal-valign-bottom .modal{justify-content:flex-end}.modal-body{display:flex;flex-direction:column;container-type:inline-size}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvbW9kYWwtZGlhbG9nL21vZGFsLWRpYWxvZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL21vZGFsLWRpYWxvZy9tb2RhbC1kaWFsb2cuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsR0FRWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQU0zQzs7O0dBR0c7QUFNSCxNQUFNLE9BQU8sb0JBQW9CO0lBTGpDO1FBUUksc0JBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQW9CLENBQUM7UUFDcEQsd0JBQW1CLEdBQUcsSUFBSSxPQUFPLEVBQW9CLENBQUM7S0EyQ3pEO0lBeENHOzs7OztPQUtHO0lBQ0gsUUFBUSxDQUFDLGlCQUFvQjtRQUN6QixpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxNQUFZLEVBQUUsRUFBRTtZQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNyQywyQkFBMkI7WUFDM0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDbkMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFnQyxDQUFDO2FBQ3BGO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxxQkFBcUIsQ0FBQyxnQkFBa0M7UUFDcEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7T0FFRztJQUNILHVCQUF1QixDQUFDLGtCQUFvQztRQUN4RCxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZSxDQUFDLE1BQVc7UUFDdkIsSUFBSSxNQUFNLEtBQUssS0FBSyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtJQUNMLENBQUM7OEdBOUNRLG9CQUFvQjtrR0FBcEIsb0JBQW9CLHdEQ3pCakMsdXdCQWtCQTs7MkZET2Esb0JBQW9CO2tCQUxoQyxTQUFTOytCQUNJLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBDb250ZW50Q2hpbGQsXHJcbiAgICBDb250ZW50Q2hpbGRyZW4sXHJcbiAgICBRdWVyeUxpc3QsXHJcbiAgICBUZW1wbGF0ZVJlZixcclxuICAgIFR5cGUsXHJcbiAgICBWaWV3Q2hpbGQsXHJcbiAgICBWaWV3Q2hpbGRyZW4sXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IERpYWxvZywgTW9kYWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL21vZGFsL21vZGFsLnR5cGVzJztcclxuXHJcbmltcG9ydCB7IERpYWxvZ0J1dHRvbnNEaXJlY3RpdmUgfSBmcm9tICcuL2RpYWxvZy1idXR0b25zLmRpcmVjdGl2ZSc7XHJcblxyXG4vKipcclxuICogVGhpcyBjb21wb25lbnQgc2hvdWxkIG9ubHkgYmUgaW5zdGFudGlhdGVkIGR5bmFtaWNhbGx5IGJ5IHRoZSBNb2RhbFNlcnZpY2UuIEl0IHNob3VsZCBub3QgYmUgdXNlZFxyXG4gKiBkaXJlY3RseSBpbiB0ZW1wbGF0ZXMuIFNlZSB7QGxpbmsgTW9kYWxTZXJ2aWNlLmZyb21Db21wb25lbnR9IG1ldGhvZCBmb3IgbW9yZSBkZXRhaWwuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLW1vZGFsLWRpYWxvZycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vbW9kYWwtZGlhbG9nLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL21vZGFsLWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9kYWxEaWFsb2dDb21wb25lbnQ8VCBleHRlbmRzIERpYWxvZzxhbnk+PiB7XHJcbiAgICBjaGlsZENvbXBvbmVudFR5cGU6IFR5cGU8VD47XHJcbiAgICBjbG9zZU1vZGFsOiAocmVzdWx0PzogYW55KSA9PiB2b2lkO1xyXG4gICAgdGl0bGVUZW1wbGF0ZVJlZiQgPSBuZXcgU3ViamVjdDxUZW1wbGF0ZVJlZjxhbnk+PigpO1xyXG4gICAgYnV0dG9uc1RlbXBsYXRlUmVmJCA9IG5ldyBTdWJqZWN0PFRlbXBsYXRlUmVmPGFueT4+KCk7XHJcbiAgICBvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBjYWxsYmFjayBpcyBpbnZva2VkIHdoZW4gdGhlIGNoaWxkQ29tcG9uZW50VHlwZSBpcyBpbnN0YW50aWF0ZWQgaW4gdGhlXHJcbiAgICAgKiB0ZW1wbGF0ZSBieSB0aGUge0BsaW5rIERpYWxvZ0NvbXBvbmVudE91dGxldENvbXBvbmVudH0uXHJcbiAgICAgKiBPbmNlIHdlIGhhdmUgdGhlIGluc3RhbmNlLCB3ZSBjYW4gc2V0IHRoZSByZXNvbHZlV2l0aCBmdW5jdGlvbiBhbmQgYW55XHJcbiAgICAgKiBsb2NhbHMgd2hpY2ggd2VyZSBzcGVjaWZpZWQgaW4gdGhlIGNvbmZpZy5cclxuICAgICAqL1xyXG4gICAgb25DcmVhdGUoY29tcG9uZW50SW5zdGFuY2U6IFQpIHtcclxuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5yZXNvbHZlV2l0aCA9IChyZXN1bHQ/OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZU1vZGFsKHJlc3VsdCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5sb2NhbHMpIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub3B0aW9ucy5sb2NhbHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlW2tleV0gPSB0aGlzLm9wdGlvbnMubG9jYWxzW2tleV0gYXMgVFtFeHRyYWN0PGtleW9mIFQsIHN0cmluZz5dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIGJ5IHRoZSB7QGxpbmsgRGlhbG9nVGl0bGVEaXJlY3RpdmV9IG9ubHlcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJUaXRsZVRlbXBsYXRlKHRpdGxlVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHtcclxuICAgICAgICB0aGlzLnRpdGxlVGVtcGxhdGVSZWYkLm5leHQodGl0bGVUZW1wbGF0ZVJlZik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYnkgdGhlIHtAbGluayBEaWFsb2dCdXR0b25zRGlyZWN0aXZlfSBvbmx5XHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyQnV0dG9uc1RlbXBsYXRlKGJ1dHRvbnNUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge1xyXG4gICAgICAgIHRoaXMuYnV0dG9uc1RlbXBsYXRlUmVmJC5uZXh0KGJ1dHRvbnNUZW1wbGF0ZVJlZik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgbW9kYWwgaXMgY2xvc2VkIGJ5IGNsaWNraW5nIHRoZSBYIG9yIHRoZSBtYXNrLlxyXG4gICAgICovXHJcbiAgICBtb2RhbE9wZW5DaGFuZ2Uoc3RhdHVzOiBhbnkpIHtcclxuICAgICAgICBpZiAoc3RhdHVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiPGNsci1tb2RhbFxyXG4gICAgW2Nsck1vZGFsT3Blbl09XCJ0cnVlXCJcclxuICAgIChjbHJNb2RhbE9wZW5DaGFuZ2UpPVwibW9kYWxPcGVuQ2hhbmdlKCRldmVudClcIlxyXG4gICAgW2Nsck1vZGFsQ2xvc2FibGVdPVwib3B0aW9ucz8uY2xvc2FibGVcIlxyXG4gICAgW2Nsck1vZGFsU2l6ZV09XCJvcHRpb25zPy5zaXplXCJcclxuICAgIFtuZ0NsYXNzXT1cIidtb2RhbC12YWxpZ24tJyArIChvcHRpb25zPy52ZXJ0aWNhbEFsaWduIHx8ICdjZW50ZXInKVwiXHJcbj5cclxuICAgIDxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+PG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cIih0aXRsZVRlbXBsYXRlUmVmJCB8IGFzeW5jKVwiPjwvbmctY29udGFpbmVyPjwvaDM+XHJcbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgIDx2ZHItZGlhbG9nLWNvbXBvbmVudC1vdXRsZXRcclxuICAgICAgICAgICAgW2NvbXBvbmVudF09XCJjaGlsZENvbXBvbmVudFR5cGVcIlxyXG4gICAgICAgICAgICAoY3JlYXRlKT1cIm9uQ3JlYXRlKCRldmVudClcIlxyXG4gICAgICAgID48L3Zkci1kaWFsb2ctY29tcG9uZW50LW91dGxldD5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCIoYnV0dG9uc1RlbXBsYXRlUmVmJCB8IGFzeW5jKVwiPjwvbmctY29udGFpbmVyPlxyXG4gICAgPC9kaXY+XHJcbjwvY2xyLW1vZGFsPlxyXG4iXX0=