import { MenuItem } from 'prosemirror-menu';
import { TextSelection } from 'prosemirror-state';
import { LinkDialogComponent } from '../../link-dialog/link-dialog.component';
import { markActive, renderClarityIcon } from './menu-common';
function selectionIsWithinLink(state, anchor, head) {
    const { doc } = state;
    const headLink = doc
        .resolve(head)
        .marks()
        .find(m => m.type.name === 'link');
    const anchorLink = doc
        .resolve(anchor)
        .marks()
        .find(m => m.type.name === 'link');
    if (headLink && anchorLink && headLink.eq(anchorLink)) {
        return true;
    }
    return false;
}
export function linkItem(linkMark, modalService) {
    return new MenuItem({
        title: 'Add or remove link',
        render: renderClarityIcon({ shape: 'link', size: 22 }),
        class: '',
        css: '',
        active(state) {
            return markActive(state, linkMark);
        },
        enable(state) {
            const { selection } = state;
            return !selection.empty || selectionIsWithinLink(state, selection.anchor, selection.head);
        },
        run(state, dispatch, view) {
            let attrs;
            const { selection, doc } = state;
            if (selection instanceof TextSelection &&
                selectionIsWithinLink(state, selection.anchor + 1, selection.head - 1)) {
                const mark = doc
                    .resolve(selection.anchor + 1)
                    .marks()
                    .find(m => m.type.name === 'link');
                if (mark) {
                    attrs = mark.attrs;
                }
            }
            modalService
                .fromComponent(LinkDialogComponent, {
                closable: true,
                locals: {
                    existing: attrs,
                },
            })
                .subscribe(result => {
                let tr = state.tr;
                if (result) {
                    const { $from, $to } = selection.ranges[0];
                    tr = tr.removeMark($from.pos, $to.pos, linkMark);
                    if (result.href !== '') {
                        tr = tr.addMark($from.pos, $to.pos, linkMark.create(result));
                    }
                }
                dispatch(tr.scrollIntoView());
                view.focus();
            });
            return true;
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlua3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL3JpY2gtdGV4dC1lZGl0b3IvcHJvc2VtaXJyb3IvbWVudS9saW5rcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQVMsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbkQsT0FBTyxFQUFlLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRy9ELE9BQU8sRUFBYSxtQkFBbUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRXpGLE9BQU8sRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQsU0FBUyxxQkFBcUIsQ0FBQyxLQUFrQixFQUFFLE1BQWMsRUFBRSxJQUFZO0lBQzNFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDdEIsTUFBTSxRQUFRLEdBQUcsR0FBRztTQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUM7U0FDYixLQUFLLEVBQUU7U0FDUCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztJQUN2QyxNQUFNLFVBQVUsR0FBRyxHQUFHO1NBQ2pCLE9BQU8sQ0FBQyxNQUFNLENBQUM7U0FDZixLQUFLLEVBQUU7U0FDUCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztJQUN2QyxJQUFJLFFBQVEsSUFBSSxVQUFVLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNuRCxPQUFPLElBQUksQ0FBQztLQUNmO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsUUFBa0IsRUFBRSxZQUEwQjtJQUNuRSxPQUFPLElBQUksUUFBUSxDQUFDO1FBQ2hCLEtBQUssRUFBRSxvQkFBb0I7UUFDM0IsTUFBTSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDdEQsS0FBSyxFQUFFLEVBQUU7UUFDVCxHQUFHLEVBQUUsRUFBRTtRQUNQLE1BQU0sQ0FBQyxLQUFLO1lBQ1IsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSztZQUNSLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUM7WUFDNUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUkscUJBQXFCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlGLENBQUM7UUFDRCxHQUFHLENBQUMsS0FBa0IsRUFBRSxRQUFRLEVBQUUsSUFBSTtZQUNsQyxJQUFJLEtBQTRCLENBQUM7WUFDakMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7WUFDakMsSUFDSSxTQUFTLFlBQVksYUFBYTtnQkFDbEMscUJBQXFCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ3hFO2dCQUNFLE1BQU0sSUFBSSxHQUFHLEdBQUc7cUJBQ1gsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO3FCQUM3QixLQUFLLEVBQUU7cUJBQ1AsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksSUFBSSxFQUFFO29CQUNOLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBa0IsQ0FBQztpQkFDbkM7YUFDSjtZQUNELFlBQVk7aUJBQ1AsYUFBYSxDQUFDLG1CQUFtQixFQUFFO2dCQUNoQyxRQUFRLEVBQUUsSUFBSTtnQkFDZCxNQUFNLEVBQUU7b0JBQ0osUUFBUSxFQUFFLEtBQUs7aUJBQ2xCO2FBQ0osQ0FBQztpQkFDRCxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2hCLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2xCLElBQUksTUFBTSxFQUFFO29CQUNSLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0MsRUFBRSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUNqRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO3dCQUNwQixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3FCQUNoRTtpQkFDSjtnQkFDRCxRQUFRLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixDQUFDLENBQUMsQ0FBQztZQUNQLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7S0FDSixDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9nZ2xlTWFyayB9IGZyb20gJ3Byb3NlbWlycm9yLWNvbW1hbmRzJztcclxuaW1wb3J0IHsgaWNvbnMsIE1lbnVJdGVtIH0gZnJvbSAncHJvc2VtaXJyb3ItbWVudSc7XHJcbmltcG9ydCB7IE1hcmtUeXBlIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xyXG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSwgVGV4dFNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcclxuXHJcbmltcG9ydCB7IE1vZGFsU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3Byb3ZpZGVycy9tb2RhbC9tb2RhbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGlua0F0dHJzLCBMaW5rRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbGluay1kaWFsb2cvbGluay1kaWFsb2cuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IG1hcmtBY3RpdmUsIHJlbmRlckNsYXJpdHlJY29uIH0gZnJvbSAnLi9tZW51LWNvbW1vbic7XHJcblxyXG5mdW5jdGlvbiBzZWxlY3Rpb25Jc1dpdGhpbkxpbmsoc3RhdGU6IEVkaXRvclN0YXRlLCBhbmNob3I6IG51bWJlciwgaGVhZDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB7IGRvYyB9ID0gc3RhdGU7XHJcbiAgICBjb25zdCBoZWFkTGluayA9IGRvY1xyXG4gICAgICAgIC5yZXNvbHZlKGhlYWQpXHJcbiAgICAgICAgLm1hcmtzKClcclxuICAgICAgICAuZmluZChtID0+IG0udHlwZS5uYW1lID09PSAnbGluaycpO1xyXG4gICAgY29uc3QgYW5jaG9yTGluayA9IGRvY1xyXG4gICAgICAgIC5yZXNvbHZlKGFuY2hvcilcclxuICAgICAgICAubWFya3MoKVxyXG4gICAgICAgIC5maW5kKG0gPT4gbS50eXBlLm5hbWUgPT09ICdsaW5rJyk7XHJcbiAgICBpZiAoaGVhZExpbmsgJiYgYW5jaG9yTGluayAmJiBoZWFkTGluay5lcShhbmNob3JMaW5rKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGlua0l0ZW0obGlua01hcms6IE1hcmtUeXBlLCBtb2RhbFNlcnZpY2U6IE1vZGFsU2VydmljZSkge1xyXG4gICAgcmV0dXJuIG5ldyBNZW51SXRlbSh7XHJcbiAgICAgICAgdGl0bGU6ICdBZGQgb3IgcmVtb3ZlIGxpbmsnLFxyXG4gICAgICAgIHJlbmRlcjogcmVuZGVyQ2xhcml0eUljb24oeyBzaGFwZTogJ2xpbmsnLCBzaXplOiAyMiB9KSxcclxuICAgICAgICBjbGFzczogJycsXHJcbiAgICAgICAgY3NzOiAnJyxcclxuICAgICAgICBhY3RpdmUoc3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hcmtBY3RpdmUoc3RhdGUsIGxpbmtNYXJrKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVuYWJsZShzdGF0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHNlbGVjdGlvbiB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgIHJldHVybiAhc2VsZWN0aW9uLmVtcHR5IHx8IHNlbGVjdGlvbklzV2l0aGluTGluayhzdGF0ZSwgc2VsZWN0aW9uLmFuY2hvciwgc2VsZWN0aW9uLmhlYWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcnVuKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpIHtcclxuICAgICAgICAgICAgbGV0IGF0dHJzOiBMaW5rQXR0cnMgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uLCBkb2MgfSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uICYmXHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Jc1dpdGhpbkxpbmsoc3RhdGUsIHNlbGVjdGlvbi5hbmNob3IgKyAxLCBzZWxlY3Rpb24uaGVhZCAtIDEpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWFyayA9IGRvY1xyXG4gICAgICAgICAgICAgICAgICAgIC5yZXNvbHZlKHNlbGVjdGlvbi5hbmNob3IgKyAxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXJrcygpXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQobSA9PiBtLnR5cGUubmFtZSA9PT0gJ2xpbmsnKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnMgPSBtYXJrLmF0dHJzIGFzIExpbmtBdHRycztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtb2RhbFNlcnZpY2VcclxuICAgICAgICAgICAgICAgIC5mcm9tQ29tcG9uZW50KExpbmtEaWFsb2dDb21wb25lbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9zYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3Rpbmc6IGF0dHJzLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ciA9IHN0YXRlLnRyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzZWxlY3Rpb24ucmFuZ2VzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ciA9IHRyLnJlbW92ZU1hcmsoJGZyb20ucG9zLCAkdG8ucG9zLCBsaW5rTWFyayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaHJlZiAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyID0gdHIuYWRkTWFyaygkZnJvbS5wb3MsICR0by5wb3MsIGxpbmtNYXJrLmNyZWF0ZShyZXN1bHQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XHJcbiJdfQ==