import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DataTableCustomComponentService {
    constructor() {
        this.configMap = new Map();
    }
    registerCustomComponent(config) {
        const id = this.compoundId(config.tableId, config.columnId);
        this.configMap.set(id, config);
    }
    getCustomComponentsFor(tableId, columnId) {
        return this.configMap.get(this.compoundId(tableId, columnId));
    }
    compoundId(tableId, columnId) {
        return `${tableId}.${columnId}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DataTableCustomComponentService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DataTableCustomComponentService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DataTableCustomComponentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS1jdXN0b20tY29tcG9uZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3NoYXJlZC9jb21wb25lbnRzL2RhdGEtdGFibGUtMi9kYXRhLXRhYmxlLWN1c3RvbS1jb21wb25lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixNQUFNLGVBQWUsQ0FBQzs7QUE2RTNELE1BQU0sT0FBTywrQkFBK0I7SUFINUM7UUFJWSxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQXdDLENBQUM7S0FpQnZFO0lBZkcsdUJBQXVCLENBQUMsTUFBZ0M7UUFDcEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHNCQUFzQixDQUNsQixPQUE0QixFQUM1QixRQUEyQjtRQUUzQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVPLFVBQVUsQ0FBQyxPQUE0QixFQUFFLFFBQTJCO1FBQ3hFLE9BQU8sR0FBRyxPQUFPLElBQUksUUFBUSxFQUFFLENBQUM7SUFDcEMsQ0FBQzs4R0FqQlEsK0JBQStCO2tIQUEvQiwrQkFBK0IsY0FGNUIsTUFBTTs7MkZBRVQsK0JBQStCO2tCQUgzQyxVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhZ2VMb2NhdGlvbklkIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NvbXBvbmVudC1yZWdpc3RyeS10eXBlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBEYXRhVGFibGVMb2NhdGlvbklkID1cclxuICAgIHwge1xyXG4gICAgICAgICAgW2xvY2F0aW9uIGluIFBhZ2VMb2NhdGlvbklkXTogbG9jYXRpb24gZXh0ZW5kcyBgJHtzdHJpbmd9LWxpc3RgID8gbG9jYXRpb24gOiBuZXZlcjtcclxuICAgICAgfVtQYWdlTG9jYXRpb25JZF1cclxuICAgIHwgJ2NvbGxlY3Rpb24tY29udGVudHMnXHJcbiAgICB8ICdlZGl0LW9wdGlvbnMtbGlzdCdcclxuICAgIHwgJ21hbmFnZS1wcm9kdWN0LXZhcmlhbnQtbGlzdCdcclxuICAgIHwgJ2N1c3RvbWVyLW9yZGVyLWxpc3QnXHJcbiAgICB8IHN0cmluZztcclxuXHJcbmV4cG9ydCB0eXBlIERhdGFUYWJsZUNvbHVtbklkID1cclxuICAgIHwgJ2lkJ1xyXG4gICAgfCAnY3JlYXRlZC1hdCdcclxuICAgIHwgJ3VwZGF0ZWQtYXQnXHJcbiAgICB8ICduYW1lJ1xyXG4gICAgfCAnY29kZSdcclxuICAgIHwgJ2Rlc2NyaXB0aW9uJ1xyXG4gICAgfCAnc2x1ZydcclxuICAgIHwgJ2VuYWJsZWQnXHJcbiAgICB8ICdza3UnXHJcbiAgICB8ICdwcmljZSdcclxuICAgIHwgJ3ByaWNlLXdpdGgtdGF4J1xyXG4gICAgfCAnc3RhdHVzJ1xyXG4gICAgfCAnc3RhdGUnXHJcbiAgICB8ICdpbWFnZSdcclxuICAgIHwgJ3F1YW50aXR5J1xyXG4gICAgfCAndG90YWwnXHJcbiAgICB8ICdzdG9jay1vbi1oYW5kJ1xyXG4gICAgfCBzdHJpbmc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvbXBvbmVudHMgd2hpY2ggYXJlIHRvIGJlIHVzZWQgdG8gcmVuZGVyIGN1c3RvbSBjZWxscyBpbiBhIGRhdGEgdGFibGUgc2hvdWxkIGltcGxlbWVudCB0aGlzIGludGVyZmFjZS5cclxuICpcclxuICogVGhlIGByb3dJdGVtYCBwcm9wZXJ0eSBpcyB0aGUgZGF0YSBvYmplY3QgZm9yIHRoZSByb3csIGUuZy4gdGhlIGBQcm9kdWN0YCBvYmplY3QgaWYgdXNlZFxyXG4gKiBpbiB0aGUgYHByb2R1Y3QtbGlzdGAgdGFibGUuXHJcbiAqXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgY3VzdG9tLXRhYmxlLWNvbXBvbmVudHNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tQ29sdW1uQ29tcG9uZW50IHtcclxuICAgIHJvd0l0ZW06IGFueTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDb25maWd1cmVzIGEge0BsaW5rIEN1c3RvbURldGFpbENvbXBvbmVudH0gdG8gYmUgcGxhY2VkIGluIHRoZSBnaXZlbiBsb2NhdGlvbi5cclxuICpcclxuICogQGRvY3NDYXRlZ29yeSBjdXN0b20tdGFibGUtY29tcG9uZW50c1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBEYXRhVGFibGVDb21wb25lbnRDb25maWcge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFRoZSBsb2NhdGlvbiBpbiB0aGUgVUkgd2hlcmUgdGhlIGN1c3RvbSBjb21wb25lbnQgc2hvdWxkIGJlIHBsYWNlZC5cclxuICAgICAqL1xyXG4gICAgdGFibGVJZDogRGF0YVRhYmxlTG9jYXRpb25JZDtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBUaGUgY29sdW1uIGluIHRoZSB0YWJsZSB3aGVyZSB0aGUgY3VzdG9tIGNvbXBvbmVudCBzaG91bGQgYmUgcGxhY2VkLlxyXG4gICAgICovXHJcbiAgICBjb2x1bW5JZDogRGF0YVRhYmxlQ29sdW1uSWQ7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogVGhlIGNvbXBvbmVudCB0byByZW5kZXIgaW4gdGhlIHRhYmxlIGNlbGwuIFRoaXMgY29tcG9uZW50IHNob3VsZCBpbXBsZW1lbnQgdGhlXHJcbiAgICAgKiB7QGxpbmsgQ3VzdG9tQ29sdW1uQ29tcG9uZW50fSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGNvbXBvbmVudDogVHlwZTxDdXN0b21Db2x1bW5Db21wb25lbnQ+O1xyXG4gICAgcHJvdmlkZXJzPzogUHJvdmlkZXJbXTtcclxufVxyXG5cclxudHlwZSBDb21wb3VuZElkID0gYCR7RGF0YVRhYmxlTG9jYXRpb25JZH0uJHtEYXRhVGFibGVDb2x1bW5JZH1gO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlQ3VzdG9tQ29tcG9uZW50U2VydmljZSB7XHJcbiAgICBwcml2YXRlIGNvbmZpZ01hcCA9IG5ldyBNYXA8Q29tcG91bmRJZCwgRGF0YVRhYmxlQ29tcG9uZW50Q29uZmlnPigpO1xyXG5cclxuICAgIHJlZ2lzdGVyQ3VzdG9tQ29tcG9uZW50KGNvbmZpZzogRGF0YVRhYmxlQ29tcG9uZW50Q29uZmlnKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmNvbXBvdW5kSWQoY29uZmlnLnRhYmxlSWQsIGNvbmZpZy5jb2x1bW5JZCk7XHJcbiAgICAgICAgdGhpcy5jb25maWdNYXAuc2V0KGlkLCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEN1c3RvbUNvbXBvbmVudHNGb3IoXHJcbiAgICAgICAgdGFibGVJZDogRGF0YVRhYmxlTG9jYXRpb25JZCxcclxuICAgICAgICBjb2x1bW5JZDogRGF0YVRhYmxlQ29sdW1uSWQsXHJcbiAgICApOiBEYXRhVGFibGVDb21wb25lbnRDb25maWcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ01hcC5nZXQodGhpcy5jb21wb3VuZElkKHRhYmxlSWQsIGNvbHVtbklkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb21wb3VuZElkKHRhYmxlSWQ6IERhdGFUYWJsZUxvY2F0aW9uSWQsIGNvbHVtbklkOiBEYXRhVGFibGVDb2x1bW5JZCk6IENvbXBvdW5kSWQge1xyXG4gICAgICAgIHJldHVybiBgJHt0YWJsZUlkfS4ke2NvbHVtbklkfWA7XHJcbiAgICB9XHJcbn1cclxuIl19