import { Injectable } from '@angular/core';
import { baseKeymap } from 'prosemirror-commands';
import { dropCursor } from 'prosemirror-dropcursor';
import { gapCursor } from 'prosemirror-gapcursor';
import { history } from 'prosemirror-history';
import { keymap } from 'prosemirror-keymap';
import { DOMParser, DOMSerializer, Schema } from 'prosemirror-model';
import { schema } from 'prosemirror-schema-basic';
import { addListNodes } from 'prosemirror-schema-list';
import { EditorState, Plugin } from 'prosemirror-state';
import { columnResizing, fixTables, tableEditing } from 'prosemirror-tables';
import { EditorView } from 'prosemirror-view';
import { ModalService } from '../../../../providers/modal/modal.service';
import { iframeNode, iframeNodeView, linkMark } from './custom-nodes';
import { buildInputRules } from './inputrules';
import { buildKeymap } from './keymap';
import { customMenuPlugin } from './menu/menu-plugin';
import { imageContextMenuPlugin } from './plugins/image-plugin';
import { linkSelectPlugin } from './plugins/link-select-plugin';
import { rawEditorPlugin } from './plugins/raw-editor-plugin';
import { getTableNodes, tableContextMenuPlugin } from './plugins/tables-plugin';
import * as i0 from "@angular/core";
import * as i1 from "./context-menu/context-menu.service";
export class ProsemirrorService {
    constructor(injector, contextMenuService) {
        this.injector = injector;
        this.contextMenuService = contextMenuService;
        // Mix the nodes from prosemirror-schema-list into the basic schema to
        // create a schema with list support.
        this.mySchema = new Schema({
            nodes: addListNodes(schema.spec.nodes, 'paragraph block*', 'block')
                .append(getTableNodes())
                .addToEnd('iframe', iframeNode),
            marks: schema.spec.marks.update('link', linkMark),
        });
        this.enabled = true;
        /**
         * This is a Document used for processing incoming text. It ensures that malicious HTML is not executed by the
         * actual document that is attached to the browser DOM, which could cause XSS attacks.
         */
        this.detachedDoc = null;
    }
    createEditorView(options) {
        this.editorView = new EditorView(options.element, {
            state: this.getStateFromText(''),
            dispatchTransaction: tr => {
                if (!this.enabled) {
                    return;
                }
                this.editorView.updateState(this.editorView.state.apply(tr));
                if (tr.docChanged) {
                    const content = this.getTextFromState(this.editorView.state);
                    options.onTextInput(content);
                }
            },
            editable: () => options.isReadOnly(),
            handleDOMEvents: {
                focus: view => {
                    this.contextMenuService.setVisibility(true);
                },
                blur: view => {
                    this.contextMenuService.setVisibility(false);
                },
            },
            nodeViews: {
                iframe: iframeNodeView,
            },
        });
    }
    update(text) {
        if (this.editorView) {
            const currentText = this.getTextFromState(this.editorView.state);
            if (text !== currentText) {
                let state = this.getStateFromText(text);
                if (document.body.contains(this.editorView.dom)) {
                    const fix = fixTables(state);
                    if (fix) {
                        state = state.apply(fix.setMeta('addToHistory', false));
                    }
                    this.editorView.updateState(state);
                }
            }
        }
    }
    destroy() {
        if (this.editorView) {
            this.editorView.destroy();
        }
    }
    setEnabled(enabled) {
        if (this.editorView) {
            this.enabled = enabled;
            // Updating the state causes ProseMirror to check the
            // `editable()` function from the contructor config object
            // newly.
            this.editorView.updateState(this.editorView.state);
        }
    }
    getStateFromText(text) {
        const doc = this.getDetachedDoc();
        const div = doc.createElement('div');
        div.innerHTML = text ?? '';
        return EditorState.create({
            doc: DOMParser.fromSchema(this.mySchema).parse(div),
            plugins: this.configurePlugins({ schema: this.mySchema, floatingMenu: false }),
        });
    }
    getTextFromState(state) {
        const doc = this.getDetachedDoc();
        const div = doc.createElement('div');
        const fragment = DOMSerializer.fromSchema(this.mySchema).serializeFragment(state.doc.content);
        div.appendChild(fragment);
        return div.innerHTML;
    }
    configurePlugins(options) {
        const plugins = [
            buildInputRules(options.schema),
            keymap(buildKeymap(options.schema, options.mapKeys)),
            keymap(baseKeymap),
            dropCursor(),
            gapCursor(),
            linkSelectPlugin,
            columnResizing({}),
            tableEditing({ allowTableNodeSelection: true }),
            tableContextMenuPlugin(this.contextMenuService),
            imageContextMenuPlugin(this.contextMenuService, this.injector.get(ModalService)),
            rawEditorPlugin(this.contextMenuService, this.injector.get(ModalService)),
            customMenuPlugin({
                floatingMenu: options.floatingMenu,
                injector: this.injector,
                schema: options.schema,
            }),
        ];
        if (options.history !== false) {
            plugins.push(history());
        }
        return plugins.concat(new Plugin({
            props: {
                attributes: { class: 'vdr-prosemirror' },
            },
        }));
    }
    getDetachedDoc() {
        if (!this.detachedDoc) {
            this.detachedDoc = document.implementation.createHTMLDocument();
        }
        return this.detachedDoc;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ProsemirrorService, deps: [{ token: i0.Injector }, { token: i1.ContextMenuService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ProsemirrorService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ProsemirrorService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.ContextMenuService }]; } });
//# sourceMappingURL=data:application/json;base64,