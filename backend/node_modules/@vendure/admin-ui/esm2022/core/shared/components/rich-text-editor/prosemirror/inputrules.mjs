import { ellipsis, emDash, inputRules, smartQuotes, textblockTypeInputRule, wrappingInputRule, } from 'prosemirror-inputrules';
// : (NodeType) → InputRule
// Given a blockquote node type, returns an input rule that turns `"> "`
// at the start of a textblock into a blockquote.
export function blockQuoteRule(nodeType) {
    return wrappingInputRule(/^\s*>\s$/, nodeType);
}
// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a number
// followed by a dot at the start of a textblock into an ordered list.
export function orderedListRule(nodeType) {
    return wrappingInputRule(/^(\d+)\.\s$/, nodeType, match => ({ order: +match[1] }), (match, node) => node.childCount + node.attrs.order === +match[1]);
}
// : (NodeType) → InputRule
// Given a list node type, returns an input rule that turns a bullet
// (dash, plush, or asterisk) at the start of a textblock into a
// bullet list.
export function bulletListRule(nodeType) {
    return wrappingInputRule(/^\s*([-+*])\s$/, nodeType);
}
// : (NodeType) → InputRule
// Given a code block node type, returns an input rule that turns a
// textblock starting with three backticks into a code block.
export function codeBlockRule(nodeType) {
    return textblockTypeInputRule(/^```$/, nodeType);
}
// : (NodeType, number) → InputRule
// Given a node type and a maximum level, creates an input rule that
// turns up to that number of `#` characters followed by a space at
// the start of a textblock into a heading whose level corresponds to
// the number of `#` signs.
export function headingRule(nodeType, maxLevel) {
    return textblockTypeInputRule(new RegExp('^(#{1,' + maxLevel + '})\\s$'), nodeType, match => ({
        level: match[1].length,
    }));
}
// : (Schema) → Plugin
// A set of input rules for creating the basic block quotes, lists,
// code blocks, and heading.
export function buildInputRules(schema) {
    const rules = smartQuotes.concat(ellipsis, emDash);
    let type;
    /* eslint-disable no-cond-assign */
    if ((type = schema.nodes.blockquote)) {
        rules.push(blockQuoteRule(type));
    }
    if ((type = schema.nodes.ordered_list)) {
        rules.push(orderedListRule(type));
    }
    if ((type = schema.nodes.bullet_list)) {
        rules.push(bulletListRule(type));
    }
    if ((type = schema.nodes.code_block)) {
        rules.push(codeBlockRule(type));
    }
    if ((type = schema.nodes.heading)) {
        rules.push(headingRule(type, 6));
    }
    return inputRules({ rules });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRydWxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvc2hhcmVkL2NvbXBvbmVudHMvcmljaC10ZXh0LWVkaXRvci9wcm9zZW1pcnJvci9pbnB1dHJ1bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsc0JBQXNCLEVBQ3RCLGlCQUFpQixHQUNwQixNQUFNLHdCQUF3QixDQUFDO0FBSWhDLDJCQUEyQjtBQUMzQix3RUFBd0U7QUFDeEUsaURBQWlEO0FBQ2pELE1BQU0sVUFBVSxjQUFjLENBQUMsUUFBUTtJQUNuQyxPQUFPLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQsMkJBQTJCO0FBQzNCLG9FQUFvRTtBQUNwRSxzRUFBc0U7QUFDdEUsTUFBTSxVQUFVLGVBQWUsQ0FBQyxRQUFRO0lBQ3BDLE9BQU8saUJBQWlCLENBQ3BCLGFBQWEsRUFDYixRQUFRLEVBQ1IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDL0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUNwRSxDQUFDO0FBQ04sQ0FBQztBQUVELDJCQUEyQjtBQUMzQixvRUFBb0U7QUFDcEUsZ0VBQWdFO0FBQ2hFLGVBQWU7QUFDZixNQUFNLFVBQVUsY0FBYyxDQUFDLFFBQVE7SUFDbkMsT0FBTyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQsMkJBQTJCO0FBQzNCLG1FQUFtRTtBQUNuRSw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLGFBQWEsQ0FBQyxRQUFRO0lBQ2xDLE9BQU8sc0JBQXNCLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFFRCxtQ0FBbUM7QUFDbkMsb0VBQW9FO0FBQ3BFLG1FQUFtRTtBQUNuRSxxRUFBcUU7QUFDckUsMkJBQTJCO0FBQzNCLE1BQU0sVUFBVSxXQUFXLENBQUMsUUFBUSxFQUFFLFFBQVE7SUFDMUMsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUYsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO0tBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQztBQUVELHNCQUFzQjtBQUN0QixtRUFBbUU7QUFDbkUsNEJBQTRCO0FBQzVCLE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBYztJQUMxQyxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRCxJQUFJLElBQWMsQ0FBQztJQUNuQixtQ0FBbUM7SUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDcEM7SUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDcEMsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNyQztJQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUNuQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ3BDO0lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ2xDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEM7SUFDRCxPQUFPLFVBQVUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDakMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBlbGxpcHNpcyxcclxuICAgIGVtRGFzaCxcclxuICAgIGlucHV0UnVsZXMsXHJcbiAgICBzbWFydFF1b3RlcyxcclxuICAgIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUsXHJcbiAgICB3cmFwcGluZ0lucHV0UnVsZSxcclxufSBmcm9tICdwcm9zZW1pcnJvci1pbnB1dHJ1bGVzJztcclxuaW1wb3J0IHsgTm9kZVR5cGUsIFNjaGVtYSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcclxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xyXG5cclxuLy8gOiAoTm9kZVR5cGUpIOKGkiBJbnB1dFJ1bGVcclxuLy8gR2l2ZW4gYSBibG9ja3F1b3RlIG5vZGUgdHlwZSwgcmV0dXJucyBhbiBpbnB1dCBydWxlIHRoYXQgdHVybnMgYFwiPiBcImBcclxuLy8gYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrIGludG8gYSBibG9ja3F1b3RlLlxyXG5leHBvcnQgZnVuY3Rpb24gYmxvY2tRdW90ZVJ1bGUobm9kZVR5cGUpIHtcclxuICAgIHJldHVybiB3cmFwcGluZ0lucHV0UnVsZSgvXlxccyo+XFxzJC8sIG5vZGVUeXBlKTtcclxufVxyXG5cclxuLy8gOiAoTm9kZVR5cGUpIOKGkiBJbnB1dFJ1bGVcclxuLy8gR2l2ZW4gYSBsaXN0IG5vZGUgdHlwZSwgcmV0dXJucyBhbiBpbnB1dCBydWxlIHRoYXQgdHVybnMgYSBudW1iZXJcclxuLy8gZm9sbG93ZWQgYnkgYSBkb3QgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrIGludG8gYW4gb3JkZXJlZCBsaXN0LlxyXG5leHBvcnQgZnVuY3Rpb24gb3JkZXJlZExpc3RSdWxlKG5vZGVUeXBlKSB7XHJcbiAgICByZXR1cm4gd3JhcHBpbmdJbnB1dFJ1bGUoXHJcbiAgICAgICAgL14oXFxkKylcXC5cXHMkLyxcclxuICAgICAgICBub2RlVHlwZSxcclxuICAgICAgICBtYXRjaCA9PiAoeyBvcmRlcjogK21hdGNoWzFdIH0pLFxyXG4gICAgICAgIChtYXRjaCwgbm9kZSkgPT4gbm9kZS5jaGlsZENvdW50ICsgbm9kZS5hdHRycy5vcmRlciA9PT0gK21hdGNoWzFdLFxyXG4gICAgKTtcclxufVxyXG5cclxuLy8gOiAoTm9kZVR5cGUpIOKGkiBJbnB1dFJ1bGVcclxuLy8gR2l2ZW4gYSBsaXN0IG5vZGUgdHlwZSwgcmV0dXJucyBhbiBpbnB1dCBydWxlIHRoYXQgdHVybnMgYSBidWxsZXRcclxuLy8gKGRhc2gsIHBsdXNoLCBvciBhc3RlcmlzaykgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrIGludG8gYVxyXG4vLyBidWxsZXQgbGlzdC5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1bGxldExpc3RSdWxlKG5vZGVUeXBlKSB7XHJcbiAgICByZXR1cm4gd3JhcHBpbmdJbnB1dFJ1bGUoL15cXHMqKFstKypdKVxccyQvLCBub2RlVHlwZSk7XHJcbn1cclxuXHJcbi8vIDogKE5vZGVUeXBlKSDihpIgSW5wdXRSdWxlXHJcbi8vIEdpdmVuIGEgY29kZSBibG9jayBub2RlIHR5cGUsIHJldHVybnMgYW4gaW5wdXQgcnVsZSB0aGF0IHR1cm5zIGFcclxuLy8gdGV4dGJsb2NrIHN0YXJ0aW5nIHdpdGggdGhyZWUgYmFja3RpY2tzIGludG8gYSBjb2RlIGJsb2NrLlxyXG5leHBvcnQgZnVuY3Rpb24gY29kZUJsb2NrUnVsZShub2RlVHlwZSkge1xyXG4gICAgcmV0dXJuIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUoL15gYGAkLywgbm9kZVR5cGUpO1xyXG59XHJcblxyXG4vLyA6IChOb2RlVHlwZSwgbnVtYmVyKSDihpIgSW5wdXRSdWxlXHJcbi8vIEdpdmVuIGEgbm9kZSB0eXBlIGFuZCBhIG1heGltdW0gbGV2ZWwsIGNyZWF0ZXMgYW4gaW5wdXQgcnVsZSB0aGF0XHJcbi8vIHR1cm5zIHVwIHRvIHRoYXQgbnVtYmVyIG9mIGAjYCBjaGFyYWN0ZXJzIGZvbGxvd2VkIGJ5IGEgc3BhY2UgYXRcclxuLy8gdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrIGludG8gYSBoZWFkaW5nIHdob3NlIGxldmVsIGNvcnJlc3BvbmRzIHRvXHJcbi8vIHRoZSBudW1iZXIgb2YgYCNgIHNpZ25zLlxyXG5leHBvcnQgZnVuY3Rpb24gaGVhZGluZ1J1bGUobm9kZVR5cGUsIG1heExldmVsKSB7XHJcbiAgICByZXR1cm4gdGV4dGJsb2NrVHlwZUlucHV0UnVsZShuZXcgUmVnRXhwKCdeKCN7MSwnICsgbWF4TGV2ZWwgKyAnfSlcXFxccyQnKSwgbm9kZVR5cGUsIG1hdGNoID0+ICh7XHJcbiAgICAgICAgbGV2ZWw6IG1hdGNoWzFdLmxlbmd0aCxcclxuICAgIH0pKTtcclxufVxyXG5cclxuLy8gOiAoU2NoZW1hKSDihpIgUGx1Z2luXHJcbi8vIEEgc2V0IG9mIGlucHV0IHJ1bGVzIGZvciBjcmVhdGluZyB0aGUgYmFzaWMgYmxvY2sgcXVvdGVzLCBsaXN0cyxcclxuLy8gY29kZSBibG9ja3MsIGFuZCBoZWFkaW5nLlxyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRJbnB1dFJ1bGVzKHNjaGVtYTogU2NoZW1hKTogUGx1Z2luIHtcclxuICAgIGNvbnN0IHJ1bGVzID0gc21hcnRRdW90ZXMuY29uY2F0KGVsbGlwc2lzLCBlbURhc2gpO1xyXG4gICAgbGV0IHR5cGU6IE5vZGVUeXBlO1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cclxuICAgIGlmICgodHlwZSA9IHNjaGVtYS5ub2Rlcy5ibG9ja3F1b3RlKSkge1xyXG4gICAgICAgIHJ1bGVzLnB1c2goYmxvY2tRdW90ZVJ1bGUodHlwZSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKCh0eXBlID0gc2NoZW1hLm5vZGVzLm9yZGVyZWRfbGlzdCkpIHtcclxuICAgICAgICBydWxlcy5wdXNoKG9yZGVyZWRMaXN0UnVsZSh0eXBlKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHR5cGUgPSBzY2hlbWEubm9kZXMuYnVsbGV0X2xpc3QpKSB7XHJcbiAgICAgICAgcnVsZXMucHVzaChidWxsZXRMaXN0UnVsZSh0eXBlKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHR5cGUgPSBzY2hlbWEubm9kZXMuY29kZV9ibG9jaykpIHtcclxuICAgICAgICBydWxlcy5wdXNoKGNvZGVCbG9ja1J1bGUodHlwZSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKCh0eXBlID0gc2NoZW1hLm5vZGVzLmhlYWRpbmcpKSB7XHJcbiAgICAgICAgcnVsZXMucHVzaChoZWFkaW5nUnVsZSh0eXBlLCA2KSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5wdXRSdWxlcyh7IHJ1bGVzIH0pO1xyXG59XHJcbiJdfQ==