import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../../providers/local-storage/local-storage.service";
export class FilterPresetService {
    constructor(localStorageService) {
        this.localStorageService = localStorageService;
        this._presetChanges = new Subject();
        this.presetChanges$ = this._presetChanges.asObservable();
    }
    getDataTableConfig(dataTableId) {
        const dataTableConfig = this.localStorageService.get('dataTableConfig') ?? {};
        if (!dataTableConfig[dataTableId]) {
            dataTableConfig[dataTableId] = {
                visibility: [],
                order: {},
                showSearchFilterRow: false,
                filterPresets: [],
            };
        }
        return dataTableConfig;
    }
    getFilterPresets(dataTableId) {
        const dataTableConfig = this.getDataTableConfig(dataTableId);
        return dataTableConfig[dataTableId].filterPresets ?? [];
    }
    saveFilterPreset(config) {
        const dataTableConfig = this.getDataTableConfig(config.dataTableId);
        const filterPresets = dataTableConfig[config.dataTableId].filterPresets ?? [];
        const existingName = filterPresets.find(p => p.name === config.name);
        if (existingName) {
            existingName.value = config.value;
        }
        else {
            filterPresets.push({
                name: config.name,
                value: config.value,
            });
        }
        dataTableConfig[config.dataTableId].filterPresets = filterPresets;
        this.localStorageService.set('dataTableConfig', dataTableConfig);
        this._presetChanges.next(filterPresets);
    }
    deleteFilterPreset(config) {
        const dataTableConfig = this.getDataTableConfig(config.dataTableId);
        dataTableConfig[config.dataTableId].filterPresets = dataTableConfig[config.dataTableId].filterPresets.filter(p => p.name !== config.name);
        this.localStorageService.set('dataTableConfig', dataTableConfig);
        this._presetChanges.next(dataTableConfig[config.dataTableId].filterPresets);
    }
    reorderPresets(dataTableId, fromIndex, toIndex) {
        const presets = this.getFilterPresets(dataTableId);
        moveItemInArray(presets, fromIndex, toIndex);
        const dataTableConfig = this.getDataTableConfig(dataTableId);
        dataTableConfig[dataTableId].filterPresets = presets;
        this.localStorageService.set('dataTableConfig', dataTableConfig);
        this._presetChanges.next(presets);
    }
    renameFilterPreset(config) {
        const dataTableConfig = this.getDataTableConfig(config.dataTableId);
        const filterPresets = dataTableConfig[config.dataTableId].filterPresets ?? [];
        const existingName = filterPresets.find(p => p.name === config.oldName);
        if (existingName) {
            existingName.name = config.newName;
            dataTableConfig[config.dataTableId].filterPresets = filterPresets;
            this.localStorageService.set('dataTableConfig', dataTableConfig);
            this._presetChanges.next(filterPresets);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FilterPresetService, deps: [{ token: i1.LocalStorageService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FilterPresetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FilterPresetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.LocalStorageService }]; } });
//# sourceMappingURL=data:application/json;base64,