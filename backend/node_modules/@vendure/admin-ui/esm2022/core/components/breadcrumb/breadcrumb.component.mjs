import { Component } from '@angular/core';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../providers/breadcrumb/breadcrumb.service";
import * as i2 from "@angular/common";
import * as i3 from "@clr/angular";
import * as i4 from "@angular/router";
import * as i5 from "@ngx-translate/core";
/**
 * A breadcrumbs component which reads the route config and any route that has a `data.breadcrumb` property will
 * be displayed in the breadcrumb trail.
 *
 * The `breadcrumb` property can be a string or a function. If a function, it will be passed the route's `data`
 * object (which will include all resolved keys) and any route params, and should return a BreadcrumbValue.
 *
 * See the test config to get an idea of allowable configs for breadcrumbs.
 */
export class BreadcrumbComponent {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this.destroy$ = new Subject();
        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$;
        this.parentBreadcrumb$ = this.breadcrumbService.breadcrumbs$.pipe(map(breadcrumbs => (1 < breadcrumbs.length ? breadcrumbs[breadcrumbs.length - 2] : undefined)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: i1.BreadcrumbService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: BreadcrumbComponent, selector: "vdr-breadcrumb", ngImport: i0, template: "<nav role=\"navigation\">\r\n    <ul class=\"breadcrumbs\">\r\n        <li *ngFor=\"let breadcrumb of breadcrumbs$ | async; let isLast = last\" [title]=\"breadcrumb.label\">\r\n            <a [routerLink]=\"breadcrumb.link\" *ngIf=\"!isLast\">{{ breadcrumb.label | translate }}</a>\r\n            <ng-container *ngIf=\"!isLast\"\r\n                ><clr-icon shape=\"caret right\" class=\"color-weight-400 mx-1\"></clr-icon\r\n            ></ng-container>\r\n            <ng-container *ngIf=\"isLast\">{{ breadcrumb.label | translate }}</ng-container>\r\n        </li>\r\n    </ul>\r\n    <ul class=\"breadcrumbs mobile\" *ngIf=\"parentBreadcrumb$ | async as parentBreadcrumb\">\r\n        <li>\r\n            <clr-icon shape=\"caret left\" class=\"color-weight-400 mr-1\"></clr-icon>\r\n            <a [routerLink]=\"parentBreadcrumb.link\">{{ parentBreadcrumb.label | translate }}</a>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n", styles: [":host{display:block;padding:0;position:relative}.breadcrumbs{list-style-type:none;display:flex;flex-wrap:wrap;align-items:center;overflow-x:auto;max-width:100vw;line-height:100%;min-height:40px;padding:calc(var(--space-unit) * 1.5) calc(var(--space-unit) * 2.5);font-size:var(--font-size-sm);background-color:var(--color-page-header-item-bg);border-radius:var(--border-radius-lg)}.breadcrumbs li{display:inline-block;white-space:nowrap;max-width:300px;overflow:hidden;text-overflow:ellipsis}.breadcrumbs li a:link,.breadcrumbs li a:visited{color:var(--color-weight-700)}.breadcrumbs li:last-child{font-weight:600}@media screen and (max-width: 992px){.breadcrumbs:not(.mobile){display:none}}@media screen and (min-width: 992px){.breadcrumbs.mobile{display:none}}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i4.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BreadcrumbComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-breadcrumb', template: "<nav role=\"navigation\">\r\n    <ul class=\"breadcrumbs\">\r\n        <li *ngFor=\"let breadcrumb of breadcrumbs$ | async; let isLast = last\" [title]=\"breadcrumb.label\">\r\n            <a [routerLink]=\"breadcrumb.link\" *ngIf=\"!isLast\">{{ breadcrumb.label | translate }}</a>\r\n            <ng-container *ngIf=\"!isLast\"\r\n                ><clr-icon shape=\"caret right\" class=\"color-weight-400 mx-1\"></clr-icon\r\n            ></ng-container>\r\n            <ng-container *ngIf=\"isLast\">{{ breadcrumb.label | translate }}</ng-container>\r\n        </li>\r\n    </ul>\r\n    <ul class=\"breadcrumbs mobile\" *ngIf=\"parentBreadcrumb$ | async as parentBreadcrumb\">\r\n        <li>\r\n            <clr-icon shape=\"caret left\" class=\"color-weight-400 mr-1\"></clr-icon>\r\n            <a [routerLink]=\"parentBreadcrumb.link\">{{ parentBreadcrumb.label | translate }}</a>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n", styles: [":host{display:block;padding:0;position:relative}.breadcrumbs{list-style-type:none;display:flex;flex-wrap:wrap;align-items:center;overflow-x:auto;max-width:100vw;line-height:100%;min-height:40px;padding:calc(var(--space-unit) * 1.5) calc(var(--space-unit) * 2.5);font-size:var(--font-size-sm);background-color:var(--color-page-header-item-bg);border-radius:var(--border-radius-lg)}.breadcrumbs li{display:inline-block;white-space:nowrap;max-width:300px;overflow:hidden;text-overflow:ellipsis}.breadcrumbs li a:link,.breadcrumbs li a:visited{color:var(--color-weight-700)}.breadcrumbs li:last-child{font-weight:600}@media screen and (max-width: 992px){.breadcrumbs:not(.mobile){display:none}}@media screen and (min-width: 992px){.breadcrumbs.mobile{display:none}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.BreadcrumbService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2NvbXBvbmVudHMvYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvY29tcG9uZW50cy9icmVhZGNydW1iL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQUdyQzs7Ozs7Ozs7R0FRRztBQU1ILE1BQU0sT0FBTyxtQkFBbUI7SUFLNUIsWUFBb0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFGaEQsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFHbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDO1FBQ3hELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDN0QsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQ2pHLENBQUM7SUFDTixDQUFDOzhHQVZRLG1CQUFtQjtrR0FBbkIsbUJBQW1CLHNEQ25CaEMsbzZCQWlCQTs7MkZERWEsbUJBQW1CO2tCQUwvQixTQUFTOytCQUNJLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQnJlYWRjcnVtYlNlcnZpY2UgfSBmcm9tICcuLi8uLi9wcm92aWRlcnMvYnJlYWRjcnVtYi9icmVhZGNydW1iLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEEgYnJlYWRjcnVtYnMgY29tcG9uZW50IHdoaWNoIHJlYWRzIHRoZSByb3V0ZSBjb25maWcgYW5kIGFueSByb3V0ZSB0aGF0IGhhcyBhIGBkYXRhLmJyZWFkY3J1bWJgIHByb3BlcnR5IHdpbGxcclxuICogYmUgZGlzcGxheWVkIGluIHRoZSBicmVhZGNydW1iIHRyYWlsLlxyXG4gKlxyXG4gKiBUaGUgYGJyZWFkY3J1bWJgIHByb3BlcnR5IGNhbiBiZSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uLiBJZiBhIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIHBhc3NlZCB0aGUgcm91dGUncyBgZGF0YWBcclxuICogb2JqZWN0ICh3aGljaCB3aWxsIGluY2x1ZGUgYWxsIHJlc29sdmVkIGtleXMpIGFuZCBhbnkgcm91dGUgcGFyYW1zLCBhbmQgc2hvdWxkIHJldHVybiBhIEJyZWFkY3J1bWJWYWx1ZS5cclxuICpcclxuICogU2VlIHRoZSB0ZXN0IGNvbmZpZyB0byBnZXQgYW4gaWRlYSBvZiBhbGxvd2FibGUgY29uZmlncyBmb3IgYnJlYWRjcnVtYnMuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLWJyZWFkY3J1bWInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2JyZWFkY3J1bWIuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vYnJlYWRjcnVtYi5jb21wb25lbnQuc2NzcyddLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYkNvbXBvbmVudCB7XHJcbiAgICBicmVhZGNydW1icyQ6IE9ic2VydmFibGU8QXJyYXk8eyBsaW5rOiBzdHJpbmcgfCBhbnlbXTsgbGFiZWw6IHN0cmluZyB9Pj47XHJcbiAgICBwYXJlbnRCcmVhZGNydW1iJDogT2JzZXJ2YWJsZTx7IGxpbms6IHN0cmluZyB8IGFueVtdOyBsYWJlbDogc3RyaW5nIH0gfCB1bmRlZmluZWQ+O1xyXG4gICAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBicmVhZGNydW1iU2VydmljZTogQnJlYWRjcnVtYlNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLmJyZWFkY3J1bWJzJCA9IHRoaXMuYnJlYWRjcnVtYlNlcnZpY2UuYnJlYWRjcnVtYnMkO1xyXG4gICAgICAgIHRoaXMucGFyZW50QnJlYWRjcnVtYiQgPSB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLmJyZWFkY3J1bWJzJC5waXBlKFxyXG4gICAgICAgICAgICBtYXAoYnJlYWRjcnVtYnMgPT4gKDEgPCBicmVhZGNydW1icy5sZW5ndGggPyBicmVhZGNydW1ic1ticmVhZGNydW1icy5sZW5ndGggLSAyXSA6IHVuZGVmaW5lZCkpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiPG5hdiByb2xlPVwibmF2aWdhdGlvblwiPlxyXG4gICAgPHVsIGNsYXNzPVwiYnJlYWRjcnVtYnNcIj5cclxuICAgICAgICA8bGkgKm5nRm9yPVwibGV0IGJyZWFkY3J1bWIgb2YgYnJlYWRjcnVtYnMkIHwgYXN5bmM7IGxldCBpc0xhc3QgPSBsYXN0XCIgW3RpdGxlXT1cImJyZWFkY3J1bWIubGFiZWxcIj5cclxuICAgICAgICAgICAgPGEgW3JvdXRlckxpbmtdPVwiYnJlYWRjcnVtYi5saW5rXCIgKm5nSWY9XCIhaXNMYXN0XCI+e3sgYnJlYWRjcnVtYi5sYWJlbCB8IHRyYW5zbGF0ZSB9fTwvYT5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc0xhc3RcIlxyXG4gICAgICAgICAgICAgICAgPjxjbHItaWNvbiBzaGFwZT1cImNhcmV0IHJpZ2h0XCIgY2xhc3M9XCJjb2xvci13ZWlnaHQtNDAwIG14LTFcIj48L2Nsci1pY29uXHJcbiAgICAgICAgICAgID48L25nLWNvbnRhaW5lcj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlzTGFzdFwiPnt7IGJyZWFkY3J1bWIubGFiZWwgfCB0cmFuc2xhdGUgfX08L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8L2xpPlxyXG4gICAgPC91bD5cclxuICAgIDx1bCBjbGFzcz1cImJyZWFkY3J1bWJzIG1vYmlsZVwiICpuZ0lmPVwicGFyZW50QnJlYWRjcnVtYiQgfCBhc3luYyBhcyBwYXJlbnRCcmVhZGNydW1iXCI+XHJcbiAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8Y2xyLWljb24gc2hhcGU9XCJjYXJldCBsZWZ0XCIgY2xhc3M9XCJjb2xvci13ZWlnaHQtNDAwIG1yLTFcIj48L2Nsci1pY29uPlxyXG4gICAgICAgICAgICA8YSBbcm91dGVyTGlua109XCJwYXJlbnRCcmVhZGNydW1iLmxpbmtcIj57eyBwYXJlbnRCcmVhZGNydW1iLmxhYmVsIHwgdHJhbnNsYXRlIH19PC9hPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICA8L3VsPlxyXG48L25hdj5cclxuIl19