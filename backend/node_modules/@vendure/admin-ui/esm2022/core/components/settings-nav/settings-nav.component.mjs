import { ChangeDetectionStrategy, Component } from '@angular/core';
import { map } from 'rxjs/operators';
import { BaseNavComponent } from '../base-nav/base-nav.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@clr/angular";
import * as i3 from "@angular/router";
import * as i4 from "../../shared/components/dropdown/dropdown.component";
import * as i5 from "../../shared/components/dropdown/dropdown-menu.component";
import * as i6 from "../../shared/components/dropdown/dropdown-trigger.directive";
import * as i7 from "../../shared/components/dropdown/dropdown-item.directive";
import * as i8 from "../../shared/components/status-badge/status-badge.component";
import * as i9 from "../../shared/components/ui-extension-point/ui-extension-point.component";
import * as i10 from "@ngx-translate/core";
export class SettingsNavComponent extends BaseNavComponent {
    ngOnInit() {
        super.ngOnInit();
        this.settingsMenuConfig$ = this.navBuilderService.menuConfig$.pipe(map(sections => sections.filter(s => s.displayMode === 'settings')));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: SettingsNavComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: SettingsNavComponent, selector: "vdr-settings-nav", usesInheritance: true, ngImport: i0, template: "<nav>\r\n    <section class=\"settings-nav-content\">\r\n        <ng-container *ngFor=\"let section of settingsMenuConfig$ | async\">\r\n            <vdr-ui-extension-point\r\n                [locationId]=\"section.id\"\r\n                api=\"navMenu\"\r\n                [topPx]=\"-6\"\r\n                [leftPx]=\"8\"\r\n                display=\"block\"\r\n            >\r\n                <vdr-dropdown>\r\n                    <button class=\"setting-link\" vdrDropdownTrigger>\r\n                        <div>\r\n                            <ng-container\r\n                                *ngIf=\"navBuilderService.sectionBadges[section.id] | async as sectionBadge\"\r\n                            >\r\n                                <vdr-status-badge\r\n                                    *ngIf=\"sectionBadge !== 'none'\"\r\n                                    [type]=\"sectionBadge\"\r\n                                ></vdr-status-badge>\r\n                            </ng-container>\r\n                            <clr-icon\r\n                                *ngIf=\"section.icon\"\r\n                                [attr.shape]=\"section.icon || 'block'\"\r\n                                size=\"20\"\r\n                            ></clr-icon>\r\n                            <label class=\"md:hidden\" [for]=\"section.id\">{{ section.label | translate }}</label>\r\n                        </div>\r\n                        <clr-icon class=\"md:hidden\" shape=\"caret right\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"top-right\">\r\n                        <ng-container *ngFor=\"let item of section.items\">\r\n                            <div *ngIf=\"shouldDisplayLink(item)\" class=\"menu-link\">\r\n                                <a\r\n                                    vdrDropdownItem\r\n                                    [attr.data-item-id]=\"section.id\"\r\n                                    [routerLink]=\"getRouterLink(item)\"\r\n                                    routerLinkActive=\"active\"\r\n                                    (click)=\"item.onClick && item.onClick($event)\"\r\n                                >\r\n                                    <ng-container *ngIf=\"item.statusBadge | async as itemBadge\">\r\n                                        <vdr-status-badge\r\n                                            *ngIf=\"itemBadge.type !== 'none'\"\r\n                                            [type]=\"itemBadge.type\"\r\n                                        ></vdr-status-badge>\r\n                                    </ng-container>\r\n                                    <clr-icon [attr.shape]=\"item.icon || 'block'\" size=\"20\"></clr-icon>\r\n                                    <div class=\"\">{{ item.label | translate }}</div>\r\n                                </a>\r\n                            </div>\r\n                        </ng-container>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </vdr-ui-extension-point>\r\n        </ng-container>\r\n    </section>\r\n</nav>\r\n", styles: [".setting-link{width:100%;border:none;display:flex;justify-content:space-between;font-size:var(--font-size-xs);align-items:center;cursor:pointer;background-color:transparent;padding:var(--space-unit);color:var(--color-left-nav-text)}.setting-link:hover{color:var(--color-left-nav-text-hover)}.setting-link clr-icon{margin-inline-end:6px}.menu-link{position:relative}.menu-link vdr-status-badge{left:20px;top:3px}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i3.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "ariaCurrentWhenActive", "routerLinkActive"], outputs: ["isActiveChange"], exportAs: ["routerLinkActive"] }, { kind: "component", type: i4.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i5.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i6.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i7.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i8.StatusBadgeComponent, selector: "vdr-status-badge", inputs: ["type"] }, { kind: "component", type: i9.UiExtensionPointComponent, selector: "vdr-ui-extension-point", inputs: ["locationId", "metadata", "topPx", "leftPx", "display", "api"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i10.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: SettingsNavComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-settings-nav', changeDetection: ChangeDetectionStrategy.OnPush, template: "<nav>\r\n    <section class=\"settings-nav-content\">\r\n        <ng-container *ngFor=\"let section of settingsMenuConfig$ | async\">\r\n            <vdr-ui-extension-point\r\n                [locationId]=\"section.id\"\r\n                api=\"navMenu\"\r\n                [topPx]=\"-6\"\r\n                [leftPx]=\"8\"\r\n                display=\"block\"\r\n            >\r\n                <vdr-dropdown>\r\n                    <button class=\"setting-link\" vdrDropdownTrigger>\r\n                        <div>\r\n                            <ng-container\r\n                                *ngIf=\"navBuilderService.sectionBadges[section.id] | async as sectionBadge\"\r\n                            >\r\n                                <vdr-status-badge\r\n                                    *ngIf=\"sectionBadge !== 'none'\"\r\n                                    [type]=\"sectionBadge\"\r\n                                ></vdr-status-badge>\r\n                            </ng-container>\r\n                            <clr-icon\r\n                                *ngIf=\"section.icon\"\r\n                                [attr.shape]=\"section.icon || 'block'\"\r\n                                size=\"20\"\r\n                            ></clr-icon>\r\n                            <label class=\"md:hidden\" [for]=\"section.id\">{{ section.label | translate }}</label>\r\n                        </div>\r\n                        <clr-icon class=\"md:hidden\" shape=\"caret right\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"top-right\">\r\n                        <ng-container *ngFor=\"let item of section.items\">\r\n                            <div *ngIf=\"shouldDisplayLink(item)\" class=\"menu-link\">\r\n                                <a\r\n                                    vdrDropdownItem\r\n                                    [attr.data-item-id]=\"section.id\"\r\n                                    [routerLink]=\"getRouterLink(item)\"\r\n                                    routerLinkActive=\"active\"\r\n                                    (click)=\"item.onClick && item.onClick($event)\"\r\n                                >\r\n                                    <ng-container *ngIf=\"item.statusBadge | async as itemBadge\">\r\n                                        <vdr-status-badge\r\n                                            *ngIf=\"itemBadge.type !== 'none'\"\r\n                                            [type]=\"itemBadge.type\"\r\n                                        ></vdr-status-badge>\r\n                                    </ng-container>\r\n                                    <clr-icon [attr.shape]=\"item.icon || 'block'\" size=\"20\"></clr-icon>\r\n                                    <div class=\"\">{{ item.label | translate }}</div>\r\n                                </a>\r\n                            </div>\r\n                        </ng-container>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </vdr-ui-extension-point>\r\n        </ng-container>\r\n    </section>\r\n</nav>\r\n", styles: [".setting-link{width:100%;border:none;display:flex;justify-content:space-between;font-size:var(--font-size-xs);align-items:center;cursor:pointer;background-color:transparent;padding:var(--space-unit);color:var(--color-left-nav-text)}.setting-link:hover{color:var(--color-left-nav-text-hover)}.setting-link clr-icon{margin-inline-end:6px}.menu-link{position:relative}.menu-link vdr-status-badge{left:20px;top:3px}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MtbmF2LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvY29tcG9uZW50cy9zZXR0aW5ncy1uYXYvc2V0dGluZ3MtbmF2LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvY29tcG9uZW50cy9zZXR0aW5ncy1uYXYvc2V0dGluZ3MtbmF2LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFM0UsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7Ozs7Ozs7QUFRbEUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGdCQUFnQjtJQUc3QyxRQUFRO1FBQ2IsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWpCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDOUQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FDdEUsQ0FBQztJQUNOLENBQUM7OEdBVFEsb0JBQW9CO2tHQUFwQixvQkFBb0IsK0VDWmpDLHNsR0F5REE7OzJGRDdDYSxvQkFBb0I7a0JBTmhDLFNBQVM7K0JBQ0ksa0JBQWtCLG1CQUdYLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE5hdk1lbnVTZWN0aW9uIH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzL25hdi1idWlsZGVyL25hdi1idWlsZGVyLXR5cGVzJztcclxuaW1wb3J0IHsgQmFzZU5hdkNvbXBvbmVudCB9IGZyb20gJy4uL2Jhc2UtbmF2L2Jhc2UtbmF2LmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLXNldHRpbmdzLW5hdicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2V0dGluZ3MtbmF2LmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL3NldHRpbmdzLW5hdi5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc05hdkNvbXBvbmVudCBleHRlbmRzIEJhc2VOYXZDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgc2V0dGluZ3NNZW51Q29uZmlnJDogT2JzZXJ2YWJsZTxOYXZNZW51U2VjdGlvbltdPjtcclxuXHJcbiAgICBvdmVycmlkZSBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG5cclxuICAgICAgICB0aGlzLnNldHRpbmdzTWVudUNvbmZpZyQgPSB0aGlzLm5hdkJ1aWxkZXJTZXJ2aWNlLm1lbnVDb25maWckLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChzZWN0aW9ucyA9PiBzZWN0aW9ucy5maWx0ZXIocyA9PiBzLmRpc3BsYXlNb2RlID09PSAnc2V0dGluZ3MnKSksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCI8bmF2PlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJzZXR0aW5ncy1uYXYtY29udGVudFwiPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IHNlY3Rpb24gb2Ygc2V0dGluZ3NNZW51Q29uZmlnJCB8IGFzeW5jXCI+XHJcbiAgICAgICAgICAgIDx2ZHItdWktZXh0ZW5zaW9uLXBvaW50XHJcbiAgICAgICAgICAgICAgICBbbG9jYXRpb25JZF09XCJzZWN0aW9uLmlkXCJcclxuICAgICAgICAgICAgICAgIGFwaT1cIm5hdk1lbnVcIlxyXG4gICAgICAgICAgICAgICAgW3RvcFB4XT1cIi02XCJcclxuICAgICAgICAgICAgICAgIFtsZWZ0UHhdPVwiOFwiXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5PVwiYmxvY2tcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8dmRyLWRyb3Bkb3duPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzZXR0aW5nLWxpbmtcIiB2ZHJEcm9wZG93blRyaWdnZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJuYXZCdWlsZGVyU2VydmljZS5zZWN0aW9uQmFkZ2VzW3NlY3Rpb24uaWRdIHwgYXN5bmMgYXMgc2VjdGlvbkJhZGdlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmRyLXN0YXR1cy1iYWRnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cInNlY3Rpb25CYWRnZSAhPT0gJ25vbmUnXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3R5cGVdPVwic2VjdGlvbkJhZGdlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC92ZHItc3RhdHVzLWJhZGdlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2xyLWljb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cInNlY3Rpb24uaWNvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuc2hhcGVdPVwic2VjdGlvbi5pY29uIHx8ICdibG9jaydcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCIyMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9jbHItaWNvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1kOmhpZGRlblwiIFtmb3JdPVwic2VjdGlvbi5pZFwiPnt7IHNlY3Rpb24ubGFiZWwgfCB0cmFuc2xhdGUgfX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGNsci1pY29uIGNsYXNzPVwibWQ6aGlkZGVuXCIgc2hhcGU9XCJjYXJldCByaWdodFwiPjwvY2xyLWljb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPHZkci1kcm9wZG93bi1tZW51IHZkclBvc2l0aW9uPVwidG9wLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2Ygc2VjdGlvbi5pdGVtc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cInNob3VsZERpc3BsYXlMaW5rKGl0ZW0pXCIgY2xhc3M9XCJtZW51LWxpbmtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZHJEcm9wZG93bkl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1pdGVtLWlkXT1cInNlY3Rpb24uaWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcm91dGVyTGlua109XCJnZXRSb3V0ZXJMaW5rKGl0ZW0pXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVyTGlua0FjdGl2ZT1cImFjdGl2ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjbGljayk9XCJpdGVtLm9uQ2xpY2sgJiYgaXRlbS5vbkNsaWNrKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0uc3RhdHVzQmFkZ2UgfCBhc3luYyBhcyBpdGVtQmFkZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2ZHItc3RhdHVzLWJhZGdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtQmFkZ2UudHlwZSAhPT0gJ25vbmUnXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdHlwZV09XCJpdGVtQmFkZ2UudHlwZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC92ZHItc3RhdHVzLWJhZGdlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNsci1pY29uIFthdHRyLnNoYXBlXT1cIml0ZW0uaWNvbiB8fCAnYmxvY2snXCIgc2l6ZT1cIjIwXCI+PC9jbHItaWNvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPnt7IGl0ZW0ubGFiZWwgfCB0cmFuc2xhdGUgfX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC92ZHItZHJvcGRvd24tbWVudT5cclxuICAgICAgICAgICAgICAgIDwvdmRyLWRyb3Bkb3duPlxyXG4gICAgICAgICAgICA8L3Zkci11aS1leHRlbnNpb24tcG9pbnQ+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L3NlY3Rpb24+XHJcbjwvbmF2PlxyXG4iXX0=