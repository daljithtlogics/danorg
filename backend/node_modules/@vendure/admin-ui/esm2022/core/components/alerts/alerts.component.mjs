import { ChangeDetectionStrategy, Component } from '@angular/core';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../providers/alerts/alerts.service";
import * as i2 from "@angular/common";
import * as i3 from "@clr/angular";
import * as i4 from "../../shared/components/dropdown/dropdown.component";
import * as i5 from "../../shared/components/dropdown/dropdown-menu.component";
import * as i6 from "../../shared/components/dropdown/dropdown-trigger.directive";
import * as i7 from "../../shared/components/dropdown/dropdown-item.directive";
import * as i8 from "../../shared/components/status-badge/status-badge.component";
import * as i9 from "@ngx-translate/core";
export class AlertsComponent {
    constructor(alertsService) {
        this.alertsService = alertsService;
        this.hasAlerts$ = alertsService.activeAlerts$.pipe(map(alerts => alerts.filter(a => !a.hasRun).length > 0));
        this.activeAlerts$ = alertsService.activeAlerts$;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AlertsComponent, deps: [{ token: i1.AlertsService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: AlertsComponent, selector: "vdr-alerts", ngImport: i0, template: "<vdr-dropdown>\r\n    <button class=\"alerts-button\" vdrDropdownTrigger>\r\n        <vdr-status-badge *ngIf=\"hasAlerts$ | async\" [type]=\"'warning'\"></vdr-status-badge>\r\n        <div class=\"user-circle\">\r\n            <clr-icon shape=\"bell\" size=\"16\"></clr-icon>\r\n        </div>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <ng-container *ngIf=\"activeAlerts$ | async as activeAlerts\">\r\n            <ng-container *ngIf=\"activeAlerts.length; else noAlerts\">\r\n                <button *ngFor=\"let alert of activeAlerts\" vdrDropdownItem (click)=\"alert.runAction()\" [disabled]=\"alert.hasRun\">\r\n                    <clr-icon shape=\"check is-success\" *ngIf=\"alert.hasRun\"></clr-icon>\r\n                    {{ alert.label.text | translate : alert.label.translationVars }}\r\n                </button>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-template #noAlerts>\r\n            <div class=\"no-alerts\">\r\n                <clr-icon shape=\"check\" class=\"mr-1\" /><span>{{ 'common.no-alerts' | translate }}</span>\r\n            </div></ng-template\r\n        >\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n", styles: [".alerts-button{position:relative;display:flex;align-items:center;justify-content:space-between;border:none;font-size:var(--font-size-sm);width:100%;line-height:100%;height:40px;color:var(--color-text-100);background-color:var(--color-page-header-item-bg);border-radius:var(--border-radius-lg);cursor:pointer;padding:calc(var(--space-unit) * 1.5)}.alerts-button:hover{color:var(--color-text-200)}vdr-status-badge{position:absolute;top:9px;right:9px}.no-alerts{display:flex;align-items:center;justify-content:center;height:100%;width:100%;color:var(--color-text-300);font-size:var(--font-size-sm);padding:0 calc(var(--space-unit) * 1.5)}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "component", type: i4.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i5.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i6.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i7.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i8.StatusBadgeComponent, selector: "vdr-status-badge", inputs: ["type"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i9.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AlertsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-alerts', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-dropdown>\r\n    <button class=\"alerts-button\" vdrDropdownTrigger>\r\n        <vdr-status-badge *ngIf=\"hasAlerts$ | async\" [type]=\"'warning'\"></vdr-status-badge>\r\n        <div class=\"user-circle\">\r\n            <clr-icon shape=\"bell\" size=\"16\"></clr-icon>\r\n        </div>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <ng-container *ngIf=\"activeAlerts$ | async as activeAlerts\">\r\n            <ng-container *ngIf=\"activeAlerts.length; else noAlerts\">\r\n                <button *ngFor=\"let alert of activeAlerts\" vdrDropdownItem (click)=\"alert.runAction()\" [disabled]=\"alert.hasRun\">\r\n                    <clr-icon shape=\"check is-success\" *ngIf=\"alert.hasRun\"></clr-icon>\r\n                    {{ alert.label.text | translate : alert.label.translationVars }}\r\n                </button>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-template #noAlerts>\r\n            <div class=\"no-alerts\">\r\n                <clr-icon shape=\"check\" class=\"mr-1\" /><span>{{ 'common.no-alerts' | translate }}</span>\r\n            </div></ng-template\r\n        >\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n", styles: [".alerts-button{position:relative;display:flex;align-items:center;justify-content:space-between;border:none;font-size:var(--font-size-sm);width:100%;line-height:100%;height:40px;color:var(--color-text-100);background-color:var(--color-page-header-item-bg);border-radius:var(--border-radius-lg);cursor:pointer;padding:calc(var(--space-unit) * 1.5)}.alerts-button:hover{color:var(--color-text-200)}vdr-status-badge{position:absolute;top:9px;right:9px}.no-alerts{display:flex;align-items:center;justify-content:center;height:100%;width:100%;color:var(--color-text-300);font-size:var(--font-size-sm);padding:0 calc(var(--space-unit) * 1.5)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AlertsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvY29tcG9uZW50cy9hbGVydHMvYWxlcnRzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvY29tcG9uZW50cy9hbGVydHMvYWxlcnRzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7Ozs7OztBQVNyQyxNQUFNLE9BQU8sZUFBZTtJQUd4QixZQUFzQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM5QyxJQUFJLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUMxRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDO0lBQ3JELENBQUM7OEdBUlEsZUFBZTtrR0FBZixlQUFlLGtEQ1g1Qiw2ckNBdUJBOzsyRkRaYSxlQUFlO2tCQU4zQixTQUFTOytCQUNJLFlBQVksbUJBR0wsdUJBQXVCLENBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEFjdGl2ZUFsZXJ0LCBBbGVydHNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzL2FsZXJ0cy9hbGVydHMuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLWFsZXJ0cycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vYWxlcnRzLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2FsZXJ0cy5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBbGVydHNDb21wb25lbnQge1xyXG4gICAgcHJvdGVjdGVkIGhhc0FsZXJ0cyQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICBwcm90ZWN0ZWQgYWN0aXZlQWxlcnRzJDogT2JzZXJ2YWJsZTxBY3RpdmVBbGVydFtdPjtcclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBhbGVydHNTZXJ2aWNlOiBBbGVydHNTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5oYXNBbGVydHMkID0gYWxlcnRzU2VydmljZS5hY3RpdmVBbGVydHMkLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcChhbGVydHMgPT4gYWxlcnRzLmZpbHRlcihhID0+ICFhLmhhc1J1bikubGVuZ3RoID4gMCksXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZUFsZXJ0cyQgPSBhbGVydHNTZXJ2aWNlLmFjdGl2ZUFsZXJ0cyQ7XHJcbiAgICB9XHJcbn1cclxuIiwiPHZkci1kcm9wZG93bj5cclxuICAgIDxidXR0b24gY2xhc3M9XCJhbGVydHMtYnV0dG9uXCIgdmRyRHJvcGRvd25UcmlnZ2VyPlxyXG4gICAgICAgIDx2ZHItc3RhdHVzLWJhZGdlICpuZ0lmPVwiaGFzQWxlcnRzJCB8IGFzeW5jXCIgW3R5cGVdPVwiJ3dhcm5pbmcnXCI+PC92ZHItc3RhdHVzLWJhZGdlPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ1c2VyLWNpcmNsZVwiPlxyXG4gICAgICAgICAgICA8Y2xyLWljb24gc2hhcGU9XCJiZWxsXCIgc2l6ZT1cIjE2XCI+PC9jbHItaWNvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvYnV0dG9uPlxyXG4gICAgPHZkci1kcm9wZG93bi1tZW51IHZkclBvc2l0aW9uPVwiYm90dG9tLXJpZ2h0XCI+XHJcbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImFjdGl2ZUFsZXJ0cyQgfCBhc3luYyBhcyBhY3RpdmVBbGVydHNcIj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImFjdGl2ZUFsZXJ0cy5sZW5ndGg7IGVsc2Ugbm9BbGVydHNcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gKm5nRm9yPVwibGV0IGFsZXJ0IG9mIGFjdGl2ZUFsZXJ0c1wiIHZkckRyb3Bkb3duSXRlbSAoY2xpY2spPVwiYWxlcnQucnVuQWN0aW9uKClcIiBbZGlzYWJsZWRdPVwiYWxlcnQuaGFzUnVuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGNsci1pY29uIHNoYXBlPVwiY2hlY2sgaXMtc3VjY2Vzc1wiICpuZ0lmPVwiYWxlcnQuaGFzUnVuXCI+PC9jbHItaWNvbj5cclxuICAgICAgICAgICAgICAgICAgICB7eyBhbGVydC5sYWJlbC50ZXh0IHwgdHJhbnNsYXRlIDogYWxlcnQubGFiZWwudHJhbnNsYXRpb25WYXJzIH19XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgPG5nLXRlbXBsYXRlICNub0FsZXJ0cz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5vLWFsZXJ0c1wiPlxyXG4gICAgICAgICAgICAgICAgPGNsci1pY29uIHNoYXBlPVwiY2hlY2tcIiBjbGFzcz1cIm1yLTFcIiAvPjxzcGFuPnt7ICdjb21tb24ubm8tYWxlcnRzJyB8IHRyYW5zbGF0ZSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+PC9uZy10ZW1wbGF0ZVxyXG4gICAgICAgID5cclxuICAgIDwvdmRyLWRyb3Bkb3duLW1lbnU+XHJcbjwvdmRyLWRyb3Bkb3duPlxyXG4iXX0=