export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"bulk-action-types.js","sourceRoot":"","sources":["../../../../../src/lib/core/src/providers/bulk-action-registry/bulk-action-types.ts"],"names":[],"mappings":"","sourcesContent":["import { Injector } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n/**\r\n * @description\r\n * A valid location of a list view that supports the bulk actions API.\r\n *\r\n * @since 1.8.0\r\n * @docsCategory bulk-actions\r\n * @docsPage BulkAction\r\n */\r\nexport type BulkActionLocationId =\r\n    | 'product-list'\r\n    | 'facet-list'\r\n    | 'collection-list'\r\n    | 'customer-list'\r\n    | 'customer-group-list'\r\n    | 'customer-group-members-list'\r\n    | 'customer-group-members-picker-list'\r\n    | 'promotion-list'\r\n    | 'seller-list'\r\n    | 'channel-list'\r\n    | 'administrator-list'\r\n    | 'role-list'\r\n    | 'shipping-method-list'\r\n    | 'stock-location-list'\r\n    | 'payment-method-list'\r\n    | 'tax-category-list'\r\n    | 'tax-rate-list'\r\n    | 'zone-list'\r\n    | 'zone-members-list'\r\n    | string;\r\n\r\n/**\r\n * @description\r\n * This is the argument which gets passed to the `getTranslationVars` and `isVisible` functions\r\n * of the BulkAction definition.\r\n *\r\n * @since 1.8.0\r\n * @docsCategory bulk-actions\r\n * @docsPage BulkAction\r\n */\r\nexport interface BulkActionFunctionContext<ItemType, ComponentType> {\r\n    /**\r\n     * @description\r\n     * An array of the selected items from the list.\r\n     */\r\n    selection: ItemType[];\r\n    /**\r\n     * @description\r\n     * The component instance that is hosting the list view. For instance,\r\n     * `ProductListComponent`. This can be used to call methods on the instance,\r\n     * e.g. calling `hostComponent.refresh()` to force a list refresh after\r\n     * deleting the selected items.\r\n     */\r\n    hostComponent: ComponentType;\r\n    /**\r\n     * @description\r\n     * The Angular [Injector](https://angular.io/api/core/Injector) which can be used\r\n     * to get service instances which might be needed in the click handler.\r\n     */\r\n    injector: Injector;\r\n    route: ActivatedRoute;\r\n}\r\n\r\n/**\r\n * @description\r\n * This is the argument which gets passed to the `onClick` function of a BulkAction.\r\n *\r\n * @since 1.8.0\r\n * @docsCategory bulk-actions\r\n * @docsPage BulkAction\r\n */\r\nexport interface BulkActionClickContext<ItemType, ComponentType>\r\n    extends BulkActionFunctionContext<ItemType, ComponentType> {\r\n    /**\r\n     * @description\r\n     * Clears the selection in the active list view.\r\n     */\r\n    clearSelection: () => void;\r\n    /**\r\n     * @description\r\n     * The click event itself.\r\n     */\r\n    event: MouseEvent;\r\n}\r\n\r\n/**\r\n * @description\r\n * Configures a bulk action which can be performed on all selected items in a list view.\r\n *\r\n * For a full example, see the {@link registerBulkAction} docs.\r\n *\r\n * @since 1.8.0\r\n * @docsCategory bulk-actions\r\n * @docsPage BulkAction\r\n * @docsWeight 0\r\n */\r\nexport interface BulkAction<ItemType = any, ComponentType = any> {\r\n    location: BulkActionLocationId;\r\n    label: string;\r\n    /**\r\n     * @description\r\n     * An optional function that should resolve to a map of translation variables which can be\r\n     * used when translating the `label` string.\r\n     */\r\n    getTranslationVars?: (\r\n        context: BulkActionFunctionContext<ItemType, ComponentType>,\r\n    ) => Record<string, string | number> | Promise<Record<string, string | number>>;\r\n    /**\r\n     * @description\r\n     * A valid [Clarity Icons](https://core.clarity.design/foundation/icons/shapes/) icon shape, e.g.\r\n     * \"cog\", \"user\", \"info-standard\".\r\n     */\r\n    icon?: string;\r\n    /**\r\n     * @description\r\n     * A class to be added to the icon element. Examples:\r\n     *\r\n     * - is-success\r\n     * - is-danger\r\n     * - is-warning\r\n     * - is-info\r\n     * - is-highlight\r\n     */\r\n    iconClass?: string;\r\n    /**\r\n     * @description\r\n     * Defines the logic that executes when the bulk action button is clicked.\r\n     */\r\n    onClick: (context: BulkActionClickContext<ItemType, ComponentType>) => void;\r\n    /**\r\n     * @description\r\n     * A function that determines whether this bulk action item should be displayed in the menu.\r\n     * If not defined, the item will always be displayed.\r\n     *\r\n     * This function will be invoked each time the selection is changed, so try to avoid expensive code\r\n     * running here.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * import { registerBulkAction, DataService } from '\\@vendure/admin-ui/core';\r\n     *\r\n     * registerBulkAction({\r\n     *   location: 'product-list',\r\n     *   label: 'Assign to channel',\r\n     *   // Only display this action if there are multiple channels\r\n     *   isVisible: ({ injector }) => injector.get(DataService).client\r\n     *     .userStatus()\r\n     *     .mapSingle(({ userStatus }) => 1 < userStatus.channels.length)\r\n     *     .toPromise(),\r\n     *   // ...\r\n     * });\r\n     * ```\r\n     */\r\n    isVisible?: (context: BulkActionFunctionContext<ItemType, ComponentType>) => boolean | Promise<boolean>;\r\n    /**\r\n     * @description\r\n     * Control the display of this item based on the user permissions.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * registerBulkAction({\r\n     *   // Can be specified as a simple string\r\n     *   requiresPermission: Permission.UpdateProduct,\r\n     *\r\n     *   // Or as a function that returns a boolean if permissions are satisfied\r\n     *   requiresPermission: userPermissions =>\r\n     *     userPermissions.includes(Permission.UpdateCatalog) ||\r\n     *     userPermissions.includes(Permission.UpdateProduct),\r\n     *   // ...\r\n     * })\r\n     * ```\r\n     */\r\n    requiresPermission?: string | ((userPermissions: string[]) => boolean);\r\n}\r\n"]}