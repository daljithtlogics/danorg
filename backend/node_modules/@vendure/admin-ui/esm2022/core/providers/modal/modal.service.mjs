import { Injectable } from '@angular/core';
import { from, Observable } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { ModalDialogComponent } from '../../shared/components/modal-dialog/modal-dialog.component';
import { SimpleDialogComponent } from '../../shared/components/simple-dialog/simple-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "../overlay-host/overlay-host.service";
/**
 * @description
 * This service is responsible for instantiating a ModalDialog component and
 * embedding the specified component within.
 *
 * @docsCategory services
 * @docsPage ModalService
 * @docsWeight 0
 */
export class ModalService {
    constructor(overlayHostService) {
        this.overlayHostService = overlayHostService;
    }
    /**
     * @description
     * Create a modal from a component. The component must implement the {@link Dialog} interface.
     * Additionally, the component should include templates for the title and the buttons to be
     * displayed in the modal dialog. See example:
     *
     * @example
     * ```HTML
     * class MyDialog implements Dialog {
     *  resolveWith: (result?: any) => void;
     *
     *  okay() {
     *    doSomeWork().subscribe(result => {
     *      this.resolveWith(result);
     *    })
     *  }
     *
     *  cancel() {
     *    this.resolveWith(false);
     *  }
     * }
     * ```
     *
     * @example
     * ```HTML
     * <ng-template vdrDialogTitle>Title of the modal</ng-template>
     *
     * <p>
     *   My Content
     * </p>
     *
     * <ng-template vdrDialogButtons>
     *   <button type="button"
     *           class="btn"
     *           (click)="cancel()">Cancel</button>
     *   <button type="button"
     *           class="btn btn-primary"
     *           (click)="okay()">Okay</button>
     * </ng-template>
     * ```
     */
    fromComponent(component, options) {
        return from(this.overlayHostService.getHostView()).pipe(mergeMap(hostView => {
            const modalComponentRef = hostView.createComponent(ModalDialogComponent);
            const modalInstance = modalComponentRef.instance;
            modalInstance.childComponentType = component;
            modalInstance.options = options;
            return new Observable(subscriber => {
                modalInstance.closeModal = (result) => {
                    modalComponentRef.destroy();
                    subscriber.next(result);
                    subscriber.complete();
                };
            });
        }));
    }
    /**
     * @description
     * Displays a modal dialog with the provided title, body and buttons.
     */
    dialog(config) {
        return this.fromComponent(SimpleDialogComponent, {
            locals: config,
            size: config.size,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ModalService, deps: [{ token: i1.OverlayHostService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ModalService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ModalService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.OverlayHostService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9zcmMvcHJvdmlkZXJzL21vZGFsL21vZGFsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkRBQTZELENBQUM7QUFDbkcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0RBQStELENBQUM7OztBQUt0Rzs7Ozs7Ozs7R0FRRztBQUlILE1BQU0sT0FBTyxZQUFZO0lBQ3JCLFlBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0lBQUcsQ0FBQztJQUU5RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXdDRztJQUNILGFBQWEsQ0FDVCxTQUFvQyxFQUNwQyxPQUF5QjtRQUV6QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ25ELFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoQixNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUN6RSxNQUFNLGFBQWEsR0FBOEIsaUJBQWlCLENBQUMsUUFBUSxDQUFDO1lBQzVFLGFBQWEsQ0FBQyxrQkFBa0IsR0FBRyxTQUFTLENBQUM7WUFDN0MsYUFBYSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFFaEMsT0FBTyxJQUFJLFVBQVUsQ0FBSSxVQUFVLENBQUMsRUFBRTtnQkFDbEMsYUFBYSxDQUFDLFVBQVUsR0FBRyxDQUFDLE1BQVMsRUFBRSxFQUFFO29CQUNyQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDNUIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDeEIsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUMxQixDQUFDLENBQUM7WUFDTixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFJLE1BQXVCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRTtZQUM3QyxNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtTQUNwQixDQUFDLENBQUM7SUFDUCxDQUFDOzhHQTNFUSxZQUFZO2tIQUFaLFlBQVksY0FGVCxNQUFNOzsyRkFFVCxZQUFZO2tCQUh4QixVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0B2ZW5kdXJlL2NvbW1vbi9saWIvc2hhcmVkLXR5cGVzJztcclxuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IE1vZGFsRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vc2hhcmVkL2NvbXBvbmVudHMvbW9kYWwtZGlhbG9nL21vZGFsLWRpYWxvZy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTaW1wbGVEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29tcG9uZW50cy9zaW1wbGUtZGlhbG9nL3NpbXBsZS1kaWFsb2cuY29tcG9uZW50JztcclxuaW1wb3J0IHsgT3ZlcmxheUhvc3RTZXJ2aWNlIH0gZnJvbSAnLi4vb3ZlcmxheS1ob3N0L292ZXJsYXktaG9zdC5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IERpYWxvZywgRGlhbG9nQ29uZmlnLCBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLnR5cGVzJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciBpbnN0YW50aWF0aW5nIGEgTW9kYWxEaWFsb2cgY29tcG9uZW50IGFuZFxyXG4gKiBlbWJlZGRpbmcgdGhlIHNwZWNpZmllZCBjb21wb25lbnQgd2l0aGluLlxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IHNlcnZpY2VzXHJcbiAqIEBkb2NzUGFnZSBNb2RhbFNlcnZpY2VcclxuICogQGRvY3NXZWlnaHQgMFxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9kYWxTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgb3ZlcmxheUhvc3RTZXJ2aWNlOiBPdmVybGF5SG9zdFNlcnZpY2UpIHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIENyZWF0ZSBhIG1vZGFsIGZyb20gYSBjb21wb25lbnQuIFRoZSBjb21wb25lbnQgbXVzdCBpbXBsZW1lbnQgdGhlIHtAbGluayBEaWFsb2d9IGludGVyZmFjZS5cclxuICAgICAqIEFkZGl0aW9uYWxseSwgdGhlIGNvbXBvbmVudCBzaG91bGQgaW5jbHVkZSB0ZW1wbGF0ZXMgZm9yIHRoZSB0aXRsZSBhbmQgdGhlIGJ1dHRvbnMgdG8gYmVcclxuICAgICAqIGRpc3BsYXllZCBpbiB0aGUgbW9kYWwgZGlhbG9nLiBTZWUgZXhhbXBsZTpcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogYGBgSFRNTFxyXG4gICAgICogY2xhc3MgTXlEaWFsb2cgaW1wbGVtZW50cyBEaWFsb2cge1xyXG4gICAgICogIHJlc29sdmVXaXRoOiAocmVzdWx0PzogYW55KSA9PiB2b2lkO1xyXG4gICAgICpcclxuICAgICAqICBva2F5KCkge1xyXG4gICAgICogICAgZG9Tb21lV29yaygpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xyXG4gICAgICogICAgICB0aGlzLnJlc29sdmVXaXRoKHJlc3VsdCk7XHJcbiAgICAgKiAgICB9KVxyXG4gICAgICogIH1cclxuICAgICAqXHJcbiAgICAgKiAgY2FuY2VsKCkge1xyXG4gICAgICogICAgdGhpcy5yZXNvbHZlV2l0aChmYWxzZSk7XHJcbiAgICAgKiAgfVxyXG4gICAgICogfVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGBgYEhUTUxcclxuICAgICAqIDxuZy10ZW1wbGF0ZSB2ZHJEaWFsb2dUaXRsZT5UaXRsZSBvZiB0aGUgbW9kYWw8L25nLXRlbXBsYXRlPlxyXG4gICAgICpcclxuICAgICAqIDxwPlxyXG4gICAgICogICBNeSBDb250ZW50XHJcbiAgICAgKiA8L3A+XHJcbiAgICAgKlxyXG4gICAgICogPG5nLXRlbXBsYXRlIHZkckRpYWxvZ0J1dHRvbnM+XHJcbiAgICAgKiAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgKiAgICAgICAgICAgY2xhc3M9XCJidG5cIlxyXG4gICAgICogICAgICAgICAgIChjbGljayk9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPlxyXG4gICAgICogICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICogICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAqICAgICAgICAgICAoY2xpY2spPVwib2theSgpXCI+T2theTwvYnV0dG9uPlxyXG4gICAgICogPC9uZy10ZW1wbGF0ZT5cclxuICAgICAqIGBgYFxyXG4gICAgICovXHJcbiAgICBmcm9tQ29tcG9uZW50PFQgZXh0ZW5kcyBEaWFsb2c8YW55PiwgUj4oXHJcbiAgICAgICAgY29tcG9uZW50OiBUeXBlPFQ+ICYgVHlwZTxEaWFsb2c8Uj4+LFxyXG4gICAgICAgIG9wdGlvbnM/OiBNb2RhbE9wdGlvbnM8VD4sXHJcbiAgICApOiBPYnNlcnZhYmxlPFIgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLm92ZXJsYXlIb3N0U2VydmljZS5nZXRIb3N0VmlldygpKS5waXBlKFxyXG4gICAgICAgICAgICBtZXJnZU1hcChob3N0VmlldyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbENvbXBvbmVudFJlZiA9IGhvc3RWaWV3LmNyZWF0ZUNvbXBvbmVudChNb2RhbERpYWxvZ0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbEluc3RhbmNlOiBNb2RhbERpYWxvZ0NvbXBvbmVudDxhbnk+ID0gbW9kYWxDb21wb25lbnRSZWYuaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLmNoaWxkQ29tcG9uZW50VHlwZSA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2Uub3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFI+KHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UuY2xvc2VNb2RhbCA9IChyZXN1bHQ6IFIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxDb21wb25lbnRSZWYuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRGlzcGxheXMgYSBtb2RhbCBkaWFsb2cgd2l0aCB0aGUgcHJvdmlkZWQgdGl0bGUsIGJvZHkgYW5kIGJ1dHRvbnMuXHJcbiAgICAgKi9cclxuICAgIGRpYWxvZzxUPihjb25maWc6IERpYWxvZ0NvbmZpZzxUPik6IE9ic2VydmFibGU8VCB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21Db21wb25lbnQoU2ltcGxlRGlhbG9nQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgIGxvY2FsczogY29uZmlnLFxyXG4gICAgICAgICAgICBzaXplOiBjb25maWcuc2l6ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=