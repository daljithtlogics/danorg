import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * These keys are stored specific to a particular AdminId, so that multiple
 * admins can use the same browser without interfering with each other's data.
 */
const ADMIN_SPECIFIC_KEYS = [
    'activeTheme',
    'dashboardWidgetLayout',
    'activeTheme',
    'livePreviewCollectionContents',
    'dataTableConfig',
];
const PREFIX = 'vnd_';
/**
 * Wrapper around the browser's LocalStorage / SessionStorage object, for persisting data to the browser.
 */
export class LocalStorageService {
    constructor(location) {
        this.location = location;
        this.adminId = '__global__';
    }
    setAdminId(adminId) {
        this.adminId = adminId ?? '__global__';
    }
    /**
     * Set a key-value pair in the browser's LocalStorage
     */
    set(key, value) {
        const keyName = this.keyName(key);
        localStorage.setItem(keyName, JSON.stringify(value));
    }
    /**
     * Set a key-value pair specific to the current location (url)
     */
    setForCurrentLocation(key, value) {
        const compositeKey = this.getLocationBasedKey(key);
        this.set(compositeKey, value);
    }
    /**
     * Set a key-value pair in the browser's SessionStorage
     */
    setForSession(key, value) {
        const keyName = this.keyName(key);
        sessionStorage.setItem(keyName, JSON.stringify(value));
    }
    /**
     * Get the value of the given key from the SessionStorage or LocalStorage.
     */
    get(key) {
        const keyName = this.keyName(key);
        const item = sessionStorage.getItem(keyName) || localStorage.getItem(keyName);
        let result;
        try {
            result = JSON.parse(item || 'null');
        }
        catch (e) {
            // eslint-disable-next-line no-console
            console.error(`Could not parse the localStorage value for "${key}" (${item})`);
        }
        return result;
    }
    /**
     * Get the value of the given key for the current location (url)
     */
    getForCurrentLocation(key) {
        const compositeKey = this.getLocationBasedKey(key);
        return this.get(compositeKey);
    }
    remove(key) {
        const keyName = this.keyName(key);
        sessionStorage.removeItem(keyName);
        localStorage.removeItem(keyName);
    }
    getLocationBasedKey(key) {
        const path = this.location.path();
        return key + path;
    }
    keyName(key) {
        if (ADMIN_SPECIFIC_KEYS.includes(key)) {
            return `${PREFIX}_${this.adminId}_${key}`;
        }
        else {
            return `${PREFIX}_${key}`;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: LocalStorageService, deps: [{ token: i1.Location }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: LocalStorageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: LocalStorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.Location }]; } });
//# sourceMappingURL=data:application/json;base64,