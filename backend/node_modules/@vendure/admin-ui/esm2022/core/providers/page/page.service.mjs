import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { CanDeactivateDetailGuard } from '../../shared/providers/routing/can-deactivate-detail-guard';
import * as i0 from "@angular/core";
export class PageService {
    constructor() {
        this.registry = new Map();
    }
    registerPageTab(config) {
        if (!this.registry.has(config.location)) {
            this.registry.set(config.location, []);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const pages = this.registry.get(config.location);
        if (pages.find(p => p.tab === config.tab)) {
            throw new Error(`A page with the tab "${config.tab}" has already been registered`);
        }
        pages.push(config);
    }
    getPageTabRoutes(location) {
        const configs = this.registry.get(location) || [];
        return configs.map(config => {
            const route = {
                path: config.route || '',
                pathMatch: config.route ? 'prefix' : 'full',
            };
            let component;
            if (isComponentWithResolver(config.component)) {
                const { component: cmp, breadcrumbFn, resolveFn } = config.component;
                component = cmp;
                route.resolve = { detail: resolveFn };
                route.data = {
                    breadcrumb: data => data.detail.entity.pipe(map(entity => breadcrumbFn(entity))),
                };
            }
            else {
                component = config.component;
            }
            const guards = typeof component.prototype.canDeactivate === 'function' ? [CanDeactivateDetailGuard] : [];
            route.component = component;
            route.canDeactivate = guards;
            if (config.routeConfig) {
                Object.assign(route, config.routeConfig);
            }
            return route;
        });
    }
    getPageTabs(location) {
        return this.registry.get(location)?.sort((a, b) => (a.priority ?? 0) - (b.priority ?? 0)) || [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: PageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: PageService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: PageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
function isComponentWithResolver(input) {
    return input && input.hasOwnProperty('resolveFn');
}
//# sourceMappingURL=data:application/json;base64,