import { Injectable } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import * as i0 from "@angular/core";
/**
 * Responsible for registering dashboard widget components and querying for layouts.
 */
export class DashboardWidgetService {
    constructor() {
        this.registry = new Map();
        this.layoutDef = [];
    }
    registerWidget(id, config) {
        if (this.registry.has(id)) {
            throw new Error(`A dashboard widget with the id "${id}" already exists`);
        }
        this.registry.set(id, config);
    }
    getAvailableWidgets(currentUserPermissions) {
        const hasAllPermissions = (requiredPerms, userPerms) => requiredPerms.every(p => userPerms.includes(p));
        return [...this.registry.entries()]
            .filter(([id, config]) => !config.requiresPermissions ||
            hasAllPermissions(config.requiresPermissions, currentUserPermissions))
            .map(([id, config]) => ({ id, config }));
    }
    getWidgetById(id) {
        return this.registry.get(id);
    }
    setDefaultLayout(layout) {
        this.layoutDef = layout;
    }
    getDefaultLayout() {
        return this.layoutDef;
    }
    getWidgetLayout(layoutDef) {
        const intermediateLayout = (layoutDef || this.layoutDef)
            .map(({ id, width }) => {
            const config = this.registry.get(id);
            if (!config) {
                return this.idNotFound(id);
            }
            return { id, config, width: this.getValidWidth(id, config, width) };
        })
            .filter(notNullOrUndefined);
        return this.buildLayout(intermediateLayout);
    }
    idNotFound(id) {
        // eslint-disable-next-line no-console
        console.error(`No dashboard widget was found with the id "${id}"\nAvailable ids: ${[...this.registry.keys()]
            .map(_id => `"${_id}"`)
            .join(', ')}`);
        return;
    }
    getValidWidth(id, config, targetWidth) {
        let adjustedWidth = targetWidth;
        const supportedWidths = config.supportedWidths?.length
            ? config.supportedWidths
            : [3, 4, 6, 8, 12];
        if (!supportedWidths.includes(targetWidth)) {
            // Fall back to the largest supported width
            const sortedWidths = supportedWidths.sort((a, b) => a - b);
            const fallbackWidth = supportedWidths[sortedWidths.length - 1];
            // eslint-disable-next-line no-console
            console.error(`The "${id}" widget does not support the specified width (${targetWidth}).\nSupported widths are: [${sortedWidths.join(', ')}].\nUsing (${fallbackWidth}) instead.`);
            adjustedWidth = fallbackWidth;
        }
        return adjustedWidth;
    }
    buildLayout(intermediateLayout) {
        const layout = [];
        let row = [];
        for (const { id, config, width } of intermediateLayout) {
            const rowSize = row.reduce((size, c) => size + c.width, 0);
            if (12 < rowSize + width) {
                layout.push(row);
                row = [];
            }
            row.push({ id, config, width });
        }
        layout.push(row);
        return layout;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DashboardWidgetService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DashboardWidgetService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DashboardWidgetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,