import { Injectable } from '@angular/core';
import { NotificationComponent } from '../../components/notification/notification.component';
import * as i0 from "@angular/core";
import * as i1 from "../i18n/i18n.service";
import * as i2 from "../overlay-host/overlay-host.service";
// How many ms before the toast is dismissed.
const TOAST_DURATION = 3000;
/**
 * @description
 * Provides toast notification functionality.
 *
 * @example
 * ```ts
 * class MyComponent {
 *   constructor(private notificationService: NotificationService) {}
 *
 *   save() {
 *     this.notificationService
 *         .success(_('asset.notify-create-assets-success'), {
 *           count: successCount,
 *         });
 *   }
 * }
 *
 * @docsCategory services
 * @docsPage NotificationService
 * @docsWeight 0
 */
export class NotificationService {
    get hostView() {
        return this.overlayHostService.getHostView();
    }
    constructor(i18nService, resolver, overlayHostService) {
        this.i18nService = i18nService;
        this.resolver = resolver;
        this.overlayHostService = overlayHostService;
        this.openToastRefs = [];
    }
    /**
     * @description
     * Display a success toast notification
     */
    success(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'success',
        });
    }
    /**
     * @description
     * Display an info toast notification
     */
    info(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'info',
        });
    }
    /**
     * @description
     * Display a warning toast notification
     */
    warning(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'warning',
        });
    }
    /**
     * @description
     * Display an error toast notification
     */
    error(message, translationVars) {
        this.notify({
            message,
            translationVars,
            type: 'error',
            duration: 20000,
        });
    }
    /**
     * @description
     * Display a toast notification.
     */
    notify(config) {
        this.createToast(config);
    }
    /**
     * Load a ToastComponent into the DOM host location.
     */
    async createToast(config) {
        const toastFactory = this.resolver.resolveComponentFactory(NotificationComponent);
        const hostView = await this.hostView;
        const ref = hostView.createComponent(toastFactory);
        const toast = ref.instance;
        const dismissFn = this.createDismissFunction(ref);
        toast.type = config.type || 'info';
        toast.message = config.message;
        toast.translationVars = this.translateTranslationVars(config.translationVars || {});
        toast.registerOnClickFn(dismissFn);
        let timerId;
        if (!config.duration || 0 < config.duration) {
            timerId = setTimeout(dismissFn, config.duration || TOAST_DURATION);
        }
        this.openToastRefs.unshift({ ref, timerId });
        setTimeout(() => this.calculatePositions());
    }
    /**
     * Returns a function which will destroy the toast component and
     * remove it from the openToastRefs array.
     */
    createDismissFunction(ref) {
        return () => {
            const toast = ref.instance;
            const index = this.openToastRefs.map(o => o.ref).indexOf(ref);
            if (this.openToastRefs[index]) {
                clearTimeout(this.openToastRefs[index].timerId);
            }
            toast.fadeOut().then(() => {
                ref.destroy();
                this.openToastRefs.splice(index, 1);
                this.calculatePositions();
            });
        };
    }
    /**
     * Calculate and set the top offsets for each of the open toasts.
     */
    calculatePositions() {
        let cumulativeHeight = 10;
        this.openToastRefs.forEach(obj => {
            const toast = obj.ref.instance;
            toast.offsetTop = cumulativeHeight;
            cumulativeHeight += toast.getHeight() + 6;
        });
    }
    translateTranslationVars(translationVars) {
        for (const [key, val] of Object.entries(translationVars)) {
            if (typeof val === 'string') {
                translationVars[key] = this.i18nService.translate(val);
            }
        }
        return translationVars;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: NotificationService, deps: [{ token: i1.I18nService }, { token: i0.ComponentFactoryResolver }, { token: i2.OverlayHostService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: NotificationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: NotificationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.I18nService }, { type: i0.ComponentFactoryResolver }, { type: i2.OverlayHostService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3Byb3ZpZGVycy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEwQyxVQUFVLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDOzs7O0FBMkI3Riw2Q0FBNkM7QUFDN0MsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBRTVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUlILE1BQU0sT0FBTyxtQkFBbUI7SUFDNUIsSUFBWSxRQUFRO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFJRCxZQUNZLFdBQXdCLEVBQ3hCLFFBQWtDLEVBQ2xDLGtCQUFzQztRQUZ0QyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUNsQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBTDFDLGtCQUFhLEdBQXNFLEVBQUUsQ0FBQztJQU0zRixDQUFDO0lBRUo7OztPQUdHO0lBQ0gsT0FBTyxDQUFDLE9BQWUsRUFBRSxlQUFvRDtRQUN6RSxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ1IsT0FBTztZQUNQLGVBQWU7WUFDZixJQUFJLEVBQUUsU0FBUztTQUNsQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxDQUFDLE9BQWUsRUFBRSxlQUFvRDtRQUN0RSxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ1IsT0FBTztZQUNQLGVBQWU7WUFDZixJQUFJLEVBQUUsTUFBTTtTQUNmLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7O09BR0c7SUFDSCxPQUFPLENB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QixHQUFHLEVBQUUsQ0FBQztRQUUxQixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixNQUFNLEtBQUssR0FBMEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7WUFDdEQsS0FBSyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztZQUNuQyxnQkFBZ0IsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLHdCQUF3QixDQUFDLGVBQW1EO1FBR2hGLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQ3RELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO2dCQUN6QixlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUQ7U0FDSjtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQzNCLENBQUM7OEdBeElRLG1CQUFtQjtrSEFBbkIsbUJBQW1CLGNBRmhCLE1BQU07OzJGQUVULG1CQUFtQjtrQkFIL0IsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vaTE4bi9pMThuLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBPdmVybGF5SG9zdFNlcnZpY2UgfSBmcm9tICcuLi9vdmVybGF5LWhvc3Qvb3ZlcmxheS1ob3N0LnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgdHlwZXMgb2Ygbm90aWZpY2F0aW9uIGF2YWlsYWJsZS5cclxuICpcclxuICogQGRvY3NDYXRlZ29yeSBzZXJ2aWNlc1xyXG4gKiBAZG9jc1BhZ2UgTm90aWZpY2F0aW9uU2VydmljZVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uVHlwZSA9ICdpbmZvJyB8ICdzdWNjZXNzJyB8ICdlcnJvcicgfCAnd2FybmluZyc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvbmZpZ3VyYXRpb24gZm9yIGEgdG9hc3Qgbm90aWZpY2F0aW9uLlxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IHNlcnZpY2VzXHJcbiAqIEBkb2NzUGFnZSBOb3RpZmljYXRpb25TZXJ2aWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFRvYXN0Q29uZmlnIHtcclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIHRyYW5zbGF0aW9uVmFycz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIH07XHJcbiAgICB0eXBlPzogTm90aWZpY2F0aW9uVHlwZTtcclxuICAgIGR1cmF0aW9uPzogbnVtYmVyO1xyXG59XHJcblxyXG4vLyBIb3cgbWFueSBtcyBiZWZvcmUgdGhlIHRvYXN0IGlzIGRpc21pc3NlZC5cclxuY29uc3QgVE9BU1RfRFVSQVRJT04gPSAzMDAwO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQcm92aWRlcyB0b2FzdCBub3RpZmljYXRpb24gZnVuY3Rpb25hbGl0eS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgdHNcclxuICogY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZpY2F0aW9uU2VydmljZTogTm90aWZpY2F0aW9uU2VydmljZSkge31cclxuICpcclxuICogICBzYXZlKCkge1xyXG4gKiAgICAgdGhpcy5ub3RpZmljYXRpb25TZXJ2aWNlXHJcbiAqICAgICAgICAgLnN1Y2Nlc3MoXygnYXNzZXQubm90aWZ5LWNyZWF0ZS1hc3NldHMtc3VjY2VzcycpLCB7XHJcbiAqICAgICAgICAgICBjb3VudDogc3VjY2Vzc0NvdW50LFxyXG4gKiAgICAgICAgIH0pO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IHNlcnZpY2VzXHJcbiAqIEBkb2NzUGFnZSBOb3RpZmljYXRpb25TZXJ2aWNlXHJcbiAqIEBkb2NzV2VpZ2h0IDBcclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBnZXQgaG9zdFZpZXcoKTogUHJvbWlzZTxWaWV3Q29udGFpbmVyUmVmPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3ZlcmxheUhvc3RTZXJ2aWNlLmdldEhvc3RWaWV3KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvcGVuVG9hc3RSZWZzOiBBcnJheTx7IHJlZjogQ29tcG9uZW50UmVmPE5vdGlmaWNhdGlvbkNvbXBvbmVudD47IHRpbWVySWQ6IGFueSB9PiA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaTE4blNlcnZpY2U6IEkxOG5TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcml2YXRlIG92ZXJsYXlIb3N0U2VydmljZTogT3ZlcmxheUhvc3RTZXJ2aWNlLFxyXG4gICAgKSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBEaXNwbGF5IGEgc3VjY2VzcyB0b2FzdCBub3RpZmljYXRpb25cclxuICAgICAqL1xyXG4gICAgc3VjY2VzcyhtZXNzYWdlOiBzdHJpbmcsIHRyYW5zbGF0aW9uVmFycz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIH0pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm5vdGlmeSh7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uVmFycyxcclxuICAgICAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBEaXNwbGF5IGFuIGluZm8gdG9hc3Qgbm90aWZpY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIGluZm8obWVzc2FnZTogc3RyaW5nLCB0cmFuc2xhdGlvblZhcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB9KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoe1xyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICB0cmFuc2xhdGlvblZhcnMsXHJcbiAgICAgICAgICAgIHR5cGU6ICdpbmZvJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRGlzcGxheSBhIHdhcm5pbmcgdG9hc3Qgbm90aWZpY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIHdhcm5pbmcobWVzc2FnZTogc3RyaW5nLCB0cmFuc2xhdGlvblZhcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB9KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoe1xyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICB0cmFuc2xhdGlvblZhcnMsXHJcbiAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRGlzcGxheSBhbiBlcnJvciB0b2FzdCBub3RpZmljYXRpb25cclxuICAgICAqL1xyXG4gICAgZXJyb3IobWVzc2FnZTogc3RyaW5nLCB0cmFuc2xhdGlvblZhcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB9KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoe1xyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICB0cmFuc2xhdGlvblZhcnMsXHJcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRGlzcGxheSBhIHRvYXN0IG5vdGlmaWNhdGlvbi5cclxuICAgICAqL1xyXG4gICAgbm90aWZ5KGNvbmZpZzogVG9hc3RDb25maWcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZVRvYXN0KGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkIGEgVG9hc3RDb21wb25lbnQgaW50byB0aGUgRE9NIGhvc3QgbG9jYXRpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlVG9hc3QoY29uZmlnOiBUb2FzdENvbmZpZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IHRvYXN0RmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoTm90aWZpY2F0aW9uQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBob3N0VmlldyA9IGF3YWl0IHRoaXMuaG9zdFZpZXc7XHJcbiAgICAgICAgY29uc3QgcmVmID0gaG9zdFZpZXcuY3JlYXRlQ29tcG9uZW50PE5vdGlmaWNhdGlvbkNvbXBvbmVudD4odG9hc3RGYWN0b3J5KTtcclxuICAgICAgICBjb25zdCB0b2FzdDogTm90aWZpY2F0aW9uQ29tcG9uZW50ID0gcmVmLmluc3RhbmNlO1xyXG4gICAgICAgIGNvbnN0IGRpc21pc3NGbiA9IHRoaXMuY3JlYXRlRGlzbWlzc0Z1bmN0aW9uKHJlZik7XHJcbiAgICAgICAgdG9hc3QudHlwZSA9IGNvbmZpZy50eXBlIHx8ICdpbmZvJztcclxuICAgICAgICB0b2FzdC5tZXNzYWdlID0gY29uZmlnLm1lc3NhZ2U7XHJcbiAgICAgICAgdG9hc3QudHJhbnNsYXRpb25WYXJzID0gdGhpcy50cmFuc2xhdGVUcmFuc2xhdGlvblZhcnMoY29uZmlnLnRyYW5zbGF0aW9uVmFycyB8fCB7fSk7XHJcbiAgICAgICAgdG9hc3QucmVnaXN0ZXJPbkNsaWNrRm4oZGlzbWlzc0ZuKTtcclxuXHJcbiAgICAgICAgbGV0IHRpbWVySWQ7XHJcbiAgICAgICAgaWYgKCFjb25maWcuZHVyYXRpb24gfHwgMCA8IGNvbmZpZy5kdXJhdGlvbikge1xyXG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dChkaXNtaXNzRm4sIGNvbmZpZy5kdXJhdGlvbiB8fCBUT0FTVF9EVVJBVElPTik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9wZW5Ub2FzdFJlZnMudW5zaGlmdCh7IHJlZiwgdGltZXJJZCB9KTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2FsY3VsYXRlUG9zaXRpb25zKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZGVzdHJveSB0aGUgdG9hc3QgY29tcG9uZW50IGFuZFxyXG4gICAgICogcmVtb3ZlIGl0IGZyb20gdGhlIG9wZW5Ub2FzdFJlZnMgYXJyYXkuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlRGlzbWlzc0Z1bmN0aW9uKHJlZjogQ29tcG9uZW50UmVmPE5vdGlmaWNhdGlvbkNvbXBvbmVudD4pOiAoKSA9PiB2b2lkIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0b2FzdDogTm90aWZpY2F0aW9uQ29tcG9uZW50ID0gcmVmLmluc3RhbmNlO1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMub3BlblRvYXN0UmVmcy5tYXAobyA9PiBvLnJlZikuaW5kZXhPZihyZWYpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3BlblRvYXN0UmVmc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm9wZW5Ub2FzdFJlZnNbaW5kZXhdLnRpbWVySWQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b2FzdC5mYWRlT3V0KCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZWYuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuVG9hc3RSZWZzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVBvc2l0aW9ucygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlIGFuZCBzZXQgdGhlIHRvcCBvZmZzZXRzIGZvciBlYWNoIG9mIHRoZSBvcGVuIHRvYXN0cy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVQb3NpdGlvbnMoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGN1bXVsYXRpdmVIZWlnaHQgPSAxMDtcclxuXHJcbiAgICAgICAgdGhpcy5vcGVuVG9hc3RSZWZzLmZvckVhY2gob2JqID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdG9hc3Q6IE5vdGlmaWNhdGlvbkNvbXBvbmVudCA9IG9iai5yZWYuaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIHRvYXN0Lm9mZnNldFRvcCA9IGN1bXVsYXRpdmVIZWlnaHQ7XHJcbiAgICAgICAgICAgIGN1bXVsYXRpdmVIZWlnaHQgKz0gdG9hc3QuZ2V0SGVpZ2h0KCkgKyA2O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdHJhbnNsYXRlVHJhbnNsYXRpb25WYXJzKHRyYW5zbGF0aW9uVmFyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSk6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgICB9IHtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXModHJhbnNsYXRpb25WYXJzKSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uVmFyc1trZXldID0gdGhpcy5pMThuU2VydmljZS50cmFuc2xhdGUodmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25WYXJzO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==