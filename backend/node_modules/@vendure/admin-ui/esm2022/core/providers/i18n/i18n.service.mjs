import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { LanguageCode } from '../../common/generated-types';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/** @dynamic */
export class I18nService {
    get availableLanguages() {
        return [...this._availableLanguages];
    }
    constructor(ngxTranslate, document) {
        this.ngxTranslate = ngxTranslate;
        this.document = document;
        this._availableLanguages = [];
    }
    /**
     * Set the default language
     */
    setDefaultLanguage(languageCode) {
        this.ngxTranslate.setDefaultLang(languageCode);
    }
    /**
     * Set the UI language
     */
    setLanguage(language) {
        this.ngxTranslate.use(language);
        if (this.document?.documentElement) {
            this.document.documentElement.lang = language;
        }
    }
    /**
     * Set the available UI languages
     */
    setAvailableLanguages(languages) {
        this._availableLanguages = languages;
    }
    /**
     * Translate the given key.
     */
    translate(key, params) {
        return this.ngxTranslate.instant(key, params);
    }
    /**
     * Returns true if the given language code is a right-to-left language.
     */
    isRTL(languageCode) {
        const rtlLanguageCodes = [
            LanguageCode.ar,
            LanguageCode.he,
            LanguageCode.fa,
            LanguageCode.ur,
            LanguageCode.ps,
        ];
        return rtlLanguageCodes.includes(languageCode);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: I18nService, deps: [{ token: i1.TranslateService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: I18nService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: I18nService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvaTE4bi9pMThuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7O0FBRTVELGVBQWU7QUFJZixNQUFNLE9BQU8sV0FBVztJQUdwQixJQUFJLGtCQUFrQjtRQUNsQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsWUFBb0IsWUFBOEIsRUFBNEIsUUFBa0I7UUFBNUUsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQTRCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFOaEcsd0JBQW1CLEdBQW1CLEVBQUUsQ0FBQztJQU0wRCxDQUFDO0lBRXBHOztPQUVHO0lBQ0gsa0JBQWtCLENBQUMsWUFBMEI7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVyxDQUFDLFFBQXNCO1FBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztTQUNqRDtJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILHFCQUFxQixDQUFDLFNBQXlCO1FBQzNDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxDQUFDLEdBQXNCLEVBQUUsTUFBWTtRQUMxQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsWUFBMEI7UUFDNUIsTUFBTSxnQkFBZ0IsR0FBRztZQUNyQixZQUFZLENBQUMsRUFBRTtZQUNmLFlBQVksQ0FBQyxFQUFFO1lBQ2YsWUFBWSxDQUFDLEVBQUU7WUFDZixZQUFZLENBQUMsRUFBRTtZQUNmLFlBQVksQ0FBQyxFQUFFO1NBQ2xCLENBQUM7UUFDRixPQUFPLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNuRCxDQUFDOzhHQXBEUSxXQUFXLGtEQU93QyxRQUFRO2tIQVAzRCxXQUFXLGNBRlIsTUFBTTs7MkZBRVQsV0FBVztrQkFIdkIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7OzBCQVF3RCxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBMYW5ndWFnZUNvZGUgfSBmcm9tICcuLi8uLi9jb21tb24vZ2VuZXJhdGVkLXR5cGVzJztcclxuXHJcbi8qKiBAZHluYW1pYyAqL1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJMThuU2VydmljZSB7XHJcbiAgICBfYXZhaWxhYmxlTGFuZ3VhZ2VzOiBMYW5ndWFnZUNvZGVbXSA9IFtdO1xyXG5cclxuICAgIGdldCBhdmFpbGFibGVMYW5ndWFnZXMoKTogTGFuZ3VhZ2VDb2RlW10ge1xyXG4gICAgICAgIHJldHVybiBbLi4udGhpcy5fYXZhaWxhYmxlTGFuZ3VhZ2VzXTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5neFRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQpIHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGRlZmF1bHQgbGFuZ3VhZ2VcclxuICAgICAqL1xyXG4gICAgc2V0RGVmYXVsdExhbmd1YWdlKGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlKSB7XHJcbiAgICAgICAgdGhpcy5uZ3hUcmFuc2xhdGUuc2V0RGVmYXVsdExhbmcobGFuZ3VhZ2VDb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgVUkgbGFuZ3VhZ2VcclxuICAgICAqL1xyXG4gICAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IExhbmd1YWdlQ29kZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubmd4VHJhbnNsYXRlLnVzZShsYW5ndWFnZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQ/LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nID0gbGFuZ3VhZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBhdmFpbGFibGUgVUkgbGFuZ3VhZ2VzXHJcbiAgICAgKi9cclxuICAgIHNldEF2YWlsYWJsZUxhbmd1YWdlcyhsYW5ndWFnZXM6IExhbmd1YWdlQ29kZVtdKSB7XHJcbiAgICAgICAgdGhpcy5fYXZhaWxhYmxlTGFuZ3VhZ2VzID0gbGFuZ3VhZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNsYXRlIHRoZSBnaXZlbiBrZXkuXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZShrZXk6IHN0cmluZyB8IHN0cmluZ1tdLCBwYXJhbXM/OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5neFRyYW5zbGF0ZS5pbnN0YW50KGtleSwgcGFyYW1zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbGFuZ3VhZ2UgY29kZSBpcyBhIHJpZ2h0LXRvLWxlZnQgbGFuZ3VhZ2UuXHJcbiAgICAgKi9cclxuICAgIGlzUlRMKGxhbmd1YWdlQ29kZTogTGFuZ3VhZ2VDb2RlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgcnRsTGFuZ3VhZ2VDb2RlcyA9IFtcclxuICAgICAgICAgICAgTGFuZ3VhZ2VDb2RlLmFyLFxyXG4gICAgICAgICAgICBMYW5ndWFnZUNvZGUuaGUsXHJcbiAgICAgICAgICAgIExhbmd1YWdlQ29kZS5mYSxcclxuICAgICAgICAgICAgTGFuZ3VhZ2VDb2RlLnVyLFxyXG4gICAgICAgICAgICBMYW5ndWFnZUNvZGUucHMsXHJcbiAgICAgICAgXTtcclxuICAgICAgICByZXR1cm4gcnRsTGFuZ3VhZ2VDb2Rlcy5pbmNsdWRlcyhsYW5ndWFnZUNvZGUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==