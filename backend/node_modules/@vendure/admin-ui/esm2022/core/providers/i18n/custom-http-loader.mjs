import { map } from 'rxjs/operators';
/**
 * A loader for ngx-translate which extends the HttpLoader functionality by stripping out any
 * values which are empty strings. This means that during development, translation keys which have
 * been extracted but not yet defined will fall back to the raw key text rather than displaying nothing.
 *
 * Originally from https://github.com/ngx-translate/core/issues/662#issuecomment-377010232
 */
export class CustomHttpTranslationLoader {
    constructor(http, prefix = '/assets/i18n/', suffix = '.json') {
        this.http = http;
        this.prefix = prefix;
        this.suffix = suffix;
    }
    getTranslation(lang) {
        return this.http
            .get(`${this.prefix}${lang}${this.suffix}`)
            .pipe(map((res) => this.process(res)));
    }
    process(object) {
        const newObject = {};
        for (const key in object) {
            if (object.hasOwnProperty(key)) {
                const value = object[key];
                if (typeof value !== 'string') {
                    newObject[key] = this.process(value);
                }
                else if (typeof value === 'string' && value === '') {
                    // do not copy empty strings
                }
                else {
                    newObject[key] = object[key];
                }
            }
        }
        return newObject;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWh0dHAtbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9wcm92aWRlcnMvaTE4bi9jdXN0b20taHR0cC1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTXJDOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTywyQkFBMkI7SUFDcEMsWUFDWSxJQUFnQixFQUNoQixTQUFpQixlQUFlLEVBQ2hDLFNBQWlCLE9BQU87UUFGeEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUEwQjtRQUNoQyxXQUFNLEdBQU4sTUFBTSxDQUFrQjtJQUNqQyxDQUFDO0lBRUcsY0FBYyxDQUFDLElBQVk7UUFDOUIsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNYLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sT0FBTyxDQUFDLE1BQWtCO1FBQzlCLE1BQU0sU0FBUyxHQUFlLEVBQUUsQ0FBQztRQUVqQyxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN0QixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzVCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDMUIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7b0JBQzNCLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN4QztxQkFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO29CQUNsRCw0QkFBNEI7aUJBQy9CO3FCQUFNO29CQUNILFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2hDO2FBQ0o7U0FDSjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZUxvYWRlciB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCB0eXBlIERpY3Rpb25hcnkgPSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBEaWN0aW9uYXJ5O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgbG9hZGVyIGZvciBuZ3gtdHJhbnNsYXRlIHdoaWNoIGV4dGVuZHMgdGhlIEh0dHBMb2FkZXIgZnVuY3Rpb25hbGl0eSBieSBzdHJpcHBpbmcgb3V0IGFueVxyXG4gKiB2YWx1ZXMgd2hpY2ggYXJlIGVtcHR5IHN0cmluZ3MuIFRoaXMgbWVhbnMgdGhhdCBkdXJpbmcgZGV2ZWxvcG1lbnQsIHRyYW5zbGF0aW9uIGtleXMgd2hpY2ggaGF2ZVxyXG4gKiBiZWVuIGV4dHJhY3RlZCBidXQgbm90IHlldCBkZWZpbmVkIHdpbGwgZmFsbCBiYWNrIHRvIHRoZSByYXcga2V5IHRleHQgcmF0aGVyIHRoYW4gZGlzcGxheWluZyBub3RoaW5nLlxyXG4gKlxyXG4gKiBPcmlnaW5hbGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL25neC10cmFuc2xhdGUvY29yZS9pc3N1ZXMvNjYyI2lzc3VlY29tbWVudC0zNzcwMTAyMzJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21IdHRwVHJhbnNsYXRpb25Mb2FkZXIgaW1wbGVtZW50cyBUcmFuc2xhdGVMb2FkZXIge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgICAgIHByaXZhdGUgcHJlZml4OiBzdHJpbmcgPSAnL2Fzc2V0cy9pMThuLycsXHJcbiAgICAgICAgcHJpdmF0ZSBzdWZmaXg6IHN0cmluZyA9ICcuanNvbicsXHJcbiAgICApIHt9XHJcblxyXG4gICAgcHVibGljIGdldFRyYW5zbGF0aW9uKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFxyXG4gICAgICAgICAgICAuZ2V0KGAke3RoaXMucHJlZml4fSR7bGFuZ30ke3RoaXMuc3VmZml4fWApXHJcbiAgICAgICAgICAgIC5waXBlKG1hcCgocmVzOiBhbnkpID0+IHRoaXMucHJvY2VzcyhyZXMpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcm9jZXNzKG9iamVjdDogRGljdGlvbmFyeSk6IERpY3Rpb25hcnkge1xyXG4gICAgICAgIGNvbnN0IG5ld09iamVjdDogRGljdGlvbmFyeSA9IHt9O1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmplY3Rba2V5XSA9IHRoaXMucHJvY2Vzcyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZG8gbm90IGNvcHkgZW1wdHkgc3RyaW5nc1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmplY3Rba2V5XSA9IG9iamVjdFtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3T2JqZWN0O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==