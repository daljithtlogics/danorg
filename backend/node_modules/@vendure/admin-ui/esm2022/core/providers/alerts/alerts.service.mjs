import { Injectable } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { BehaviorSubject, combineLatest, interval, isObservable, Subject, switchMap } from 'rxjs';
import { map, mapTo, startWith, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class Alert {
    constructor(config) {
        this.config = config;
        this.hasRun$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject(undefined);
        if (this.config.recheckIntervalMs) {
            interval(this.config.recheckIntervalMs).subscribe(() => this.runCheck());
        }
        this.activeAlert$ = combineLatest(this.data$, this.hasRun$).pipe(map(([data, hasRun]) => {
            if (!data) {
                return;
            }
            const isAlert = this.config.isAlert(data);
            if (!isAlert) {
                return;
            }
            return {
                id: this.config.id,
                runAction: () => {
                    if (!hasRun) {
                        this.config.action(data);
                        this.hasRun$.next(true);
                    }
                },
                hasRun,
                label: this.config.label(data),
            };
        }));
    }
    get id() {
        return this.config.id;
    }
    runCheck() {
        const result = this.config.check();
        if (result instanceof Promise) {
            result.then(data => this.data$.next(data));
        }
        else if (isObservable(result)) {
            result.pipe(take(1)).subscribe(data => this.data$.next(data));
        }
        else {
            this.data$.next(result);
        }
        this.hasRun$.next(false);
    }
}
export class AlertsService {
    constructor() {
        this.alertsMap = new Map();
        this.configUpdated = new Subject();
        const alerts$ = this.configUpdated.pipe(mapTo([...this.alertsMap.values()]), startWith([...this.alertsMap.values()]));
        this.activeAlerts$ = alerts$.pipe(switchMap(() => {
            const alerts = [...this.alertsMap.values()];
            const isAlertStreams = alerts.map(alert => alert.activeAlert$);
            return combineLatest(isAlertStreams);
        }), map(alertStates => alertStates.filter(notNullOrUndefined)));
    }
    configureAlert(config) {
        this.alertsMap.set(config.id, new Alert(config));
        this.configUpdated.next();
    }
    refresh(id) {
        if (id) {
            this.alertsMap.get(id)?.runCheck();
        }
        else {
            this.alertsMap.forEach(config => config.runCheck());
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AlertsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AlertsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AlertsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL3Byb3ZpZGVycy9hbGVydHMvYWxlcnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFjLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUcsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQWtCN0QsTUFBTSxPQUFPLEtBQUs7SUFJZCxZQUFvQixNQUFzQjtRQUF0QixXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUZsQyxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsVUFBSyxHQUFHLElBQUksZUFBZSxDQUFnQixTQUFTLENBQUMsQ0FBQztRQUUxRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUU7WUFDL0IsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDNUU7UUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzVELEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDbkIsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDUCxP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Q0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUFXO1FBQ2YsSUFBSSxFQUFFLEVBQUU7WUFDSixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztTQUN0QzthQUFNO1lBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUN2RDtJQUNMLENBQUM7OEdBaENRLGFBQWE7a0hBQWIsYUFBYSxjQUZWLE1BQU07OzJGQUVULGFBQWE7a0JBSHpCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBub3ROdWxsT3JVbmRlZmluZWQgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC11dGlscyc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgY29tYmluZUxhdGVzdCwgaW50ZXJ2YWwsIGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSwgU3ViamVjdCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgbWFwVG8sIHN0YXJ0V2l0aCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWxlcnRDb25maWc8VCA9IGFueT4ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGNoZWNrOiAoKSA9PiBUIHwgUHJvbWlzZTxUPiB8IE9ic2VydmFibGU8VD47XHJcbiAgICByZWNoZWNrSW50ZXJ2YWxNcz86IG51bWJlcjtcclxuICAgIGlzQWxlcnQ6ICh2YWx1ZTogVCkgPT4gYm9vbGVhbjtcclxuICAgIGFjdGlvbjogKGRhdGE6IFQpID0+IHZvaWQ7XHJcbiAgICBsYWJlbDogKGRhdGE6IFQpID0+IHsgdGV4dDogc3RyaW5nOyB0cmFuc2xhdGlvblZhcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB9IH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZlQWxlcnQge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHJ1bkFjdGlvbjogKCkgPT4gdm9pZDtcclxuICAgIGhhc1J1bjogYm9vbGVhbjtcclxuICAgIGxhYmVsOiB7IHRleHQ6IHN0cmluZzsgdHJhbnNsYXRpb25WYXJzPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQWxlcnQ8VD4ge1xyXG4gICAgYWN0aXZlQWxlcnQkOiBPYnNlcnZhYmxlPEFjdGl2ZUFsZXJ0IHwgdW5kZWZpbmVkPjtcclxuICAgIHByaXZhdGUgaGFzUnVuJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xyXG4gICAgcHJpdmF0ZSBkYXRhJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VCB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBBbGVydENvbmZpZzxUPikge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5yZWNoZWNrSW50ZXJ2YWxNcykge1xyXG4gICAgICAgICAgICBpbnRlcnZhbCh0aGlzLmNvbmZpZy5yZWNoZWNrSW50ZXJ2YWxNcykuc3Vic2NyaWJlKCgpID0+IHRoaXMucnVuQ2hlY2soKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWN0aXZlQWxlcnQkID0gY29tYmluZUxhdGVzdCh0aGlzLmRhdGEkLCB0aGlzLmhhc1J1biQpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoW2RhdGEsIGhhc1J1bl0pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQWxlcnQgPSB0aGlzLmNvbmZpZy5pc0FsZXJ0KGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FsZXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5jb25maWcuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcnVuQWN0aW9uOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzUnVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5hY3Rpb24oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc1J1biQubmV4dCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzUnVuLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLmNvbmZpZy5sYWJlbChkYXRhKSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBnZXQgaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmlkO1xyXG4gICAgfVxyXG4gICAgcnVuQ2hlY2soKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jb25maWcuY2hlY2soKTtcclxuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG4gICAgICAgICAgICByZXN1bHQudGhlbihkYXRhID0+IHRoaXMuZGF0YSQubmV4dChkYXRhKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc09ic2VydmFibGUocmVzdWx0KSkge1xyXG4gICAgICAgICAgICByZXN1bHQucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoZGF0YSA9PiB0aGlzLmRhdGEkLm5leHQoZGF0YSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSQubmV4dChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhc1J1biQubmV4dChmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEFsZXJ0c1NlcnZpY2Uge1xyXG4gICAgYWN0aXZlQWxlcnRzJDogT2JzZXJ2YWJsZTxBY3RpdmVBbGVydFtdPjtcclxuICAgIHByaXZhdGUgYWxlcnRzTWFwID0gbmV3IE1hcDxzdHJpbmcsIEFsZXJ0PGFueT4+KCk7XHJcbiAgICBwcml2YXRlIGNvbmZpZ1VwZGF0ZWQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGNvbnN0IGFsZXJ0cyQgPSB0aGlzLmNvbmZpZ1VwZGF0ZWQucGlwZShcclxuICAgICAgICAgICAgbWFwVG8oWy4uLnRoaXMuYWxlcnRzTWFwLnZhbHVlcygpXSksXHJcbiAgICAgICAgICAgIHN0YXJ0V2l0aChbLi4udGhpcy5hbGVydHNNYXAudmFsdWVzKCldKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmFjdGl2ZUFsZXJ0cyQgPSBhbGVydHMkLnBpcGUoXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbGVydHMgPSBbLi4udGhpcy5hbGVydHNNYXAudmFsdWVzKCldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNBbGVydFN0cmVhbXMgPSBhbGVydHMubWFwKGFsZXJ0ID0+IGFsZXJ0LmFjdGl2ZUFsZXJ0JCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tYmluZUxhdGVzdChpc0FsZXJ0U3RyZWFtcyk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBtYXAoYWxlcnRTdGF0ZXMgPT4gYWxlcnRTdGF0ZXMuZmlsdGVyKG5vdE51bGxPclVuZGVmaW5lZCkpLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlndXJlQWxlcnQ8VD4oY29uZmlnOiBBbGVydENvbmZpZzxUPikge1xyXG4gICAgICAgIHRoaXMuYWxlcnRzTWFwLnNldChjb25maWcuaWQsIG5ldyBBbGVydChjb25maWcpKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1VwZGF0ZWQubmV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZnJlc2goaWQ/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGVydHNNYXAuZ2V0KGlkKT8ucnVuQ2hlY2soKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFsZXJ0c01hcC5mb3JFYWNoKGNvbmZpZyA9PiBjb25maWcucnVuQ2hlY2soKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==