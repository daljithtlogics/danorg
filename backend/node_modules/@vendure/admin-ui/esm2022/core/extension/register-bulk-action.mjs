import { APP_INITIALIZER } from '@angular/core';
import { BulkActionRegistryService } from '../providers/bulk-action-registry/bulk-action-registry.service';
/**
 * @description
 * Registers a custom {@link BulkAction} which can be invoked from the bulk action menu
 * of any supported list view.
 *
 * This allows you to provide custom functionality that can operate on any of the selected
 * items in the list view.
 *
 * In this example, imagine we have an integration with a 3rd-party text translation service. This
 * bulk action allows us to select multiple products from the product list view, and send them for
 * translation via a custom service which integrates with the translation service's API.
 *
 * @example
 * ```ts title="providers.ts"
 * import { ModalService, registerBulkAction, SharedModule } from '\@vendure/admin-ui/core';
 * import { ProductDataTranslationService } from './product-data-translation.service';
 *
 * export default [
 *     ProductDataTranslationService,
 *     registerBulkAction({
 *         location: 'product-list',
 *         label: 'Send to translation service',
 *         icon: 'language',
 *         onClick: ({ injector, selection }) => {
 *             const modalService = injector.get(ModalService);
 *             const translationService = injector.get(ProductDataTranslationService);
 *             modalService
 *                 .dialog({
 *                     title: `Send ${selection.length} products for translation?`,
 *                     buttons: [
 *                         { type: 'secondary', label: 'cancel' },
 *                         { type: 'primary', label: 'send', returnValue: true },
 *                     ],
 *                 })
 *                 .subscribe(response => {
 *                     if (response) {
 *                         translationService.sendForTranslation(selection.map(item => item.productId));
 *                     }
 *                 });
 *         },
 *     }),
 * ];
 * ```
 * @since 1.8.0
 * @docsCategory bulk-actions
 */
export function registerBulkAction(bulkAction) {
    return {
        provide: APP_INITIALIZER,
        multi: true,
        useFactory: (registry) => () => {
            registry.registerBulkAction(bulkAction);
        },
        deps: [BulkActionRegistryService],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItYnVsay1hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2V4dGVuc2lvbi9yZWdpc3Rlci1idWxrLWFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFtQixNQUFNLGVBQWUsQ0FBQztBQUVqRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnRUFBZ0UsQ0FBQztBQUczRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNkNHO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUFDLFVBQXNCO0lBQ3JELE9BQU87UUFDSCxPQUFPLEVBQUUsZUFBZTtRQUN4QixLQUFLLEVBQUUsSUFBSTtRQUNYLFVBQVUsRUFBRSxDQUFDLFFBQW1DLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRTtZQUN0RCxRQUFRLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUNELElBQUksRUFBRSxDQUFDLHlCQUF5QixDQUFDO0tBQ3BDLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBGYWN0b3J5UHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEJ1bGtBY3Rpb25SZWdpc3RyeVNlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvYnVsay1hY3Rpb24tcmVnaXN0cnkvYnVsay1hY3Rpb24tcmVnaXN0cnkuc2VydmljZSc7XHJcbmltcG9ydCB7IEJ1bGtBY3Rpb24gfSBmcm9tICcuLi9wcm92aWRlcnMvYnVsay1hY3Rpb24tcmVnaXN0cnkvYnVsay1hY3Rpb24tdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBSZWdpc3RlcnMgYSBjdXN0b20ge0BsaW5rIEJ1bGtBY3Rpb259IHdoaWNoIGNhbiBiZSBpbnZva2VkIGZyb20gdGhlIGJ1bGsgYWN0aW9uIG1lbnVcclxuICogb2YgYW55IHN1cHBvcnRlZCBsaXN0IHZpZXcuXHJcbiAqXHJcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byBwcm92aWRlIGN1c3RvbSBmdW5jdGlvbmFsaXR5IHRoYXQgY2FuIG9wZXJhdGUgb24gYW55IG9mIHRoZSBzZWxlY3RlZFxyXG4gKiBpdGVtcyBpbiB0aGUgbGlzdCB2aWV3LlxyXG4gKlxyXG4gKiBJbiB0aGlzIGV4YW1wbGUsIGltYWdpbmUgd2UgaGF2ZSBhbiBpbnRlZ3JhdGlvbiB3aXRoIGEgM3JkLXBhcnR5IHRleHQgdHJhbnNsYXRpb24gc2VydmljZS4gVGhpc1xyXG4gKiBidWxrIGFjdGlvbiBhbGxvd3MgdXMgdG8gc2VsZWN0IG11bHRpcGxlIHByb2R1Y3RzIGZyb20gdGhlIHByb2R1Y3QgbGlzdCB2aWV3LCBhbmQgc2VuZCB0aGVtIGZvclxyXG4gKiB0cmFuc2xhdGlvbiB2aWEgYSBjdXN0b20gc2VydmljZSB3aGljaCBpbnRlZ3JhdGVzIHdpdGggdGhlIHRyYW5zbGF0aW9uIHNlcnZpY2UncyBBUEkuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYHRzIHRpdGxlPVwicHJvdmlkZXJzLnRzXCJcclxuICogaW1wb3J0IHsgTW9kYWxTZXJ2aWNlLCByZWdpc3RlckJ1bGtBY3Rpb24sIFNoYXJlZE1vZHVsZSB9IGZyb20gJ1xcQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XHJcbiAqIGltcG9ydCB7IFByb2R1Y3REYXRhVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm9kdWN0LWRhdGEtdHJhbnNsYXRpb24uc2VydmljZSc7XHJcbiAqXHJcbiAqIGV4cG9ydCBkZWZhdWx0IFtcclxuICogICAgIFByb2R1Y3REYXRhVHJhbnNsYXRpb25TZXJ2aWNlLFxyXG4gKiAgICAgcmVnaXN0ZXJCdWxrQWN0aW9uKHtcclxuICogICAgICAgICBsb2NhdGlvbjogJ3Byb2R1Y3QtbGlzdCcsXHJcbiAqICAgICAgICAgbGFiZWw6ICdTZW5kIHRvIHRyYW5zbGF0aW9uIHNlcnZpY2UnLFxyXG4gKiAgICAgICAgIGljb246ICdsYW5ndWFnZScsXHJcbiAqICAgICAgICAgb25DbGljazogKHsgaW5qZWN0b3IsIHNlbGVjdGlvbiB9KSA9PiB7XHJcbiAqICAgICAgICAgICAgIGNvbnN0IG1vZGFsU2VydmljZSA9IGluamVjdG9yLmdldChNb2RhbFNlcnZpY2UpO1xyXG4gKiAgICAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvblNlcnZpY2UgPSBpbmplY3Rvci5nZXQoUHJvZHVjdERhdGFUcmFuc2xhdGlvblNlcnZpY2UpO1xyXG4gKiAgICAgICAgICAgICBtb2RhbFNlcnZpY2VcclxuICogICAgICAgICAgICAgICAgIC5kaWFsb2coe1xyXG4gKiAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBgU2VuZCAke3NlbGVjdGlvbi5sZW5ndGh9IHByb2R1Y3RzIGZvciB0cmFuc2xhdGlvbj9gLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IFtcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgeyB0eXBlOiAnc2Vjb25kYXJ5JywgbGFiZWw6ICdjYW5jZWwnIH0sXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHsgdHlwZTogJ3ByaW1hcnknLCBsYWJlbDogJ3NlbmQnLCByZXR1cm5WYWx1ZTogdHJ1ZSB9LFxyXG4gKiAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAqICAgICAgICAgICAgICAgICB9KVxyXG4gKiAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XHJcbiAqICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlKSB7XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uU2VydmljZS5zZW5kRm9yVHJhbnNsYXRpb24oc2VsZWN0aW9uLm1hcChpdGVtID0+IGl0ZW0ucHJvZHVjdElkKSk7XHJcbiAqICAgICAgICAgICAgICAgICAgICAgfVxyXG4gKiAgICAgICAgICAgICAgICAgfSk7XHJcbiAqICAgICAgICAgfSxcclxuICogICAgIH0pLFxyXG4gKiBdO1xyXG4gKiBgYGBcclxuICogQHNpbmNlIDEuOC4wXHJcbiAqIEBkb2NzQ2F0ZWdvcnkgYnVsay1hY3Rpb25zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJCdWxrQWN0aW9uKGJ1bGtBY3Rpb246IEJ1bGtBY3Rpb24pOiBGYWN0b3J5UHJvdmlkZXIge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXHJcbiAgICAgICAgbXVsdGk6IHRydWUsXHJcbiAgICAgICAgdXNlRmFjdG9yeTogKHJlZ2lzdHJ5OiBCdWxrQWN0aW9uUmVnaXN0cnlTZXJ2aWNlKSA9PiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5LnJlZ2lzdGVyQnVsa0FjdGlvbihidWxrQWN0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlcHM6IFtCdWxrQWN0aW9uUmVnaXN0cnlTZXJ2aWNlXSxcclxuICAgIH07XHJcbn1cclxuIl19