import { APP_INITIALIZER } from '@angular/core';
import { ComponentRegistryService } from '../providers/component-registry/component-registry.service';
/**
 * @description
 * Registers a custom FormInputComponent which can be used to control the argument inputs
 * of a {@link ConfigurableOperationDef} (e.g. CollectionFilter, ShippingMethod etc.) or for
 * a custom field.
 *
 * @example
 * ```ts title="providers.ts"
 * import { registerFormInputComponent } from '\@vendure/admin-ui/core';
 *
 * export default [
 *     // highlight-next-line
 *     registerFormInputComponent('my-custom-input', MyCustomFieldControl),
 * ];
 * ```
 *
 * This input component can then be used in a custom field:
 *
 * @example
 * ```ts title="src/vendure-config.ts"
 * import { VendureConfig } from '\@vendure/core';
 *
 * const config: VendureConfig = {
 *   // ...
 *   customFields: {
 *     ProductVariant: [
 *       {
 *         name: 'rrp',
 *         type: 'int',
 *         // highlight-next-line
 *         ui: { component: 'my-custom-input' },
 *       },
 *     ]
 *   }
 * }
 * ```
 *
 * or with an argument of a {@link ConfigurableOperationDef}:
 *
 * @example
 * ```ts
 * args: {
 *   rrp: { type: 'int', ui: { component: 'my-custom-input' } },
 * }
 * ```
 *
 * @docsCategory custom-input-components
 */
export function registerFormInputComponent(id, component) {
    return {
        provide: APP_INITIALIZER,
        multi: true,
        useFactory: (registry) => () => {
            registry.registerInputComponent(id, component);
        },
        deps: [ComponentRegistryService],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZm9ybS1pbnB1dC1jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2V4dGVuc2lvbi9yZWdpc3Rlci1mb3JtLWlucHV0LWNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUF5QixNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUV0Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0ErQ0c7QUFDSCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsRUFBVSxFQUFFLFNBQW1DO0lBQ3RGLE9BQU87UUFDSCxPQUFPLEVBQUUsZUFBZTtRQUN4QixLQUFLLEVBQUUsSUFBSTtRQUNYLFVBQVUsRUFBRSxDQUFDLFFBQWtDLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRTtZQUNyRCxRQUFRLENBQUMsc0JBQXNCLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFDRCxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztLQUNuQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiwgRmFjdG9yeVByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1JbnB1dENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9jb21wb25lbnQtcmVnaXN0cnktdHlwZXMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWdpc3RyeVNlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvY29tcG9uZW50LXJlZ2lzdHJ5L2NvbXBvbmVudC1yZWdpc3RyeS5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogUmVnaXN0ZXJzIGEgY3VzdG9tIEZvcm1JbnB1dENvbXBvbmVudCB3aGljaCBjYW4gYmUgdXNlZCB0byBjb250cm9sIHRoZSBhcmd1bWVudCBpbnB1dHNcclxuICogb2YgYSB7QGxpbmsgQ29uZmlndXJhYmxlT3BlcmF0aW9uRGVmfSAoZS5nLiBDb2xsZWN0aW9uRmlsdGVyLCBTaGlwcGluZ01ldGhvZCBldGMuKSBvciBmb3JcclxuICogYSBjdXN0b20gZmllbGQuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYHRzIHRpdGxlPVwicHJvdmlkZXJzLnRzXCJcclxuICogaW1wb3J0IHsgcmVnaXN0ZXJGb3JtSW5wdXRDb21wb25lbnQgfSBmcm9tICdcXEB2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG4gKlxyXG4gKiBleHBvcnQgZGVmYXVsdCBbXHJcbiAqICAgICAvLyBoaWdobGlnaHQtbmV4dC1saW5lXHJcbiAqICAgICByZWdpc3RlckZvcm1JbnB1dENvbXBvbmVudCgnbXktY3VzdG9tLWlucHV0JywgTXlDdXN0b21GaWVsZENvbnRyb2wpLFxyXG4gKiBdO1xyXG4gKiBgYGBcclxuICpcclxuICogVGhpcyBpbnB1dCBjb21wb25lbnQgY2FuIHRoZW4gYmUgdXNlZCBpbiBhIGN1c3RvbSBmaWVsZDpcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgdHMgdGl0bGU9XCJzcmMvdmVuZHVyZS1jb25maWcudHNcIlxyXG4gKiBpbXBvcnQgeyBWZW5kdXJlQ29uZmlnIH0gZnJvbSAnXFxAdmVuZHVyZS9jb3JlJztcclxuICpcclxuICogY29uc3QgY29uZmlnOiBWZW5kdXJlQ29uZmlnID0ge1xyXG4gKiAgIC8vIC4uLlxyXG4gKiAgIGN1c3RvbUZpZWxkczoge1xyXG4gKiAgICAgUHJvZHVjdFZhcmlhbnQ6IFtcclxuICogICAgICAge1xyXG4gKiAgICAgICAgIG5hbWU6ICdycnAnLFxyXG4gKiAgICAgICAgIHR5cGU6ICdpbnQnLFxyXG4gKiAgICAgICAgIC8vIGhpZ2hsaWdodC1uZXh0LWxpbmVcclxuICogICAgICAgICB1aTogeyBjb21wb25lbnQ6ICdteS1jdXN0b20taW5wdXQnIH0sXHJcbiAqICAgICAgIH0sXHJcbiAqICAgICBdXHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBvciB3aXRoIGFuIGFyZ3VtZW50IG9mIGEge0BsaW5rIENvbmZpZ3VyYWJsZU9wZXJhdGlvbkRlZn06XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYHRzXHJcbiAqIGFyZ3M6IHtcclxuICogICBycnA6IHsgdHlwZTogJ2ludCcsIHVpOiB7IGNvbXBvbmVudDogJ215LWN1c3RvbS1pbnB1dCcgfSB9LFxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZG9jc0NhdGVnb3J5IGN1c3RvbS1pbnB1dC1jb21wb25lbnRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJGb3JtSW5wdXRDb21wb25lbnQoaWQ6IHN0cmluZywgY29tcG9uZW50OiBUeXBlPEZvcm1JbnB1dENvbXBvbmVudD4pOiBGYWN0b3J5UHJvdmlkZXIge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXHJcbiAgICAgICAgbXVsdGk6IHRydWUsXHJcbiAgICAgICAgdXNlRmFjdG9yeTogKHJlZ2lzdHJ5OiBDb21wb25lbnRSZWdpc3RyeVNlcnZpY2UpID0+ICgpID0+IHtcclxuICAgICAgICAgICAgcmVnaXN0cnkucmVnaXN0ZXJJbnB1dENvbXBvbmVudChpZCwgY29tcG9uZW50KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlcHM6IFtDb21wb25lbnRSZWdpc3RyeVNlcnZpY2VdLFxyXG4gICAgfTtcclxufVxyXG4iXX0=