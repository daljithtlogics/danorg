import { Component, inject, InjectionToken } from '@angular/core';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { combineLatest, Observable, of, switchMap } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { SharedModule } from '../../shared/shared.module';
import { PageMetadataService } from '../providers/page-metadata.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common";
import * as i3 from "../../shared/components/page-header/page-header.component";
import * as i4 from "../../shared/components/page-title/page-title.component";
import * as i5 from "../../shared/components/page-body/page-body.component";
export const ROUTE_COMPONENT_OPTIONS = new InjectionToken('ROUTE_COMPONENT_OPTIONS');
export class RouteComponent {
    constructor(route) {
        this.route = route;
        const breadcrumbLabel$ = this.route.data.pipe(switchMap(data => {
            if (data.breadcrumb instanceof Observable) {
                return data.breadcrumb;
            }
            if (typeof data.breadcrumb === 'function') {
                return data.breadcrumb(data);
            }
            return of(undefined);
        }), filter(notNullOrUndefined), map(breadcrumb => {
            if (typeof breadcrumb === 'string') {
                return breadcrumb;
            }
            if (Array.isArray(breadcrumb)) {
                return breadcrumb[breadcrumb.length - 1].label;
            }
            return breadcrumb.label;
        }));
        this.title$ = combineLatest([inject(ROUTE_COMPONENT_OPTIONS).title$, breadcrumbLabel$]).pipe(map(([title, breadcrumbLabel]) => title ?? breadcrumbLabel));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: RouteComponent, deps: [{ token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: RouteComponent, isStandalone: true, selector: "vdr-route-component", providers: [PageMetadataService], ngImport: i0, template: `
        <vdr-page-header>
            <vdr-page-title *ngIf="title$ | async as title" [title]="title"></vdr-page-title>
        </vdr-page-header>
        <vdr-page-body><ng-content /></vdr-page-body>
    `, isInline: true, dependencies: [{ kind: "ngmodule", type: SharedModule }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.PageHeaderComponent, selector: "vdr-page-header" }, { kind: "component", type: i4.PageTitleComponent, selector: "vdr-page-title", inputs: ["title"] }, { kind: "component", type: i5.PageBodyComponent, selector: "vdr-page-body" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: RouteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'vdr-route-component',
                    template: `
        <vdr-page-header>
            <vdr-page-title *ngIf="title$ | async as title" [title]="title"></vdr-page-title>
        </vdr-page-header>
        <vdr-page-body><ng-content /></vdr-page-body>
    `,
                    standalone: true,
                    imports: [SharedModule],
                    providers: [PageMetadataService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3NyYy9leHRlbnNpb24vY29tcG9uZW50cy9yb3V0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7Ozs7Ozs7QUFHekUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3JELHlCQUF5QixDQUM1QixDQUFDO0FBY0YsTUFBTSxPQUFPLGNBQWM7SUFHdkIsWUFBb0IsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3pDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNiLElBQUksSUFBSSxDQUFDLFVBQVUsWUFBWSxVQUFVLEVBQUU7Z0JBQ3ZDLE9BQU8sSUFBSSxDQUFDLFVBQXlDLENBQUM7YUFDekQ7WUFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxVQUFVLEVBQUU7Z0JBQ3ZDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQWdDLENBQUM7YUFDL0Q7WUFDRCxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsRUFDRixNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFDMUIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2IsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7Z0JBQ2hDLE9BQU8sVUFBVSxDQUFDO2FBQ3JCO1lBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUMzQixPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzthQUNsRDtZQUNELE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FDTCxDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDeEYsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxlQUFlLENBQUMsQ0FDOUQsQ0FBQztJQUNOLENBQUM7OEdBN0JRLGNBQWM7a0dBQWQsY0FBYyxrRUFGWixDQUFDLG1CQUFtQixDQUFDLDBCQVJ0Qjs7Ozs7S0FLVCwyREFFUyxZQUFZOzsyRkFHYixjQUFjO2tCQVoxQixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRTs7Ozs7S0FLVDtvQkFDRCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO29CQUN2QixTQUFTLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztpQkFDbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIGluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBub3ROdWxsT3JVbmRlZmluZWQgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC11dGlscyc7XHJcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWJWYWx1ZSB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycy9icmVhZGNydW1iL2JyZWFkY3J1bWIuc2VydmljZSc7XHJcbmltcG9ydCB7IFNoYXJlZE1vZHVsZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zaGFyZWQubW9kdWxlJztcclxuaW1wb3J0IHsgUGFnZU1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9wYWdlLW1ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBbmd1bGFyUm91dGVDb21wb25lbnRPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJPVVRFX0NPTVBPTkVOVF9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPEFuZ3VsYXJSb3V0ZUNvbXBvbmVudE9wdGlvbnM+KFxyXG4gICAgJ1JPVVRFX0NPTVBPTkVOVF9PUFRJT05TJyxcclxuKTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItcm91dGUtY29tcG9uZW50JyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPHZkci1wYWdlLWhlYWRlcj5cclxuICAgICAgICAgICAgPHZkci1wYWdlLXRpdGxlICpuZ0lmPVwidGl0bGUkIHwgYXN5bmMgYXMgdGl0bGVcIiBbdGl0bGVdPVwidGl0bGVcIj48L3Zkci1wYWdlLXRpdGxlPlxyXG4gICAgICAgIDwvdmRyLXBhZ2UtaGVhZGVyPlxyXG4gICAgICAgIDx2ZHItcGFnZS1ib2R5PjxuZy1jb250ZW50IC8+PC92ZHItcGFnZS1ib2R5PlxyXG4gICAgYCxcclxuICAgIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgICBpbXBvcnRzOiBbU2hhcmVkTW9kdWxlXSxcclxuICAgIHByb3ZpZGVyczogW1BhZ2VNZXRhZGF0YVNlcnZpY2VdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUm91dGVDb21wb25lbnQge1xyXG4gICAgcHJvdGVjdGVkIHRpdGxlJDogT2JzZXJ2YWJsZTxzdHJpbmcgfCB1bmRlZmluZWQ+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7XHJcbiAgICAgICAgY29uc3QgYnJlYWRjcnVtYkxhYmVsJCA9IHRoaXMucm91dGUuZGF0YS5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5icmVhZGNydW1iIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmJyZWFkY3J1bWIgYXMgT2JzZXJ2YWJsZTxCcmVhZGNydW1iVmFsdWU+O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhLmJyZWFkY3J1bWIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5icmVhZGNydW1iKGRhdGEpIGFzIE9ic2VydmFibGU8QnJlYWRjcnVtYlZhbHVlPjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgZmlsdGVyKG5vdE51bGxPclVuZGVmaW5lZCksXHJcbiAgICAgICAgICAgIG1hcChicmVhZGNydW1iID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnJlYWRjcnVtYiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnJlYWRjcnVtYjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFkY3J1bWIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJyZWFkY3J1bWJbYnJlYWRjcnVtYi5sZW5ndGggLSAxXS5sYWJlbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBicmVhZGNydW1iLmxhYmVsO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLnRpdGxlJCA9IGNvbWJpbmVMYXRlc3QoW2luamVjdChST1VURV9DT01QT05FTlRfT1BUSU9OUykudGl0bGUkLCBicmVhZGNydW1iTGFiZWwkXSkucGlwZShcclxuICAgICAgICAgICAgbWFwKChbdGl0bGUsIGJyZWFkY3J1bWJMYWJlbF0pID0+IHRpdGxlID8/IGJyZWFkY3J1bWJMYWJlbCksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=