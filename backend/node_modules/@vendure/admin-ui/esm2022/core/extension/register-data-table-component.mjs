import { APP_INITIALIZER } from '@angular/core';
import { DataTableCustomComponentService, } from '../shared/components/data-table-2/data-table-custom-component.service';
/**
 * @description
 * Allows you to override the default component used to render the data of a particular column in a DataTable.
 * The component should implement the {@link CustomDataTableColumnComponent} interface. The tableId and columnId can
 * be determined by pressing `ctrl + u` when running the Admin UI in dev mode.
 *
 * @example
 * ```ts title="components/custom-table.component.ts"
 * import { Component, Input } from '\@angular/core';
 * import { CustomColumnComponent } from '\@vendure/admin-ui/core';
 *
 * \@Component({
 *     selector: 'custom-slug-component',
 *     template: `
 *         <a [href]="'https://example.com/products/' + rowItem.slug" target="_blank">{{ rowItem.slug }}</a>
 *     `,
 *     standalone: true,
 * })
 * export class CustomTableComponent implements CustomColumnComponent {
 *     \@Input() rowItem: any;
 * }
 * ```
 *
 * ```ts title="providers.ts"
 * import { registerDataTableComponent } from '\@vendure/admin-ui/core';
 * import { CustomTableComponent } from './components/custom-table.component';
 *
 * export default [
 *     registerDataTableComponent({
 *         component: CustomTableComponent,
 *         tableId: 'product-list',
 *         columnId: 'slug',
 *     }),
 * ];
 * ```
 *
 * @docsCategory custom-table-components
 */
export function registerDataTableComponent(config) {
    return {
        provide: APP_INITIALIZER,
        multi: true,
        useFactory: (dataTableCustomComponentService) => () => {
            dataTableCustomComponentService.registerCustomComponent(config);
        },
        deps: [DataTableCustomComponentService],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXItZGF0YS10YWJsZS1jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NvcmUvc3JjL2V4dGVuc2lvbi9yZWdpc3Rlci1kYXRhLXRhYmxlLWNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFFSCwrQkFBK0IsR0FDbEMsTUFBTSx1RUFBdUUsQ0FBQztBQUUvRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFDRztBQUNILE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxNQUFnQztJQUN2RSxPQUFPO1FBQ0gsT0FBTyxFQUFFLGVBQWU7UUFDeEIsS0FBSyxFQUFFLElBQUk7UUFDWCxVQUFVLEVBQUUsQ0FBQywrQkFBZ0UsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFO1lBQ25GLCtCQUErQixDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFDRCxJQUFJLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQztLQUMxQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YVRhYmxlQ29tcG9uZW50Q29uZmlnLFxyXG4gICAgRGF0YVRhYmxlQ3VzdG9tQ29tcG9uZW50U2VydmljZSxcclxufSBmcm9tICcuLi9zaGFyZWQvY29tcG9uZW50cy9kYXRhLXRhYmxlLTIvZGF0YS10YWJsZS1jdXN0b20tY29tcG9uZW50LnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBbGxvd3MgeW91IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgZGF0YSBvZiBhIHBhcnRpY3VsYXIgY29sdW1uIGluIGEgRGF0YVRhYmxlLlxyXG4gKiBUaGUgY29tcG9uZW50IHNob3VsZCBpbXBsZW1lbnQgdGhlIHtAbGluayBDdXN0b21EYXRhVGFibGVDb2x1bW5Db21wb25lbnR9IGludGVyZmFjZS4gVGhlIHRhYmxlSWQgYW5kIGNvbHVtbklkIGNhblxyXG4gKiBiZSBkZXRlcm1pbmVkIGJ5IHByZXNzaW5nIGBjdHJsICsgdWAgd2hlbiBydW5uaW5nIHRoZSBBZG1pbiBVSSBpbiBkZXYgbW9kZS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgdHMgdGl0bGU9XCJjb21wb25lbnRzL2N1c3RvbS10YWJsZS5jb21wb25lbnQudHNcIlxyXG4gKiBpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnXFxAYW5ndWxhci9jb3JlJztcclxuICogaW1wb3J0IHsgQ3VzdG9tQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnXFxAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuICpcclxuICogXFxAQ29tcG9uZW50KHtcclxuICogICAgIHNlbGVjdG9yOiAnY3VzdG9tLXNsdWctY29tcG9uZW50JyxcclxuICogICAgIHRlbXBsYXRlOiBgXHJcbiAqICAgICAgICAgPGEgW2hyZWZdPVwiJ2h0dHBzOi8vZXhhbXBsZS5jb20vcHJvZHVjdHMvJyArIHJvd0l0ZW0uc2x1Z1wiIHRhcmdldD1cIl9ibGFua1wiPnt7IHJvd0l0ZW0uc2x1ZyB9fTwvYT5cclxuICogICAgIGAsXHJcbiAqICAgICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gKiB9KVxyXG4gKiBleHBvcnQgY2xhc3MgQ3VzdG9tVGFibGVDb21wb25lbnQgaW1wbGVtZW50cyBDdXN0b21Db2x1bW5Db21wb25lbnQge1xyXG4gKiAgICAgXFxASW5wdXQoKSByb3dJdGVtOiBhbnk7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIGBgYHRzIHRpdGxlPVwicHJvdmlkZXJzLnRzXCJcclxuICogaW1wb3J0IHsgcmVnaXN0ZXJEYXRhVGFibGVDb21wb25lbnQgfSBmcm9tICdcXEB2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG4gKiBpbXBvcnQgeyBDdXN0b21UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jdXN0b20tdGFibGUuY29tcG9uZW50JztcclxuICpcclxuICogZXhwb3J0IGRlZmF1bHQgW1xyXG4gKiAgICAgcmVnaXN0ZXJEYXRhVGFibGVDb21wb25lbnQoe1xyXG4gKiAgICAgICAgIGNvbXBvbmVudDogQ3VzdG9tVGFibGVDb21wb25lbnQsXHJcbiAqICAgICAgICAgdGFibGVJZDogJ3Byb2R1Y3QtbGlzdCcsXHJcbiAqICAgICAgICAgY29sdW1uSWQ6ICdzbHVnJyxcclxuICogICAgIH0pLFxyXG4gKiBdO1xyXG4gKiBgYGBcclxuICpcclxuICogQGRvY3NDYXRlZ29yeSBjdXN0b20tdGFibGUtY29tcG9uZW50c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGF0YVRhYmxlQ29tcG9uZW50KGNvbmZpZzogRGF0YVRhYmxlQ29tcG9uZW50Q29uZmlnKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcclxuICAgICAgICBtdWx0aTogdHJ1ZSxcclxuICAgICAgICB1c2VGYWN0b3J5OiAoZGF0YVRhYmxlQ3VzdG9tQ29tcG9uZW50U2VydmljZTogRGF0YVRhYmxlQ3VzdG9tQ29tcG9uZW50U2VydmljZSkgPT4gKCkgPT4ge1xyXG4gICAgICAgICAgICBkYXRhVGFibGVDdXN0b21Db21wb25lbnRTZXJ2aWNlLnJlZ2lzdGVyQ3VzdG9tQ29tcG9uZW50KGNvbmZpZyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXBzOiBbRGF0YVRhYmxlQ3VzdG9tQ29tcG9uZW50U2VydmljZV0sXHJcbiAgICB9O1xyXG59XHJcbiJdfQ==