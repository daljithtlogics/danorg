import { Directive, Input, Optional } from '@angular/core';
import { createContext, createElement } from 'react';
import { createRoot } from 'react-dom/client';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
export const HostedComponentContext = createContext(null);
/**
 * Based on https://netbasal.com/using-react-in-angular-applications-1bb907ecac91
 */
export class ReactComponentHostDirective {
    constructor(host, injector, pageMetadataService) {
        this.host = host;
        this.injector = injector;
        this.pageMetadataService = pageMetadataService;
        this.context = {};
        this.root = null;
    }
    async ngOnChanges() {
        const Comp = this.reactComponent;
        if (!this.root) {
            this.root = createRoot(this.host.nativeElement);
        }
        this.root.render(createElement(HostedComponentContext.Provider, {
            value: {
                ...this.props,
                ...this.context,
                injector: this.injector,
                pageMetadataService: this.pageMetadataService,
            },
        }, createElement(Comp, this.props)));
    }
    ngOnDestroy() {
        this.root?.unmount();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ReactComponentHostDirective, deps: [{ token: i0.ElementRef }, { token: i0.Injector }, { token: i1.PageMetadataService, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.2", type: ReactComponentHostDirective, isStandalone: true, selector: "[vdrReactComponentHost]", inputs: { reactComponent: ["vdrReactComponentHost", "reactComponent"], props: "props", context: "context" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ReactComponentHostDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[vdrReactComponentHost]',
                    standalone: true,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Injector }, { type: i1.PageMetadataService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { reactComponent: [{
                type: Input,
                args: ['vdrReactComponentHost']
            }], props: [{
                type: Input
            }], context: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QtY29tcG9uZW50LWhvc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9yZWFjdC9zcmMvZGlyZWN0aXZlcy9yZWFjdC1jb21wb25lbnQtaG9zdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBd0IsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRixPQUFPLEVBQWtCLGFBQWEsRUFBRSxhQUFhLEVBQWUsTUFBTSxPQUFPLENBQUM7QUFDbEYsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGtCQUFrQixDQUFDOzs7QUFHcEQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsYUFBYSxDQUFxQyxJQUFJLENBQUMsQ0FBQztBQUU5Rjs7R0FFRztBQUtILE1BQU0sT0FBTywyQkFBMkI7SUFPcEMsWUFDWSxJQUFnQixFQUNoQixRQUFrQixFQUNOLG1CQUF5QztRQUZyRCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDTix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXNCO1FBUHhELFlBQU8sR0FBd0IsRUFBRSxDQUFDO1FBRW5DLFNBQUksR0FBZ0IsSUFBSSxDQUFDO0lBTTlCLENBQUM7SUFFSixLQUFLLENBQUMsV0FBVztRQUNiLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFFakMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQ1osYUFBYSxDQUNULHNCQUFzQixDQUFDLFFBQVEsRUFDL0I7WUFDSSxLQUFLLEVBQUU7Z0JBQ0gsR0FBRyxJQUFJLENBQUMsS0FBSztnQkFDYixHQUFHLElBQUksQ0FBQyxPQUFPO2dCQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLG1CQUFtQjthQUNoRDtTQUNKLEVBQ0QsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ2xDLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUN6QixDQUFDOzhHQXRDUSwyQkFBMkI7a0dBQTNCLDJCQUEyQjs7MkZBQTNCLDJCQUEyQjtrQkFKdkMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OzBCQVdRLFFBQVE7NENBVG1CLGNBQWM7c0JBQTdDLEtBQUs7dUJBQUMsdUJBQXVCO2dCQUNyQixLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgSW5wdXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhZ2VNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICdAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuaW1wb3J0IHsgQ29tcG9uZW50UHJvcHMsIGNyZWF0ZUNvbnRleHQsIGNyZWF0ZUVsZW1lbnQsIEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBjcmVhdGVSb290LCBSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XHJcbmltcG9ydCB7IEhvc3RlZFJlYWN0Q29tcG9uZW50Q29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBIb3N0ZWRDb21wb25lbnRDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxIb3N0ZWRSZWFjdENvbXBvbmVudENvbnRleHQgfCBudWxsPihudWxsKTtcclxuXHJcbi8qKlxyXG4gKiBCYXNlZCBvbiBodHRwczovL25ldGJhc2FsLmNvbS91c2luZy1yZWFjdC1pbi1hbmd1bGFyLWFwcGxpY2F0aW9ucy0xYmI5MDdlY2FjOTFcclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbdmRyUmVhY3RDb21wb25lbnRIb3N0XScsXHJcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVhY3RDb21wb25lbnRIb3N0RGlyZWN0aXZlPENvbXAgZXh0ZW5kcyBFbGVtZW50VHlwZT4ge1xyXG4gICAgQElucHV0KCd2ZHJSZWFjdENvbXBvbmVudEhvc3QnKSByZWFjdENvbXBvbmVudDogQ29tcDtcclxuICAgIEBJbnB1dCgpIHByb3BzOiBDb21wb25lbnRQcm9wczxDb21wPjtcclxuICAgIEBJbnB1dCgpIGNvbnRleHQ6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcclxuXHJcbiAgICBwcml2YXRlIHJvb3Q6IFJvb3QgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGhvc3Q6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBwYWdlTWV0YWRhdGFTZXJ2aWNlPzogUGFnZU1ldGFkYXRhU2VydmljZSxcclxuICAgICkge31cclxuXHJcbiAgICBhc3luYyBuZ09uQ2hhbmdlcygpIHtcclxuICAgICAgICBjb25zdCBDb21wID0gdGhpcy5yZWFjdENvbXBvbmVudDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnJvb3QpIHtcclxuICAgICAgICAgICAgdGhpcy5yb290ID0gY3JlYXRlUm9vdCh0aGlzLmhvc3QubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJvb3QucmVuZGVyKFxyXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50KFxyXG4gICAgICAgICAgICAgICAgSG9zdGVkQ29tcG9uZW50Q29udGV4dC5Qcm92aWRlcixcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnByb3BzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNvbnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluamVjdG9yOiB0aGlzLmluamVjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlTWV0YWRhdGFTZXJ2aWNlOiB0aGlzLnBhZ2VNZXRhZGF0YVNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KENvbXAsIHRoaXMucHJvcHMpLFxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5yb290Py51bm1vdW50KCk7XHJcbiAgICB9XHJcbn1cclxuIl19