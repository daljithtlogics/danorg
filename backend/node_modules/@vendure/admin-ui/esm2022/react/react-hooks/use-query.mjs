import { DataService } from '@vendure/admin-ui/core';
import { useCallback, useContext, useEffect, useState } from 'react';
import { firstValueFrom } from 'rxjs';
import { tap } from 'rxjs/operators';
import { HostedComponentContext } from '../directives/react-component-host.directive';
/**
 * @description
 * A React hook which provides access to the results of a GraphQL query.
 *
 * @example
 * ```ts
 * import { useQuery } from '\@vendure/admin-ui/react';
 * import { gql } from 'graphql-tag';
 *
 * const GET_PRODUCT = gql`
 *    query GetProduct($id: ID!) {
 *      product(id: $id) {
 *        id
 *        name
 *        description
 *      }
 *    }`;
 *
 * export const MyComponent = () => {
 *     const { data, loading, error } = useQuery(GET_PRODUCT, { id: '1' });
 *
 *     if (loading) return <div>Loading...</div>;
 *     if (error) return <div>Error! { error }</div>;
 *     return (
 *         <div>
 *             <h1>{data.product.name}</h1>
 *             <p>{data.product.description}</p>
 *         </div>
 *     );
 * };
 * ```
 *
 * @docsCategory react-hooks
 */
export function useQuery(query, variables) {
    const { data, loading, error, runQuery } = useDataService((dataService, vars) => dataService.query(query, vars).stream$);
    useEffect(() => {
        const subscription = runQuery(variables).subscribe();
        return () => subscription.unsubscribe();
    }, [runQuery]);
    const refetch = (variables) => firstValueFrom(runQuery(variables));
    return { data, loading, error, refetch };
}
/**
 * @description
 * A React hook which allows you to execute a GraphQL mutation.
 *
 * @example
 * ```ts
 * import { useMutation } from '\@vendure/admin-ui/react';
 * import { gql } from 'graphql-tag';
 *
 * const UPDATE_PRODUCT = gql`
 *   mutation UpdateProduct($input: UpdateProductInput!) {
 *     updateProduct(input: $input) {
 *     id
 *     name
 *   }
 * }`;
 *
 * export const MyComponent = () => {
 *     const [updateProduct, { data, loading, error }] = useMutation(UPDATE_PRODUCT);
 *
 *     const handleClick = () => {
 *         updateProduct({
 *             input: {
 *                 id: '1',
 *                 name: 'New name',
 *             },
 *         }).then(result => {
 *             // do something with the result
 *         });
 *     };
 *
 *     if (loading) return <div>Loading...</div>;
 *     if (error) return <div>Error! { error }</div>;
 *
 *     return (
 *     <div>
 *         <button onClick={handleClick}>Update product</button>
 *         {data && <div>Product updated!</div>}
 *     </div>
 *     );
 * };
 * ```
 *
 * @docsCategory react-hooks
 */
export function useMutation(mutation) {
    const { data, loading, error, runQuery } = useDataService((dataService, variables) => dataService.mutate(mutation, variables));
    const rest = { data, loading, error };
    const execute = (variables) => firstValueFrom(runQuery(variables));
    return [execute, rest];
}
function useDataService(operation) {
    const context = useContext(HostedComponentContext);
    const dataService = context?.injector.get(DataService);
    if (!dataService) {
        throw new Error('No DataService found in HostedComponentContext');
    }
    const [data, setData] = useState();
    const [error, setError] = useState();
    const [loading, setLoading] = useState(false);
    const runQuery = useCallback((variables) => {
        setLoading(true);
        return operation(dataService, variables).pipe(tap({
            next: res => {
                setData(res);
                setLoading(false);
            },
            error: err => {
                setError(err.message);
                setLoading(false);
            },
        }));
    }, []);
    return { data, loading, error, runQuery };
}
//# sourceMappingURL=data:application/json;base64,