import { useContext, useEffect, useState } from 'react';
import { HostedComponentContext } from '../directives/react-component-host.directive';
/**
 * @description
 * Provides the data available to React-based CustomDetailComponents.
 *
 * @example
 * ```ts
 * import { Card, useDetailComponentData } from '\@vendure/admin-ui/react';
 * import React from 'react';
 *
 * export function CustomDetailComponent(props: any) {
 *     const { entity, detailForm } = useDetailComponentData();
 *     const updateName = () => {
 *         detailForm.get('name')?.setValue('New name');
 *         detailForm.markAsDirty();
 *     };
 *     return (
 *         <Card title={'Custom Detail Component'}>
 *             <button className="button" onClick={updateName}>
 *                 Update name
 *             </button>
 *             <pre>{JSON.stringify(entity, null, 2)}</pre>
 *         </Card>
 *     );
 * }
 * ```
 *
 * @docsCategory react-hooks
 */
export function useDetailComponentData() {
    const context = useContext(HostedComponentContext);
    if (!context.detailForm || !context.entity$) {
        throw new Error(`The useDetailComponentData hook can only be used within a CustomDetailComponent`);
    }
    const [entity, setEntity] = useState(null);
    useEffect(() => {
        const subscription = context.entity$.subscribe(value => {
            setEntity(value);
        });
        return () => subscription.unsubscribe();
    }, []);
    return {
        entity,
        detailForm: context.detailForm,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWRldGFpbC1jb21wb25lbnQtZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcmVhY3Qvc3JjL3JlYWN0LWhvb2tzL3VzZS1kZXRhaWwtY29tcG9uZW50LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRXhELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBR3RGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EyQkc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FDdEIsc0JBQXNCLENBQ3lDLENBQUM7SUFFcEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1FBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUZBQWlGLENBQUMsQ0FBQztLQUN0RztJQUVELE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFXLElBQUksQ0FBQyxDQUFDO0lBRXJELFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuRCxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxPQUFPO1FBQ0gsTUFBTTtRQUNOLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVTtLQUNqQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFJlYWN0Q3VzdG9tRGV0YWlsQ29tcG9uZW50Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvcmVhY3QtY3VzdG9tLWRldGFpbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBIb3N0ZWRDb21wb25lbnRDb250ZXh0IH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9yZWFjdC1jb21wb25lbnQtaG9zdC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBIb3N0ZWRSZWFjdENvbXBvbmVudENvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFByb3ZpZGVzIHRoZSBkYXRhIGF2YWlsYWJsZSB0byBSZWFjdC1iYXNlZCBDdXN0b21EZXRhaWxDb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGB0c1xyXG4gKiBpbXBvcnQgeyBDYXJkLCB1c2VEZXRhaWxDb21wb25lbnREYXRhIH0gZnJvbSAnXFxAdmVuZHVyZS9hZG1pbi11aS9yZWFjdCc7XHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbiAqXHJcbiAqIGV4cG9ydCBmdW5jdGlvbiBDdXN0b21EZXRhaWxDb21wb25lbnQocHJvcHM6IGFueSkge1xyXG4gKiAgICAgY29uc3QgeyBlbnRpdHksIGRldGFpbEZvcm0gfSA9IHVzZURldGFpbENvbXBvbmVudERhdGEoKTtcclxuICogICAgIGNvbnN0IHVwZGF0ZU5hbWUgPSAoKSA9PiB7XHJcbiAqICAgICAgICAgZGV0YWlsRm9ybS5nZXQoJ25hbWUnKT8uc2V0VmFsdWUoJ05ldyBuYW1lJyk7XHJcbiAqICAgICAgICAgZGV0YWlsRm9ybS5tYXJrQXNEaXJ0eSgpO1xyXG4gKiAgICAgfTtcclxuICogICAgIHJldHVybiAoXHJcbiAqICAgICAgICAgPENhcmQgdGl0bGU9eydDdXN0b20gRGV0YWlsIENvbXBvbmVudCd9PlxyXG4gKiAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3VwZGF0ZU5hbWV9PlxyXG4gKiAgICAgICAgICAgICAgICAgVXBkYXRlIG5hbWVcclxuICogICAgICAgICAgICAgPC9idXR0b24+XHJcbiAqICAgICAgICAgICAgIDxwcmU+e0pTT04uc3RyaW5naWZ5KGVudGl0eSwgbnVsbCwgMil9PC9wcmU+XHJcbiAqICAgICAgICAgPC9DYXJkPlxyXG4gKiAgICAgKTtcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogQGRvY3NDYXRlZ29yeSByZWFjdC1ob29rc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZURldGFpbENvbXBvbmVudERhdGE8VCA9IGFueT4oKSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChcclxuICAgICAgICBIb3N0ZWRDb21wb25lbnRDb250ZXh0LFxyXG4gICAgKSBhcyBIb3N0ZWRSZWFjdENvbXBvbmVudENvbnRleHQ8UmVhY3RDdXN0b21EZXRhaWxDb21wb25lbnRDb250ZXh0PjtcclxuXHJcbiAgICBpZiAoIWNvbnRleHQuZGV0YWlsRm9ybSB8fCAhY29udGV4dC5lbnRpdHkkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgdXNlRGV0YWlsQ29tcG9uZW50RGF0YSBob29rIGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGEgQ3VzdG9tRGV0YWlsQ29tcG9uZW50YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgW2VudGl0eSwgc2V0RW50aXR5XSA9IHVzZVN0YXRlPFQgfCBudWxsPihudWxsKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNvbnRleHQuZW50aXR5JC5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICBzZXRFbnRpdHkodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVudGl0eSxcclxuICAgICAgICBkZXRhaWxGb3JtOiBjb250ZXh0LmRldGFpbEZvcm0sXHJcbiAgICB9O1xyXG59XHJcbiJdfQ==