import { ChangeDetectionStrategy, Component } from '@angular/core';
import { unique } from '@vendure/common/lib/unique';
import { GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS, GET_VARIANTS_WITH_FACET_VALUES_BY_IDS, UPDATE_PRODUCTS_BULK, UPDATE_VARIANTS_BULK, } from './bulk-add-facet-values-dialog.graphql';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@clr/angular";
import * as i3 from "@angular/common";
import * as i4 from "@ngx-translate/core";
export class BulkAddFacetValuesDialogComponent {
    constructor(dataService, changeDetectorRef) {
        this.dataService = dataService;
        this.changeDetectorRef = changeDetectorRef;
        /* provided by call to ModalService */
        this.mode = 'product';
        this.state = 'loading';
        this.selectedValues = [];
        this.items = [];
        this.facetValuesRemoved = false;
    }
    ngOnInit() {
        const fetchData$ = this.mode === 'product'
            ? this.dataService
                .query(GET_PRODUCTS_WITH_FACET_VALUES_BY_IDS, {
                ids: this.ids ?? [],
            })
                .mapSingle(({ products }) => products.items.map(p => ({ ...p, facetValues: [...p.facetValues] })))
            : this.dataService
                .query(GET_VARIANTS_WITH_FACET_VALUES_BY_IDS, {
                ids: this.ids ?? [],
            })
                .mapSingle(({ productVariants }) => productVariants.items.map(p => ({ ...p, facetValues: [...p.facetValues] })));
        this.subscription = fetchData$.subscribe({
            next: items => {
                this.items = items;
                this.state = 'ready';
                this.changeDetectorRef.markForCheck();
            },
        });
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
    cancel() {
        this.resolveWith();
    }
    removeFacetValue(item, facetValueId) {
        item.facetValues = item.facetValues.filter(fv => fv.id !== facetValueId);
        this.facetValuesRemoved = true;
    }
    addFacetValues() {
        const selectedFacetValueIds = this.selectedValues.map(sv => sv.id);
        this.state = 'saving';
        const save$ = this.mode === 'product'
            ? this.dataService.mutate(UPDATE_PRODUCTS_BULK, {
                input: this.items?.map(product => ({
                    id: product.id,
                    facetValueIds: unique([
                        ...product.facetValues.map(fv => fv.id),
                        ...selectedFacetValueIds,
                    ]),
                })),
            })
            : this.dataService.mutate(UPDATE_VARIANTS_BULK, {
                input: this.items?.map(product => ({
                    id: product.id,
                    facetValueIds: unique([
                        ...product.facetValues.map(fv => fv.id),
                        ...selectedFacetValueIds,
                    ]),
                })),
            });
        return save$.subscribe(result => {
            this.resolveWith(this.selectedValues);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BulkAddFacetValuesDialogComponent, deps: [{ token: i1.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: BulkAddFacetValuesDialogComponent, selector: "vdr-bulk-add-facet-values-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>\r\n    {{ 'catalog.edit-facet-values' | translate }}\r\n</ng-template>\r\n\r\n<div class=\"flex\">\r\n    <div class=\"flex center\">\r\n        <div class=\"mr2\">\r\n            {{ 'catalog.add-facet-value' | translate }}\r\n        </div>\r\n        <vdr-facet-value-selector\r\n            (selectedValuesChange)=\"selectedValues = $event\"\r\n        ></vdr-facet-value-selector>\r\n    </div>\r\n</div>\r\n\r\n<table class=\"table\" *ngIf=\"state !== 'loading'; else placeholder\">\r\n    <tbody>\r\n        <tr *ngFor=\"let item of items\">\r\n            <td class=\"left align-middle\">\r\n                <div>{{ item.name }}</div>\r\n                <div *ngIf=\"item.sku\" class=\"sku\">{{ item.sku }}</div>\r\n            </td>\r\n            <td class=\"left\">\r\n                <vdr-facet-value-chip\r\n                    *ngFor=\"let facetValue of item.facetValues\"\r\n                    [facetValue]=\"facetValue\"\r\n                    (remove)=\"removeFacetValue(item, facetValue.id)\"\r\n                ></vdr-facet-value-chip>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<ng-template #placeholder>\r\n    <div class=\"loading\">\r\n    <clr-spinner></clr-spinner>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"addFacetValues()\"\r\n        [disabled]=\"selectedValues.length === 0 && facetValuesRemoved === false\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.update' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [".loading{min-height:25vh;display:flex;justify-content:center;align-items:center}.sku{color:var(--color-text-300)}\n"], dependencies: [{ kind: "component", type: i2.ClrSpinner, selector: "clr-spinner", inputs: ["clrInline", "clrInverse", "clrSmall", "clrMedium"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.FacetValueSelectorComponent, selector: "vdr-facet-value-selector", inputs: ["readonly", "transformControlValueAccessorValue"], outputs: ["selectedValuesChange"] }, { kind: "component", type: i1.FacetValueChipComponent, selector: "vdr-facet-value-chip", inputs: ["facetValue", "removable", "displayFacetName"], outputs: ["remove"] }, { kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: BulkAddFacetValuesDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-bulk-add-facet-values-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>\r\n    {{ 'catalog.edit-facet-values' | translate }}\r\n</ng-template>\r\n\r\n<div class=\"flex\">\r\n    <div class=\"flex center\">\r\n        <div class=\"mr2\">\r\n            {{ 'catalog.add-facet-value' | translate }}\r\n        </div>\r\n        <vdr-facet-value-selector\r\n            (selectedValuesChange)=\"selectedValues = $event\"\r\n        ></vdr-facet-value-selector>\r\n    </div>\r\n</div>\r\n\r\n<table class=\"table\" *ngIf=\"state !== 'loading'; else placeholder\">\r\n    <tbody>\r\n        <tr *ngFor=\"let item of items\">\r\n            <td class=\"left align-middle\">\r\n                <div>{{ item.name }}</div>\r\n                <div *ngIf=\"item.sku\" class=\"sku\">{{ item.sku }}</div>\r\n            </td>\r\n            <td class=\"left\">\r\n                <vdr-facet-value-chip\r\n                    *ngFor=\"let facetValue of item.facetValues\"\r\n                    [facetValue]=\"facetValue\"\r\n                    (remove)=\"removeFacetValue(item, facetValue.id)\"\r\n                ></vdr-facet-value-chip>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<ng-template #placeholder>\r\n    <div class=\"loading\">\r\n    <clr-spinner></clr-spinner>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"addFacetValues()\"\r\n        [disabled]=\"selectedValues.length === 0 && facetValuesRemoved === false\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        {{ 'common.update' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [".loading{min-height:25vh;display:flex;justify-content:center;align-items:center}.sku{color:var(--color-text-300)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,