import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FormControl, UntypedFormControl, UntypedFormGroup, Validators, } from '@angular/forms';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { createUpdatedTranslatable, DeletionResult, FACET_WITH_VALUES_FRAGMENT, findTranslation, getCustomFieldsDefaults, GetFacetDetailDocument, Permission, TypedBaseDetailComponent, } from '@vendure/admin-ui/core';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { gql } from 'apollo-angular';
import { BehaviorSubject, combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';
import { map, mergeMap, startWith, switchMap, take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@angular/forms";
import * as i3 from "@clr/angular";
import * as i4 from "@angular/common";
import * as i5 from "ngx-pagination";
import * as i6 from "@ngx-translate/core";
export const FACET_DETAIL_QUERY = gql `
    query GetFacetDetail($id: ID!) {
        facet(id: $id) {
            ...FacetWithValues
        }
    }
    ${FACET_WITH_VALUES_FRAGMENT}
`;
export class FacetDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService, modalService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.modalService = modalService;
        this.customFields = this.getCustomFieldConfig('Facet');
        this.customValueFields = this.getCustomFieldConfig('FacetValue');
        this.detailForm = this.formBuilder.group({
            facet: this.formBuilder.group({
                code: ['', Validators.required],
                name: '',
                visible: true,
                customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
            }),
            values: this.formBuilder.record({}),
        });
        this.currentPage = 1;
        this.itemsPerPage = 10;
        this.filterControl = new FormControl('');
        this.values$ = new BehaviorSubject([]);
        this.filteredValues$ = new Observable();
        this.updatePermission = [Permission.UpdateCatalog, Permission.UpdateFacet];
    }
    ngOnInit() {
        this.init();
        this.filteredValues$ = combineLatest([
            this.values$,
            this.filterControl.valueChanges.pipe(startWith('')),
        ]).pipe(map(([values, filterTerm]) => {
            const filterString = filterTerm?.toLowerCase().trim();
            return filterString
                ? values.filter(v => v.name.toLowerCase().includes(filterString) ||
                    v.code.toLowerCase().includes(filterString))
                : values;
        }), tap(() => {
            this.currentPage = 1;
        }));
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(currentCode, nameValue) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['facet', 'code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    updateValueCode(currentCode, nameValue, valueId) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['values', valueId, 'code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    customValueFieldIsSet(index, name) {
        return !!this.detailForm.get(['values', index, 'customFields', name]);
    }
    addFacetValue() {
        const valuesFormRecord = this.detailForm.get('values');
        if (valuesFormRecord) {
            const id = this.createTempId();
            const valueGroup = this.formBuilder.group({
                id,
                name: ['', Validators.required],
                code: '',
                customFields: this.formBuilder.group({}),
            });
            const newValue = { id, name: '', code: '' };
            if (this.customValueFields.length) {
                const customValueFieldsGroup = new UntypedFormGroup({});
                newValue.customFields = {};
                for (const fieldDef of this.customValueFields) {
                    const key = fieldDef.name;
                    customValueFieldsGroup.addControl(key, new UntypedFormControl());
                }
                valueGroup.addControl('customFields', customValueFieldsGroup);
            }
            valuesFormRecord.addControl(id, valueGroup);
            const values = this.values$.value;
            const endOfPageIndex = this.currentPage * this.itemsPerPage - 1;
            values.splice(endOfPageIndex, 0, newValue);
            this.values$.next(values);
        }
    }
    create() {
        const facetForm = this.detailForm.get('facet');
        if (!facetForm || !facetForm.dirty) {
            return;
        }
        const newFacet = this.getUpdatedFacet({
            id: '',
            createdAt: '',
            updatedAt: '',
            isPrivate: false,
            languageCode: this.languageCode,
            name: '',
            code: '',
            translations: [],
            values: [],
        }, facetForm, this.languageCode);
        this.dataService.facet.createFacet(newFacet).subscribe(data => {
            this.notificationService.success(_('common.notify-create-success'), { entity: 'Facet' });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createFacet.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(_('common.notify-create-error'), {
                entity: 'Facet',
            });
        });
    }
    save() {
        const valuesFormRecord = this.detailForm.get('values');
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([facet, languageCode]) => {
            const facetForm = this.detailForm.get('facet');
            const updateOperations = [];
            if (facetForm && facetForm.dirty) {
                const newFacet = this.getUpdatedFacet(facet, facetForm, languageCode);
                if (newFacet) {
                    updateOperations.push(this.dataService.facet.updateFacet(newFacet));
                }
            }
            if (valuesFormRecord && valuesFormRecord.dirty) {
                const createdValues = this.getCreatedFacetValues(facet, valuesFormRecord, languageCode);
                if (createdValues.length) {
                    updateOperations.push(this.dataService.facet.createFacetValues(createdValues).pipe(switchMap(() => this.dataService.query(GetFacetDetailDocument, {
                        id: this.id,
                    }).single$)));
                }
                const updatedValues = this.getUpdatedFacetValues(facet, valuesFormRecord, languageCode);
                if (updatedValues.length) {
                    updateOperations.push(this.dataService.facet.updateFacetValues(updatedValues));
                }
            }
            return forkJoin(updateOperations);
        }))
            .subscribe(() => {
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.notificationService.success(_('common.notify-update-success'), { entity: 'Facet' });
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'Facet',
            });
        });
    }
    deleteFacetValue(facetValueId) {
        if (this.isTempId(facetValueId)) {
            // deleting a newly-added (not persisted) FacetValue
            const valuesFormRecord = this.detailForm.get('values');
            if (valuesFormRecord) {
                valuesFormRecord.removeControl(facetValueId);
            }
            const values = this.values$.value;
            this.values$.next(values.filter(v => v.id !== facetValueId));
            return;
        }
        this.showModalAndDelete(facetValueId)
            .pipe(switchMap(response => {
            if (response.result === DeletionResult.DELETED) {
                return [true];
            }
            else {
                return this.showModalAndDelete(facetValueId, response.message || '').pipe(map(r => r.result === DeletionResult.DELETED));
            }
        }), switchMap(deleted => deleted
            ? this.dataService.query(GetFacetDetailDocument, {
                id: this.id,
            }).single$
            : []))
            .subscribe(() => {
            const valuesFormRecord = this.detailForm.get('values');
            if (valuesFormRecord) {
                valuesFormRecord.removeControl(facetValueId);
            }
            this.notificationService.success(_('common.notify-delete-success'), {
                entity: 'FacetValue',
            });
        }, err => {
            this.notificationService.error(_('common.notify-delete-error'), {
                entity: 'FacetValue',
            });
        });
    }
    showModalAndDelete(facetValueId, message) {
        return this.modalService
            .dialog({
            title: _('catalog.confirm-delete-facet-value'),
            body: message,
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                { type: 'danger', label: _('common.delete'), returnValue: true },
            ],
        })
            .pipe(switchMap(result => result ? this.dataService.facet.deleteFacetValues([facetValueId], !!message) : EMPTY), map(result => result.deleteFacetValues[0]));
    }
    /**
     * Sets the values of the form on changes to the facet or current language.
     */
    setFormValues(facet, languageCode) {
        const currentTranslation = findTranslation(facet, languageCode);
        this.detailForm.patchValue({
            facet: {
                code: facet.code,
                visible: !facet.isPrivate,
                name: currentTranslation?.name ?? '',
            },
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['facet', 'customFields']), facet, currentTranslation);
        }
        const currentValuesFormGroup = this.detailForm.get('values');
        this.values$.next([...facet.values]);
        facet.values.forEach(value => {
            const valueTranslation = findTranslation(value, languageCode);
            const group = {
                id: value.id,
                code: value.code,
                name: valueTranslation ? valueTranslation.name : '',
            };
            let valueControl = currentValuesFormGroup.get(value.id);
            if (valueControl) {
                valueControl.get('id')?.setValue(group.id);
                valueControl.get('code')?.setValue(group.code);
                valueControl.get('name')?.setValue(group.name);
            }
            else {
                valueControl = this.formBuilder.group(group);
                currentValuesFormGroup.addControl(value.id, valueControl);
            }
            if (this.customValueFields.length) {
                let customValueFieldsGroup = valueControl.get(['customFields']);
                if (!customValueFieldsGroup) {
                    customValueFieldsGroup = new UntypedFormGroup({});
                    valueControl.addControl('customFields', customValueFieldsGroup);
                }
                if (customValueFieldsGroup) {
                    for (const fieldDef of this.customValueFields) {
                        const key = fieldDef.name;
                        const fieldValue = fieldDef.type === 'localeString'
                            ? valueTranslation?.customFields?.[key]
                            : value.customFields[key];
                        const control = customValueFieldsGroup.get(key);
                        if (control) {
                            control.setValue(fieldValue);
                        }
                        else {
                            customValueFieldsGroup.addControl(key, new UntypedFormControl(fieldValue));
                        }
                    }
                }
            }
        });
    }
    /**
     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which
     * can then be persisted to the API.
     */
    getUpdatedFacet(facet, facetFormGroup, languageCode) {
        const input = createUpdatedTranslatable({
            translatable: facet,
            updatedFields: facetFormGroup.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: facet.name || '',
            },
        });
        input.isPrivate = !facetFormGroup.value.visible;
        return input;
    }
    /**
     * Given an array of facet values and the values from the detailForm, this method creates a new array
     * which can be persisted to the API via a createFacetValues mutation.
     */
    getCreatedFacetValues(facet, valuesFormRecord, languageCode) {
        return Object.values(valuesFormRecord.controls)
            .filter(c => c.value.id && this.isTempId(c.value.id))
            .map(c => c.value)
            .map(value => createUpdatedTranslatable({
            translatable: { ...value, translations: [] },
            updatedFields: value ?? {},
            customFieldConfig: this.customValueFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: '',
            },
        }))
            .map(input => ({
            facetId: facet.id,
            code: input.code ?? '',
            ...input,
            id: undefined,
        }));
    }
    /**
     * Given an array of facet values and the values from the detailForm, this method creates a new array
     * which can be persisted to the API via an updateFacetValues mutation.
     */
    getUpdatedFacetValues(facet, valuesFormGroup, languageCode) {
        const dirtyValues = facet.values.filter(v => {
            const formRow = valuesFormGroup.get(v.id);
            return formRow && formRow.dirty && formRow.value.id;
        });
        const dirtyValueValues = Object.values(valuesFormGroup.controls)
            .filter(c => c.dirty && !this.isTempId(c.value.id))
            .map(c => c.value);
        if (dirtyValues.length !== dirtyValueValues.length) {
            throw new Error(_(`error.facet-value-form-values-do-not-match`));
        }
        return dirtyValues
            .map((value, i) => createUpdatedTranslatable({
            translatable: value,
            updatedFields: dirtyValueValues[i],
            customFieldConfig: this.customValueFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: '',
            },
        }))
            .filter(notNullOrUndefined);
    }
    createTempId() {
        return `temp-${Math.random().toString(36).substr(2, 9)}`;
    }
    isTempId(id) {
        return id.startsWith('temp-');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FacetDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2.FormBuilder }, { token: i1.NotificationService }, { token: i1.ModalService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: FacetDetailComponent, selector: "vdr-facet-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    *vdrIfPermissions=\"updatePermission\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar formGroupName=\"facet\">\r\n            <vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"visible\"\r\n                            id=\"visibility\"\r\n                        />\r\n                        <label class=\"visible-toggle\">\r\n                            <ng-container *ngIf=\"detailForm.value.facet?.visible; else private\">{{\r\n                                'catalog.public' | translate\r\n                            }}</ng-container>\r\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                        </label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <vdr-card>\r\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n        <vdr-page-block>\r\n            <vdr-card formGroupName=\"facet\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n                        <input\r\n                            id=\"code\"\r\n                            type=\"text\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"code\"\r\n                        />\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Facet\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('facet.customFields')\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                />\r\n            </vdr-card>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"facet-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-card\r\n                *ngIf=\"!(isNew$ | async)\"\r\n                [title]=\"'catalog.facet-values' | translate\"\r\n                [paddingX]=\"false\"\r\n            >\r\n                <ng-template vdrCardControls>\r\n                    <input\r\n                        type=\"text\"\r\n                        class=\"mr-3\"\r\n                        [formControl]=\"filterControl\"\r\n                        [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n                    />\r\n                </ng-template>\r\n                <ng-container *ngIf=\"filteredValues$ | async as filteredValues\">\r\n                    <table class=\"facet-values-list table\" formArrayName=\"values\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>{{ 'common.name' | translate }}</th>\r\n                                <th>{{ 'common.code' | translate }}</th>\r\n                                <ng-container *ngIf=\"customValueFields.length\">\r\n                                    <th>{{ 'common.custom-fields' | translate }}</th>\r\n                                </ng-container>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr\r\n                                class=\"facet-value\"\r\n                                *ngFor=\"\r\n                                    let value of filteredValues\r\n                                        | paginate\r\n                                            : {\r\n                                                  currentPage: currentPage,\r\n                                                  itemsPerPage: itemsPerPage,\r\n                                                  totalItems: filteredValues.length\r\n                                              };\r\n                                    let i = index\r\n                                \"\r\n                                [formGroup]=\"detailForm.get(['values', value.id])\"\r\n                            >\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        formControlName=\"name\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                        (input)=\"updateValueCode(value.code, $event.target.value, value.id)\"\r\n                                    />\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input type=\"text\" formControlName=\"code\" />\r\n                                </td>\r\n                                <td class=\"\" *ngIf=\"customValueFields.length\">\r\n                                    <vdr-tabbed-custom-fields\r\n                                        entityName=\"FacetValue\"\r\n                                        [customFields]=\"customValueFields\"\r\n                                        [compact]=\"true\"\r\n                                        [customFieldsFormGroup]=\"\r\n                                            detailForm.get(['values', value.id, 'customFields'])\r\n                                        \"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    ></vdr-tabbed-custom-fields>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-dropdown>\r\n                                        <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n                                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                                        </button>\r\n                                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                class=\"delete-button\"\r\n                                                (click)=\"deleteFacetValue(value.id)\"\r\n                                                [disabled]=\"!(updatePermission | hasPermission)\"\r\n                                                vdrDropdownItem\r\n                                            >\r\n                                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                                {{ 'common.delete' | translate }}\r\n                                            </button>\r\n                                        </vdr-dropdown-menu>\r\n                                    </vdr-dropdown>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div class=\"pagination-wrapper\">\r\n                        <vdr-items-per-page-controls\r\n                            [itemsPerPage]=\"itemsPerPage\"\r\n                            (itemsPerPageChange)=\"itemsPerPage = $event\"\r\n                        ></vdr-items-per-page-controls>\r\n                        <vdr-pagination-controls\r\n                            [currentPage]=\"currentPage\"\r\n                            [itemsPerPage]=\"itemsPerPage\"\r\n                            [totalItems]=\"filteredValues.length\"\r\n                            (pageChange)=\"currentPage = $event\"\r\n                        ></vdr-pagination-controls>\r\n                    </div>\r\n                </ng-container>\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"button m-3\"\r\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n                        (click)=\"addFacetValue()\"\r\n                    >\r\n                        <clr-icon shape=\"add\"></clr-icon>\r\n                        {{ 'catalog.add-facet-value' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n", styles: [".visible-toggle{margin-top:-3px!important}tr.facet-value td{vertical-align:middle}.pagination-wrapper{display:flex;justify-content:space-between;padding:var(--card-padding)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i2.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ItemsPerPageControlsComponent, selector: "vdr-items-per-page-controls", inputs: ["itemsPerPage"], outputs: ["itemsPerPageChange"] }, { kind: "component", type: i1.PaginationControlsComponent, selector: "vdr-pagination-controls", inputs: ["id", "currentPage", "itemsPerPage", "totalItems"], outputs: ["pageChange"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items", inputs: ["locationId"] }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.EntityInfoComponent, selector: "vdr-entity-info", inputs: ["small", "entity"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "directive", type: i1.CardControlsDirective, selector: "[vdrCardControls]" }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.PaginatePipe, name: "paginate" }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: FacetDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-facet-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"facet-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    *vdrIfPermissions=\"updatePermission\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar formGroupName=\"facet\">\r\n            <vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"visible\"\r\n                            id=\"visibility\"\r\n                        />\r\n                        <label class=\"visible-toggle\">\r\n                            <ng-container *ngIf=\"detailForm.value.facet?.visible; else private\">{{\r\n                                'catalog.public' | translate\r\n                            }}</ng-container>\r\n                            <ng-template #private>{{ 'catalog.private' | translate }}</ng-template>\r\n                        </label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <vdr-card>\r\n                <vdr-page-entity-info *ngIf=\"entity$ | async as entity\" [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n        <vdr-page-block>\r\n            <vdr-card formGroupName=\"facet\">\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'common.code' | translate\" for=\"code\">\r\n                        <input\r\n                            id=\"code\"\r\n                            type=\"text\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            formControlName=\"code\"\r\n                        />\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Facet\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('facet.customFields')\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                />\r\n            </vdr-card>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"facet-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-card\r\n                *ngIf=\"!(isNew$ | async)\"\r\n                [title]=\"'catalog.facet-values' | translate\"\r\n                [paddingX]=\"false\"\r\n            >\r\n                <ng-template vdrCardControls>\r\n                    <input\r\n                        type=\"text\"\r\n                        class=\"mr-3\"\r\n                        [formControl]=\"filterControl\"\r\n                        [placeholder]=\"'catalog.filter-by-name' | translate\"\r\n                    />\r\n                </ng-template>\r\n                <ng-container *ngIf=\"filteredValues$ | async as filteredValues\">\r\n                    <table class=\"facet-values-list table\" formArrayName=\"values\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th>{{ 'common.name' | translate }}</th>\r\n                                <th>{{ 'common.code' | translate }}</th>\r\n                                <ng-container *ngIf=\"customValueFields.length\">\r\n                                    <th>{{ 'common.custom-fields' | translate }}</th>\r\n                                </ng-container>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr\r\n                                class=\"facet-value\"\r\n                                *ngFor=\"\r\n                                    let value of filteredValues\r\n                                        | paginate\r\n                                            : {\r\n                                                  currentPage: currentPage,\r\n                                                  itemsPerPage: itemsPerPage,\r\n                                                  totalItems: filteredValues.length\r\n                                              };\r\n                                    let i = index\r\n                                \"\r\n                                [formGroup]=\"detailForm.get(['values', value.id])\"\r\n                            >\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-entity-info [entity]=\"value\"></vdr-entity-info>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        formControlName=\"name\"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                        (input)=\"updateValueCode(value.code, $event.target.value, value.id)\"\r\n                                    />\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <input type=\"text\" formControlName=\"code\" />\r\n                                </td>\r\n                                <td class=\"\" *ngIf=\"customValueFields.length\">\r\n                                    <vdr-tabbed-custom-fields\r\n                                        entityName=\"FacetValue\"\r\n                                        [customFields]=\"customValueFields\"\r\n                                        [compact]=\"true\"\r\n                                        [customFieldsFormGroup]=\"\r\n                                            detailForm.get(['values', value.id, 'customFields'])\r\n                                        \"\r\n                                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                                    ></vdr-tabbed-custom-fields>\r\n                                </td>\r\n                                <td class=\"align-middle\">\r\n                                    <vdr-dropdown>\r\n                                        <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n                                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                                        </button>\r\n                                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                class=\"delete-button\"\r\n                                                (click)=\"deleteFacetValue(value.id)\"\r\n                                                [disabled]=\"!(updatePermission | hasPermission)\"\r\n                                                vdrDropdownItem\r\n                                            >\r\n                                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                                {{ 'common.delete' | translate }}\r\n                                            </button>\r\n                                        </vdr-dropdown-menu>\r\n                                    </vdr-dropdown>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div class=\"pagination-wrapper\">\r\n                        <vdr-items-per-page-controls\r\n                            [itemsPerPage]=\"itemsPerPage\"\r\n                            (itemsPerPageChange)=\"itemsPerPage = $event\"\r\n                        ></vdr-items-per-page-controls>\r\n                        <vdr-pagination-controls\r\n                            [currentPage]=\"currentPage\"\r\n                            [itemsPerPage]=\"itemsPerPage\"\r\n                            [totalItems]=\"filteredValues.length\"\r\n                            (pageChange)=\"currentPage = $event\"\r\n                        ></vdr-pagination-controls>\r\n                    </div>\r\n                </ng-container>\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"button m-3\"\r\n                        *vdrIfPermissions=\"['CreateCatalog', 'CreateFacet']\"\r\n                        (click)=\"addFacetValue()\"\r\n                    >\r\n                        <clr-icon shape=\"add\"></clr-icon>\r\n                        {{ 'catalog.add-facet-value' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n", styles: [".visible-toggle{margin-top:-3px!important}tr.facet-value td{vertical-align:middle}.pagination-wrapper{display:flex;justify-content:space-between;padding:var(--card-padding)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2.FormBuilder }, { type: i1.NotificationService }, { type: i1.ModalService }]; } });
//# sourceMappingURL=data:application/json;base64,