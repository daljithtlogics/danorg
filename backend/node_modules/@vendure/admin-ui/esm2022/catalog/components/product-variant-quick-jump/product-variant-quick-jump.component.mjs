import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { GetProductVariantsQuickJumpDocument, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@angular/router";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@ng-select/ng-select";
import * as i6 from "@ngx-translate/core";
const GET_PRODUCT_VARIANTS_QUICK_JUMP = gql `
    query GetProductVariantsQuickJump($id: ID!) {
        product(id: $id) {
            id
            variants {
                id
                name
                sku
            }
        }
    }
`;
export class ProductVariantQuickJumpComponent {
    constructor(dataService, router) {
        this.dataService = dataService;
        this.router = router;
        this.searchFn = (term, item) => item.name.toLowerCase().includes(term.toLowerCase()) ||
            item.sku.toLowerCase().includes(term.toLowerCase());
    }
    ngOnInit() {
        this.variants$ = this.dataService
            .query(GetProductVariantsQuickJumpDocument, {
            id: this.productId,
        })
            .mapSingle(data => data.product?.variants ?? []);
    }
    onSelect(item) {
        if (item) {
            this.router
                .navigate(['catalog', 'products', this.productId, 'variants', item.id])
                .then(() => (this.selectedVariantId = undefined));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ProductVariantQuickJumpComponent, deps: [{ token: i1.DataService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: ProductVariantQuickJumpComponent, selector: "vdr-product-variant-quick-jump", inputs: { productId: "productId" }, ngImport: i0, template: "<ng-select\r\n    *ngIf=\"(variants$ | async)?.length > 1\"\r\n    [items]=\"variants$ | async\"\r\n    appendTo=\"body\"\r\n    bindValue=\"id\"\r\n    [(ngModel)]=\"selectedVariantId\"\r\n    [searchFn]=\"searchFn\"\r\n    [clearable]=\"false\"\r\n    [placeholder]=\"'catalog.quick-jump-placeholder' | translate\"\r\n    (change)=\"onSelect($event)\"\r\n>\r\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\r\n        {{ item.name }} ({{ item.sku }})\r\n    </ng-template>\r\n</ng-select>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i5.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ProductVariantQuickJumpComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-variant-quick-jump', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-select\r\n    *ngIf=\"(variants$ | async)?.length > 1\"\r\n    [items]=\"variants$ | async\"\r\n    appendTo=\"body\"\r\n    bindValue=\"id\"\r\n    [(ngModel)]=\"selectedVariantId\"\r\n    [searchFn]=\"searchFn\"\r\n    [clearable]=\"false\"\r\n    [placeholder]=\"'catalog.quick-jump-placeholder' | translate\"\r\n    (change)=\"onSelect($event)\"\r\n>\r\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\r\n        {{ item.name }} ({{ item.sku }})\r\n    </ng-template>\r\n</ng-select>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i2.Router }]; }, propDecorators: { productId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC12YXJpYW50LXF1aWNrLWp1bXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jYXRhbG9nL3NyYy9jb21wb25lbnRzL3Byb2R1Y3QtdmFyaWFudC1xdWljay1qdW1wL3Byb2R1Y3QtdmFyaWFudC1xdWljay1qdW1wLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY2F0YWxvZy9zcmMvY29tcG9uZW50cy9wcm9kdWN0LXZhcmlhbnQtcXVpY2stanVtcC9wcm9kdWN0LXZhcmlhbnQtcXVpY2stanVtcC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUVsRixPQUFPLEVBRUgsbUNBQW1DLEdBRXRDLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQUdyQyxNQUFNLCtCQUErQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Q0FXMUMsQ0FBQztBQVFGLE1BQU0sT0FBTyxnQ0FBZ0M7SUFJekMsWUFBb0IsV0FBd0IsRUFBVSxNQUFjO1FBQWhELGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQVVwRSxhQUFRLEdBQUcsQ0FDUCxJQUFZLEVBQ1osSUFBa0YsRUFDcEYsRUFBRSxDQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwRCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQWZlLENBQUM7SUFFeEUsUUFBUTtRQUNKLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVc7YUFDNUIsS0FBSyxDQUFDLG1DQUFtQyxFQUFFO1lBQ3hDLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUztTQUNyQixDQUFDO2FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQVNELFFBQVEsQ0FBQyxJQUFtRjtRQUN4RixJQUFJLElBQUksRUFBRTtZQUNOLElBQUksQ0FBQyxNQUFNO2lCQUNOLFFBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUN0RSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUN6RDtJQUNMLENBQUM7OEdBM0JRLGdDQUFnQztrR0FBaEMsZ0NBQWdDLDBHQzdCN0MsaWlCQWVBOzsyRkRjYSxnQ0FBZ0M7a0JBTjVDLFNBQVM7K0JBQ0ksZ0NBQWdDLG1CQUd6Qix1QkFBdUIsQ0FBQyxNQUFNO3VIQUd0QyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge1xyXG4gICAgRGF0YVNlcnZpY2UsXHJcbiAgICBHZXRQcm9kdWN0VmFyaWFudHNRdWlja0p1bXBEb2N1bWVudCxcclxuICAgIEdldFByb2R1Y3RWYXJpYW50c1F1aWNrSnVtcFF1ZXJ5LFxyXG59IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBncWwgfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmNvbnN0IEdFVF9QUk9EVUNUX1ZBUklBTlRTX1FVSUNLX0pVTVAgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRQcm9kdWN0VmFyaWFudHNRdWlja0p1bXAoJGlkOiBJRCEpIHtcclxuICAgICAgICBwcm9kdWN0KGlkOiAkaWQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgdmFyaWFudHMge1xyXG4gICAgICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgICAgIG5hbWVcclxuICAgICAgICAgICAgICAgIHNrdVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Zkci1wcm9kdWN0LXZhcmlhbnQtcXVpY2stanVtcCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvZHVjdC12YXJpYW50LXF1aWNrLWp1bXAuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJvZHVjdC12YXJpYW50LXF1aWNrLWp1bXAuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvZHVjdFZhcmlhbnRRdWlja0p1bXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCkgcHJvZHVjdElkOiBzdHJpbmc7XHJcbiAgICBzZWxlY3RlZFZhcmlhbnRJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgdmFyaWFudHMkOiBPYnNlcnZhYmxlPE5vbk51bGxhYmxlPEdldFByb2R1Y3RWYXJpYW50c1F1aWNrSnVtcFF1ZXJ5Wydwcm9kdWN0J10+Wyd2YXJpYW50cyddPjtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMudmFyaWFudHMkID0gdGhpcy5kYXRhU2VydmljZVxyXG4gICAgICAgICAgICAucXVlcnkoR2V0UHJvZHVjdFZhcmlhbnRzUXVpY2tKdW1wRG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLnByb2R1Y3RJZCxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm1hcFNpbmdsZShkYXRhID0+IGRhdGEucHJvZHVjdD8udmFyaWFudHMgPz8gW10pO1xyXG4gICAgfVxyXG5cclxuICAgIHNlYXJjaEZuID0gKFxyXG4gICAgICAgIHRlcm06IHN0cmluZyxcclxuICAgICAgICBpdGVtOiBOb25OdWxsYWJsZTxHZXRQcm9kdWN0VmFyaWFudHNRdWlja0p1bXBRdWVyeVsncHJvZHVjdCddPlsndmFyaWFudHMnXVtudW1iZXJdLFxyXG4gICAgKSA9PlxyXG4gICAgICAgIGl0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRlcm0udG9Mb3dlckNhc2UoKSkgfHxcclxuICAgICAgICBpdGVtLnNrdS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRlcm0udG9Mb3dlckNhc2UoKSk7XHJcblxyXG4gICAgb25TZWxlY3QoaXRlbT86IE5vbk51bGxhYmxlPEdldFByb2R1Y3RWYXJpYW50c1F1aWNrSnVtcFF1ZXJ5Wydwcm9kdWN0J10+Wyd2YXJpYW50cyddW251bWJlcl0pIHtcclxuICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvdXRlclxyXG4gICAgICAgICAgICAgICAgLm5hdmlnYXRlKFsnY2F0YWxvZycsICdwcm9kdWN0cycsIHRoaXMucHJvZHVjdElkLCAndmFyaWFudHMnLCBpdGVtLmlkXSlcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+ICh0aGlzLnNlbGVjdGVkVmFyaWFudElkID0gdW5kZWZpbmVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIjxuZy1zZWxlY3RcclxuICAgICpuZ0lmPVwiKHZhcmlhbnRzJCB8IGFzeW5jKT8ubGVuZ3RoID4gMVwiXHJcbiAgICBbaXRlbXNdPVwidmFyaWFudHMkIHwgYXN5bmNcIlxyXG4gICAgYXBwZW5kVG89XCJib2R5XCJcclxuICAgIGJpbmRWYWx1ZT1cImlkXCJcclxuICAgIFsobmdNb2RlbCldPVwic2VsZWN0ZWRWYXJpYW50SWRcIlxyXG4gICAgW3NlYXJjaEZuXT1cInNlYXJjaEZuXCJcclxuICAgIFtjbGVhcmFibGVdPVwiZmFsc2VcIlxyXG4gICAgW3BsYWNlaG9sZGVyXT1cIidjYXRhbG9nLnF1aWNrLWp1bXAtcGxhY2Vob2xkZXInIHwgdHJhbnNsYXRlXCJcclxuICAgIChjaGFuZ2UpPVwib25TZWxlY3QoJGV2ZW50KVwiXHJcbj5cclxuICAgIDxuZy10ZW1wbGF0ZSBuZy1vcHRpb24tdG1wIGxldC1pdGVtPVwiaXRlbVwiIGxldC1pbmRleD1cImluZGV4XCIgbGV0LXNlYXJjaD1cInNlYXJjaFRlcm1cIj5cclxuICAgICAgICB7eyBpdGVtLm5hbWUgfX0gKHt7IGl0ZW0uc2t1IH19KVxyXG4gICAgPC9uZy10ZW1wbGF0ZT5cclxuPC9uZy1zZWxlY3Q+XHJcbiJdfQ==