import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { createUpdatedTranslatable, findTranslation, getChannelCodeFromUserStatus, getCustomFieldsDefaults, Permission, PRODUCT_DETAIL_FRAGMENT, TypedBaseDetailComponent, unicodePatternValidator, } from '@vendure/admin-ui/core';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';
import { unique } from '@vendure/common/lib/unique';
import { gql } from 'apollo-angular';
import { combineLatest, concat, EMPTY, from } from 'rxjs';
import { distinctUntilChanged, map, mergeMap, shareReplay, skip, switchMap, switchMapTo, take, } from 'rxjs/operators';
import { ApplyFacetDialogComponent } from '../apply-facet-dialog/apply-facet-dialog.component';
import { AssignProductsToChannelDialogComponent } from '../assign-products-to-channel-dialog/assign-products-to-channel-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@vendure/admin-ui/core";
import * as i3 from "../../providers/product-detail/product-detail.service";
import * as i4 from "@angular/forms";
import * as i5 from "@clr/angular";
import * as i6 from "@angular/common";
import * as i7 from "../generate-product-variants/generate-product-variants.component";
import * as i8 from "../assets/assets.component";
import * as i9 from "../product-variant-list/product-variant-list.component";
import * as i10 from "@ngx-translate/core";
export const GET_PRODUCT_DETAIL = gql `
    query GetProductDetail($id: ID!) {
        product(id: $id) {
            ...ProductDetail
        }
    }
    ${PRODUCT_DETAIL_FRAGMENT}
`;
export class ProductDetailComponent extends TypedBaseDetailComponent {
    constructor(route, router, serverConfigService, productDetailService, formBuilder, modalService, notificationService, dataService, changeDetector) {
        super();
        this.productDetailService = productDetailService;
        this.formBuilder = formBuilder;
        this.modalService = modalService;
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.changeDetector = changeDetector;
        this.customFields = this.getCustomFieldConfig('Product');
        this.detailForm = this.formBuilder.group({
            enabled: true,
            name: ['', Validators.required],
            autoUpdateVariantNames: true,
            slug: ['', unicodePatternValidator(/^[\p{Letter}0-9._-]+$/)],
            description: '',
            facetValueIds: [[]],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.assetChanges = {};
        this.createVariantsConfig = { groups: [], variants: [], stockLocationId: '' };
        this.updatePermissions = [Permission.UpdateCatalog, Permission.UpdateProduct];
    }
    ngOnInit() {
        this.init();
        const productFacetValues$ = this.entity$.pipe(map(product => product.facetValues));
        const productGroup = this.detailForm;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const formFacetValueIdChanges$ = productGroup.get('facetValueIds').valueChanges.pipe(skip(1), distinctUntilChanged(), switchMap(ids => this.dataService.facet
            .getFacetValues({ filter: { id: { in: ids } } })
            .mapSingle(({ facetValues }) => facetValues.items)), shareReplay(1));
        this.facetValues$ = concat(productFacetValues$.pipe(take(1)), productFacetValues$.pipe(switchMapTo(formFacetValueIdChanges$)));
        this.productChannels$ = this.entity$.pipe(map(p => p.channels));
    }
    ngOnDestroy() {
        this.destroy();
    }
    isDefaultChannel(channelCode) {
        return channelCode === DEFAULT_CHANNEL_CODE;
    }
    assignToChannel() {
        this.productChannels$
            .pipe(take(1), switchMap(channels => this.modalService.fromComponent(AssignProductsToChannelDialogComponent, {
            size: 'lg',
            locals: {
                productIds: [this.id],
                currentChannelIds: channels.map(c => c.id),
            },
        })))
            .subscribe();
    }
    removeFromChannel(channelId) {
        from(getChannelCodeFromUserStatus(this.dataService, channelId))
            .pipe(switchMap(({ channelCode }) => this.modalService.dialog({
            title: _('catalog.remove-product-from-channel'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                {
                    type: 'danger',
                    label: _('catalog.remove-from-channel'),
                    translationVars: { channelCode },
                    returnValue: true,
                },
            ],
        })), switchMap(response => response
            ? this.dataService.product.removeProductsFromChannel({
                channelId,
                productIds: [this.id],
            })
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(_('catalog.notify-remove-product-from-channel-success'));
        }, err => {
            this.notificationService.error(_('catalog.notify-remove-product-from-channel-error'));
        });
    }
    assignVariantToChannel(variant) {
        return this.modalService
            .fromComponent(AssignProductsToChannelDialogComponent, {
            size: 'lg',
            locals: {
                productIds: [this.id],
                productVariantIds: [variant.id],
                currentChannelIds: variant.channels.map(c => c.id),
            },
        })
            .subscribe();
    }
    removeVariantFromChannel({ channelId, variant }) {
        from(getChannelCodeFromUserStatus(this.dataService, channelId))
            .pipe(switchMap(({ channelCode }) => this.modalService.dialog({
            title: _('catalog.remove-product-variant-from-channel'),
            buttons: [
                { type: 'secondary', label: _('common.cancel') },
                {
                    type: 'danger',
                    label: _('catalog.remove-from-channel'),
                    translationVars: { channelCode },
                    returnValue: true,
                },
            ],
        })), switchMap(response => response
            ? this.dataService.product.removeVariantsFromChannel({
                channelId,
                productVariantIds: [variant.id],
            })
            : EMPTY))
            .subscribe(() => {
            this.notificationService.success(_('catalog.notify-remove-variant-from-channel-success'));
        }, err => {
            this.notificationService.error(_('catalog.notify-remove-variant-from-channel-error'));
        });
    }
    assetsChanged() {
        return !!Object.values(this.assetChanges).length;
    }
    /**
     * If creating a new product, automatically generate the slug based on the product name.
     */
    updateSlug(nameValue) {
        const slugControl = this.detailForm.get('slug');
        const currentTranslation = this.entity ? findTranslation(this.entity, this.languageCode) : undefined;
        const currentSlugIsEmpty = !currentTranslation || !currentTranslation.slug;
        if (slugControl && slugControl.pristine && currentSlugIsEmpty) {
            slugControl.setValue(normalizeString(`${nameValue}`, '-'));
        }
    }
    selectProductFacetValue() {
        this.displayFacetValueModal().subscribe(facetValueIds => {
            if (facetValueIds) {
                const productGroup = this.detailForm;
                const currentFacetValueIds = productGroup.value.facetValueIds ?? [];
                productGroup.patchValue({
                    facetValueIds: unique([...currentFacetValueIds, ...facetValueIds]),
                });
                productGroup.markAsDirty();
            }
        });
    }
    updateProductOption(input) {
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([product, languageCode]) => this.productDetailService.updateProductOption(input, product, languageCode)))
            .subscribe(() => {
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'ProductOption',
            });
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'ProductOption',
            });
        });
    }
    removeProductFacetValue(facetValueId) {
        const productGroup = this.detailForm;
        const currentFacetValueIds = productGroup.value.facetValueIds ?? [];
        productGroup.patchValue({
            facetValueIds: currentFacetValueIds.filter(id => id !== facetValueId),
        });
        productGroup.markAsDirty();
    }
    displayFacetValueModal() {
        return this.modalService
            .fromComponent(ApplyFacetDialogComponent, {
            size: 'md',
            closable: true,
        })
            .pipe(map(facetValues => facetValues && facetValues.map(v => v.id)));
    }
    create() {
        const productGroup = this.detailForm;
        if (!productGroup.dirty) {
            return;
        }
        const newProduct = this.getUpdatedProduct({
            id: '',
            createdAt: '',
            updatedAt: '',
            enabled: true,
            languageCode: this.languageCode,
            name: '',
            slug: '',
            featuredAsset: null,
            assets: [],
            description: '',
            translations: [],
            optionGroups: [],
            facetValues: [],
            channels: [],
        }, productGroup, this.languageCode);
        this.productDetailService
            .createProductWithVariants(newProduct, this.createVariantsConfig, this.languageCode)
            .subscribe(({ createProductVariants, productId }) => {
            this.notificationService.success(_('common.notify-create-success'), {
                entity: 'Product',
            });
            this.assetChanges = {};
            this.detailForm.markAsPristine();
            this.router.navigate(['../', productId], { relativeTo: this.route });
        }, err => {
            // eslint-disable-next-line no-console
            console.error(err);
            this.notificationService.error(_('common.notify-create-error'), {
                entity: 'Product',
            });
        });
    }
    save() {
        combineLatest(this.entity$, this.languageCode$)
            .pipe(take(1), mergeMap(([product, languageCode]) => {
            const productGroup = this.detailForm;
            let productInput;
            let variantsInput;
            if (productGroup.dirty || this.assetsChanged()) {
                productInput = this.getUpdatedProduct(product, productGroup, languageCode);
            }
            return this.productDetailService.updateProduct({
                product,
                languageCode,
                autoUpdate: this.detailForm.get(['product', 'autoUpdateVariantNames'])?.value ?? false,
                productInput,
                variantsInput,
            });
        }))
            .subscribe(result => {
            this.updateSlugAfterSave(result);
            this.detailForm.markAsPristine();
            this.assetChanges = {};
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'Product',
            });
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'Product',
            });
        });
    }
    canDeactivate() {
        return super.canDeactivate() && !this.assetChanges.assets && !this.assetChanges.featuredAsset;
    }
    /**
     * Sets the values of the form on changes to the product or current language.
     */
    setFormValues(product, languageCode) {
        const currentTranslation = findTranslation(product, languageCode);
        this.detailForm.patchValue({
            enabled: product.enabled,
            name: currentTranslation ? currentTranslation.name : '',
            slug: currentTranslation ? currentTranslation.slug : '',
            description: currentTranslation ? currentTranslation.description : '',
            facetValueIds: product.facetValues.map(fv => fv.id),
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), product, currentTranslation);
        }
    }
    /**
     * Given a product and the value of the detailForm, this method creates an updated copy of the product which
     * can then be persisted to the API.
     */
    getUpdatedProduct(product, productFormGroup, languageCode) {
        const updatedProduct = createUpdatedTranslatable({
            translatable: product,
            updatedFields: productFormGroup.value,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: product.name || '',
                slug: product.slug || '',
                description: product.description || '',
            },
        });
        return {
            ...updatedProduct,
            assetIds: this.assetChanges.assets?.map(a => a.id),
            featuredAssetId: this.assetChanges.featuredAsset?.id,
            facetValueIds: productFormGroup.value.facetValueIds,
        };
    }
    /**
     * The server may alter the slug value in order to normalize and ensure uniqueness upon saving.
     */
    updateSlugAfterSave(results) {
        const firstResult = results[0];
        const slugControl = this.detailForm.get(['product', 'slug']);
        function isUpdateMutation(input) {
            return input.hasOwnProperty('updateProduct');
        }
        if (slugControl && isUpdateMutation(firstResult)) {
            slugControl.setValue(firstResult.updateProduct.slug, { emitEvent: false });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ProductDetailComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.ServerConfigService }, { token: i3.ProductDetailService }, { token: i4.FormBuilder }, { token: i2.ModalService }, { token: i2.NotificationService }, { token: i2.DataService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: ProductDetailComponent, selector: "vdr-product-detail2", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-flex-row\"></div>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine || createVariantsConfig.variants.length === 0\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    *vdrIfPermissions=\"updatePermissions\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermissions\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            name=\"enabled\"\r\n                            [formControl]=\"detailForm.get(['enabled'])\"\r\n                        />\r\n                        <label>{{ 'common.enabled' | translate }}</label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <ng-container *ngIf=\"!(isNew$ | async)\">\r\n                <vdr-card *vdrIfMultichannel [title]=\"'common.channels' | translate\">\r\n                    <vdr-form-item *vdrIfDefaultChannelActive>\r\n                        <div class=\"flex channel-assignment\">\r\n                            <div class=\"mb-2\">\r\n                                <ng-container *ngFor=\"let channel of productChannels$ | async\">\r\n                                    <vdr-chip\r\n                                        *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                        icon=\"times-circle\"\r\n                                        (iconClick)=\"removeFromChannel(channel.id)\"\r\n                                    >\r\n                                        <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                                        {{ channel.code | channelCodeToLabel }}\r\n                                    </vdr-chip>\r\n                                </ng-container>\r\n                            </div>\r\n                            <button class=\"button-small\" (click)=\"assignToChannel()\">\r\n                                <clr-icon shape=\"layers\"></clr-icon>\r\n                                {{ 'catalog.assign-to-channel' | translate }}\r\n                            </button>\r\n                        </div>\r\n                    </vdr-form-item>\r\n                </vdr-card>\r\n            </ng-container>\r\n            <vdr-card *ngIf=\"entity?.optionGroups.length\" [title]=\"'catalog.product-options' | translate\">\r\n                <div class=\"options\">\r\n                    <vdr-chip\r\n                        *ngFor=\"let optionGroup of entity?.optionGroups | sort : 'id'\"\r\n                        [colorFrom]=\"optionGroup.code\"\r\n                        [invert]=\"true\"\r\n                    >\r\n                        {{ optionGroup.name }}\r\n                    </vdr-chip>\r\n                </div>\r\n                <div>\r\n                    <a [routerLink]=\"['options']\" class=\"button-small mt-2\" *vdrIfPermissions=\"updatePermissions\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'catalog.edit-options' | translate }}\r\n                    </a>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'catalog.facets' | translate\">\r\n                <div class=\"facets\">\r\n                    <vdr-facet-value-chip\r\n                        *ngFor=\"let facetValue of facetValues$ | async\"\r\n                        [facetValue]=\"facetValue\"\r\n                        [removable]=\"updatePermissions | hasPermission\"\r\n                        (remove)=\"removeProductFacetValue(facetValue.id)\"\r\n                    ></vdr-facet-value-chip>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        class=\"button-small mt-2\"\r\n                        *vdrIfPermissions=\"updatePermissions\"\r\n                        (click)=\"selectProductFacetValue()\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.add-facets' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n\r\n        <vdr-page-block>\r\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <div>\r\n                        <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\r\n                            <input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                formControlName=\"name\"\r\n                                [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                                (input)=\"updateSlug($event.target.value)\"\r\n                            />\r\n                        </vdr-form-field>\r\n                        <div *ngIf=\"(isNew$ | async) === false && detailForm.get(['name'])?.dirty\">\r\n                            <clr-checkbox-wrapper>\r\n                                <input\r\n                                    clrCheckbox\r\n                                    type=\"checkbox\"\r\n                                    id=\"auto-update\"\r\n                                    formControlName=\"autoUpdateVariantNames\"\r\n                                />\r\n                                <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\r\n                            </clr-checkbox-wrapper>\r\n                        </div>\r\n                    </div>\r\n                    <vdr-form-field\r\n                        [label]=\"'catalog.slug' | translate\"\r\n                        for=\"slug\"\r\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                    >\r\n                        <input\r\n                            id=\"slug\"\r\n                            type=\"text\"\r\n                            formControlName=\"slug\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        class=\"form-grid-span\"\r\n                        [label]=\"'common.description' | translate\"\r\n                        for=\"slug\"\r\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                    >\r\n                        <vdr-rich-text-editor\r\n                            formControlName=\"description\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        ></vdr-rich-text-editor>\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Product\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"product-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n            <vdr-card [title]=\"'catalog.assets' | translate\">\r\n                <vdr-assets\r\n                    [assets]=\"assetChanges.assets || entity?.assets\"\r\n                    [featuredAsset]=\"assetChanges.featuredAsset || entity?.featuredAsset\"\r\n                    [updatePermissions]=\"updatePermissions\"\r\n                    (change)=\"assetChanges = $event\"\r\n                ></vdr-assets>\r\n            </vdr-card>\r\n\r\n            <vdr-card [title]=\"'catalog.product-variants' | translate\" [paddingX]=\"isNew$ | async\">\r\n                <div *ngIf=\"isNew$ | async; else variantList\">\r\n                    <vdr-generate-product-variants\r\n                        (variantsChange)=\"createVariantsConfig = $event\"\r\n                    ></vdr-generate-product-variants>\r\n                </div>\r\n                <ng-template #variantList>\r\n                    <vdr-product-variant-list\r\n                        [productId]=\"this.id\"\r\n                        [hideLanguageSelect]=\"true\"\r\n                    ></vdr-product-variant-list>\r\n                </ng-template>\r\n                <div class=\"mx-3\" *ngIf=\"(isNew$ | async) === false\">\r\n                    <a class=\"button\" [routerLink]=\"['manage-variants']\">\r\n                        <clr-icon shape=\"add-text\"></clr-icon>\r\n                        {{ 'catalog.manage-variants' | translate }}</a\r\n                    >\r\n                </div>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n", styles: [":host ::ng-deep trix-toolbar{top:24px}.facets,.options{display:flex;flex-wrap:wrap;gap:3px}vdr-action-bar clr-toggle-wrapper{margin-top:12px}.variant-filter{flex:1;display:flex}.variant-filter input{flex:1;max-width:initial;border-radius:3px 0 0 3px!important}.variant-filter .icon-button{border:1px solid var(--color-component-border-300);background-color:var(--color-component-bg-100);border-radius:0 3px 3px 0;border-inline-start:none}.group-name{padding-inline-end:6px}.view-mode{display:flex;flex-direction:column;justify-content:space-between}@media screen and (min-width: 768px){.view-mode{flex-direction:row}}.edit-variants-btn{margin-top:0}.channel-assignment{flex-wrap:wrap;max-height:144px}.pagination-row{display:flex;align-items:baseline;justify-content:space-between}\n"], dependencies: [{ kind: "directive", type: i5.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i5.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i5.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i5.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i2.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i2.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i2.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i2.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i2.FacetValueChipComponent, selector: "vdr-facet-value-chip", inputs: ["facetValue", "removable", "displayFacetName"], outputs: ["remove"] }, { kind: "component", type: i2.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"] }, { kind: "directive", type: i2.FormFieldControlDirective, selector: "input, textarea, select" }, { kind: "component", type: i2.FormItemComponent, selector: "vdr-form-item", inputs: ["label", "tooltip"] }, { kind: "component", type: i2.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i2.RichTextEditorComponent, selector: "vdr-rich-text-editor", inputs: ["label", "readonly"] }, { kind: "directive", type: i2.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "directive", type: i2.IfMultichannelDirective, selector: "[vdrIfMultichannel]", inputs: ["vdrIfMultichannelElse"] }, { kind: "component", type: i2.ActionBarItemsComponent, selector: "vdr-action-bar-items", inputs: ["locationId"] }, { kind: "component", type: i2.ChannelBadgeComponent, selector: "vdr-channel-badge", inputs: ["channelCode"] }, { kind: "directive", type: i2.IfDefaultChannelActiveDirective, selector: "[vdrIfDefaultChannelActive]", inputs: ["vdrIfMultichannelElse"] }, { kind: "component", type: i2.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i2.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i2.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i2.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i2.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i2.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i2.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: i7.GenerateProductVariantsComponent, selector: "vdr-generate-product-variants", outputs: ["variantsChange"] }, { kind: "component", type: i8.AssetsComponent, selector: "vdr-assets", inputs: ["assets", "featuredAsset", "compact", "updatePermissions"], outputs: ["change"] }, { kind: "component", type: i9.ProductVariantListComponent, selector: "vdr-product-variant-list", inputs: ["productId", "hideLanguageSelect"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i10.TranslatePipe, name: "translate" }, { kind: "pipe", type: i2.SortPipe, name: "sort" }, { kind: "pipe", type: i2.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i2.ChannelLabelPipe, name: "channelCodeToLabel" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ProductDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-product-detail2', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <div class=\"flex clr-flex-row\"></div>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"product-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine || createVariantsConfig.variants.length === 0\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    *vdrIfPermissions=\"updatePermissions\"\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    [disabled]=\"(detailForm.invalid || detailForm.pristine) && !assetsChanged()\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card>\r\n                <vdr-form-field [label]=\"'catalog.visibility' | translate\" for=\"visibility\">\r\n                    <clr-toggle-wrapper *vdrIfPermissions=\"updatePermissions\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            clrToggle\r\n                            name=\"enabled\"\r\n                            [formControl]=\"detailForm.get(['enabled'])\"\r\n                        />\r\n                        <label>{{ 'common.enabled' | translate }}</label>\r\n                    </clr-toggle-wrapper>\r\n                </vdr-form-field>\r\n            </vdr-card>\r\n            <ng-container *ngIf=\"!(isNew$ | async)\">\r\n                <vdr-card *vdrIfMultichannel [title]=\"'common.channels' | translate\">\r\n                    <vdr-form-item *vdrIfDefaultChannelActive>\r\n                        <div class=\"flex channel-assignment\">\r\n                            <div class=\"mb-2\">\r\n                                <ng-container *ngFor=\"let channel of productChannels$ | async\">\r\n                                    <vdr-chip\r\n                                        *ngIf=\"!isDefaultChannel(channel.code)\"\r\n                                        icon=\"times-circle\"\r\n                                        (iconClick)=\"removeFromChannel(channel.id)\"\r\n                                    >\r\n                                        <vdr-channel-badge [channelCode]=\"channel.code\"></vdr-channel-badge>\r\n                                        {{ channel.code | channelCodeToLabel }}\r\n                                    </vdr-chip>\r\n                                </ng-container>\r\n                            </div>\r\n                            <button class=\"button-small\" (click)=\"assignToChannel()\">\r\n                                <clr-icon shape=\"layers\"></clr-icon>\r\n                                {{ 'catalog.assign-to-channel' | translate }}\r\n                            </button>\r\n                        </div>\r\n                    </vdr-form-item>\r\n                </vdr-card>\r\n            </ng-container>\r\n            <vdr-card *ngIf=\"entity?.optionGroups.length\" [title]=\"'catalog.product-options' | translate\">\r\n                <div class=\"options\">\r\n                    <vdr-chip\r\n                        *ngFor=\"let optionGroup of entity?.optionGroups | sort : 'id'\"\r\n                        [colorFrom]=\"optionGroup.code\"\r\n                        [invert]=\"true\"\r\n                    >\r\n                        {{ optionGroup.name }}\r\n                    </vdr-chip>\r\n                </div>\r\n                <div>\r\n                    <a [routerLink]=\"['options']\" class=\"button-small mt-2\" *vdrIfPermissions=\"updatePermissions\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'catalog.edit-options' | translate }}\r\n                    </a>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'catalog.facets' | translate\">\r\n                <div class=\"facets\">\r\n                    <vdr-facet-value-chip\r\n                        *ngFor=\"let facetValue of facetValues$ | async\"\r\n                        [facetValue]=\"facetValue\"\r\n                        [removable]=\"updatePermissions | hasPermission\"\r\n                        (remove)=\"removeProductFacetValue(facetValue.id)\"\r\n                    ></vdr-facet-value-chip>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        class=\"button-small mt-2\"\r\n                        *vdrIfPermissions=\"updatePermissions\"\r\n                        (click)=\"selectProductFacetValue()\"\r\n                    >\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'catalog.add-facets' | translate }}\r\n                    </button>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\"></vdr-page-entity-info>\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n\r\n        <vdr-page-block>\r\n            <button type=\"submit\" hidden x-data=\"prevents enter key from triggering other buttons\"></button>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <div>\r\n                        <vdr-form-field [label]=\"'catalog.product-name' | translate\" for=\"name\">\r\n                            <input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                formControlName=\"name\"\r\n                                [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                                (input)=\"updateSlug($event.target.value)\"\r\n                            />\r\n                        </vdr-form-field>\r\n                        <div *ngIf=\"(isNew$ | async) === false && detailForm.get(['name'])?.dirty\">\r\n                            <clr-checkbox-wrapper>\r\n                                <input\r\n                                    clrCheckbox\r\n                                    type=\"checkbox\"\r\n                                    id=\"auto-update\"\r\n                                    formControlName=\"autoUpdateVariantNames\"\r\n                                />\r\n                                <label>{{ 'catalog.auto-update-product-variant-name' | translate }}</label>\r\n                            </clr-checkbox-wrapper>\r\n                        </div>\r\n                    </div>\r\n                    <vdr-form-field\r\n                        [label]=\"'catalog.slug' | translate\"\r\n                        for=\"slug\"\r\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                    >\r\n                        <input\r\n                            id=\"slug\"\r\n                            type=\"text\"\r\n                            formControlName=\"slug\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        class=\"form-grid-span\"\r\n                        [label]=\"'common.description' | translate\"\r\n                        for=\"slug\"\r\n                        [errors]=\"{ pattern: 'catalog.slug-pattern-error' | translate }\"\r\n                    >\r\n                        <vdr-rich-text-editor\r\n                            formControlName=\"description\"\r\n                            [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                        ></vdr-rich-text-editor>\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'common.custom-fields' | translate\" *ngIf=\"customFields.length\">\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Product\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                    [readonly]=\"!(updatePermissions | hasPermission)\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"product-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n            <vdr-card [title]=\"'catalog.assets' | translate\">\r\n                <vdr-assets\r\n                    [assets]=\"assetChanges.assets || entity?.assets\"\r\n                    [featuredAsset]=\"assetChanges.featuredAsset || entity?.featuredAsset\"\r\n                    [updatePermissions]=\"updatePermissions\"\r\n                    (change)=\"assetChanges = $event\"\r\n                ></vdr-assets>\r\n            </vdr-card>\r\n\r\n            <vdr-card [title]=\"'catalog.product-variants' | translate\" [paddingX]=\"isNew$ | async\">\r\n                <div *ngIf=\"isNew$ | async; else variantList\">\r\n                    <vdr-generate-product-variants\r\n                        (variantsChange)=\"createVariantsConfig = $event\"\r\n                    ></vdr-generate-product-variants>\r\n                </div>\r\n                <ng-template #variantList>\r\n                    <vdr-product-variant-list\r\n                        [productId]=\"this.id\"\r\n                        [hideLanguageSelect]=\"true\"\r\n                    ></vdr-product-variant-list>\r\n                </ng-template>\r\n                <div class=\"mx-3\" *ngIf=\"(isNew$ | async) === false\">\r\n                    <a class=\"button\" [routerLink]=\"['manage-variants']\">\r\n                        <clr-icon shape=\"add-text\"></clr-icon>\r\n                        {{ 'catalog.manage-variants' | translate }}</a\r\n                    >\r\n                </div>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n", styles: [":host ::ng-deep trix-toolbar{top:24px}.facets,.options{display:flex;flex-wrap:wrap;gap:3px}vdr-action-bar clr-toggle-wrapper{margin-top:12px}.variant-filter{flex:1;display:flex}.variant-filter input{flex:1;max-width:initial;border-radius:3px 0 0 3px!important}.variant-filter .icon-button{border:1px solid var(--color-component-border-300);background-color:var(--color-component-bg-100);border-radius:0 3px 3px 0;border-inline-start:none}.group-name{padding-inline-end:6px}.view-mode{display:flex;flex-direction:column;justify-content:space-between}@media screen and (min-width: 768px){.view-mode{flex-direction:row}}.edit-variants-btn{margin-top:0}.channel-assignment{flex-wrap:wrap;max-height:144px}.pagination-row{display:flex;align-items:baseline;justify-content:space-between}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.ServerConfigService }, { type: i3.ProductDetailService }, { type: i4.FormBuilder }, { type: i2.ModalService }, { type: i2.NotificationService }, { type: i2.DataService }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,