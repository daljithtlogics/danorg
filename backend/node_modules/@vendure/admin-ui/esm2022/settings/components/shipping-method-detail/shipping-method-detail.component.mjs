import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { configurableDefinitionToInstance, createUpdatedTranslatable, findTranslation, getConfigArgValue, getCustomFieldsDefaults, Permission, SHIPPING_METHOD_FRAGMENT, toConfigurableOperationInput, TypedBaseDetailComponent, } from '@vendure/admin-ui/core';
import { normalizeString } from '@vendure/common/lib/normalize-string';
import { gql } from 'apollo-angular';
import { combineLatest, merge, of, Subject } from 'rxjs';
import { mergeMap, switchMap, take, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@angular/forms";
import * as i3 from "@clr/angular";
import * as i4 from "@angular/common";
import * as i5 from "../test-order-builder/test-order-builder.component";
import * as i6 from "../test-address-form/test-address-form.component";
import * as i7 from "../shipping-method-test-result/shipping-method-test-result.component";
import * as i8 from "@ngx-translate/core";
export const GET_SHIPPING_METHOD_DETAIL = gql `
    query GetShippingMethodDetail($id: ID!) {
        shippingMethod(id: $id) {
            ...ShippingMethod
        }
    }
    ${SHIPPING_METHOD_FRAGMENT}
`;
export class ShippingMethodDetailComponent extends TypedBaseDetailComponent {
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('ShippingMethod');
        this.detailForm = this.formBuilder.group({
            code: ['', Validators.required],
            name: ['', Validators.required],
            description: '',
            fulfillmentHandler: ['', Validators.required],
            checker: {},
            calculator: {},
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.checkers = [];
        this.calculators = [];
        this.fulfillmentHandlers = [];
        this.testDataUpdated = false;
        this.updatePermission = [Permission.UpdateSettings, Permission.UpdateShippingMethod];
        this.fetchTestResult$ = new Subject();
    }
    ngOnInit() {
        this.init();
        this.dataService.shippingMethod.getShippingMethodOperations().single$.subscribe(data => {
            this.checkers = data.shippingEligibilityCheckers;
            this.calculators = data.shippingCalculators;
            this.fulfillmentHandlers = data.fulfillmentHandlers;
            this.changeDetector.markForCheck();
            this.selectedCheckerDefinition = data.shippingEligibilityCheckers.find(c => c.code === this.entity?.checker?.code);
            this.selectedCalculatorDefinition = data.shippingCalculators.find(c => c.code === this.entity?.calculator?.code);
        });
        this.activeChannel$ = this.dataService.settings
            .getActiveChannel()
            .mapStream(data => data.activeChannel);
        this.testResult$ = this.fetchTestResult$.pipe(switchMap(([address, lines]) => {
            const { checker, calculator } = this.detailForm.value;
            if (!this.selectedChecker || !this.selectedCalculator || !checker || !calculator) {
                return of(undefined);
            }
            const input = {
                shippingAddress: { ...address, streetLine1: 'test' },
                lines: lines.map(l => ({ productVariantId: l.id, quantity: l.quantity })),
                checker: toConfigurableOperationInput(this.selectedChecker, checker),
                calculator: toConfigurableOperationInput(this.selectedCalculator, calculator),
            };
            return this.dataService.shippingMethod
                .testShippingMethod(input)
                .mapSingle(result => result.testShippingMethod);
        }));
        /* eslint-disable @typescript-eslint/no-non-null-assertion */
        merge(this.detailForm.get(['checker']).valueChanges, this.detailForm.get(['calculator']).valueChanges)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => (this.testDataUpdated = true));
        /* eslint-enable @typescript-eslint/no-non-null-assertion */
    }
    ngOnDestroy() {
        this.destroy();
    }
    updateCode(currentCode, nameValue) {
        if (!currentCode) {
            const codeControl = this.detailForm.get(['code']);
            if (codeControl && codeControl.pristine) {
                codeControl.setValue(normalizeString(nameValue, '-'));
            }
        }
    }
    selectChecker(checker) {
        this.selectedCheckerDefinition = checker;
        this.selectedChecker = configurableDefinitionToInstance(checker);
        const formControl = this.detailForm.get('checker');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedChecker);
        }
        this.detailForm.markAsDirty();
    }
    selectCalculator(calculator) {
        this.selectedCalculatorDefinition = calculator;
        this.selectedCalculator = configurableDefinitionToInstance(calculator);
        const formControl = this.detailForm.get('calculator');
        if (formControl) {
            formControl.clearValidators();
            formControl.updateValueAndValidity({ onlySelf: true });
            formControl.patchValue(this.selectedCalculator);
        }
        this.detailForm.markAsDirty();
    }
    create() {
        const selectedChecker = this.selectedChecker;
        const selectedCalculator = this.selectedCalculator;
        const { checker, calculator } = this.detailForm.value;
        if (!selectedChecker || !selectedCalculator || !checker || !calculator) {
            return;
        }
        const formValue = this.detailForm.value;
        const input = {
            ...this.getUpdatedShippingMethod({
                createdAt: '',
                updatedAt: '',
                id: '',
                code: '',
                name: '',
                description: '',
                fulfillmentHandlerCode: '',
                checker: undefined,
                calculator: undefined,
                translations: [],
            }, this.detailForm, this.languageCode),
            checker: toConfigurableOperationInput(selectedChecker, checker),
            calculator: toConfigurableOperationInput(selectedCalculator, calculator),
        };
        this.dataService.shippingMethod.createShippingMethod(input).subscribe(data => {
            this.notificationService.success(_('common.notify-create-success'), {
                entity: 'ShippingMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createShippingMethod.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(_('common.notify-create-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    save() {
        const selectedChecker = this.selectedChecker;
        const selectedCalculator = this.selectedCalculator;
        const { checker, calculator } = this.detailForm.value;
        if (!selectedChecker || !selectedCalculator || !checker || !calculator) {
            return;
        }
        combineLatest([this.entity$, this.languageCode$])
            .pipe(take(1), mergeMap(([shippingMethod, languageCode]) => {
            const formValue = this.detailForm.value;
            const input = {
                ...this.getUpdatedShippingMethod(shippingMethod, this.detailForm, languageCode),
                checker: toConfigurableOperationInput(selectedChecker, checker),
                calculator: toConfigurableOperationInput(selectedCalculator, calculator),
            };
            return this.dataService.shippingMethod.updateShippingMethod(input);
        }))
            .subscribe(data => {
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'ShippingMethod',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            // eslint-disable-next-line no-console
            console.error(err);
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'ShippingMethod',
            });
        });
    }
    setTestOrderLines(event) {
        this.testOrderLines = event;
        this.testDataUpdated = true;
    }
    setTestAddress(event) {
        this.testAddress = event;
        this.testDataUpdated = true;
    }
    allTestDataPresent() {
        return !!(this.testAddress &&
            this.testOrderLines &&
            this.testOrderLines.length &&
            this.selectedChecker &&
            this.selectedCalculator);
    }
    runTest() {
        this.fetchTestResult$.next([this.testAddress, this.testOrderLines]);
        this.testDataUpdated = false;
    }
    /**
     * Given a ShippingMethod and the value of the detailForm, this method creates an updated copy which
     * can then be persisted to the API.
     */
    getUpdatedShippingMethod(shippingMethod, formGroup, languageCode) {
        const formValue = formGroup.value;
        const input = createUpdatedTranslatable({
            translatable: shippingMethod,
            updatedFields: formValue,
            customFieldConfig: this.customFields,
            languageCode,
            defaultTranslation: {
                languageCode,
                name: shippingMethod.name || '',
                description: shippingMethod.description || '',
            },
        });
        return { ...input, fulfillmentHandler: formValue.fulfillmentHandler };
    }
    setFormValues(shippingMethod, languageCode) {
        const currentTranslation = findTranslation(shippingMethod, languageCode);
        this.detailForm.patchValue({
            name: currentTranslation?.name ?? '',
            description: currentTranslation?.description ?? '',
            code: shippingMethod.code,
            fulfillmentHandler: shippingMethod.fulfillmentHandlerCode,
            checker: shippingMethod.checker || {},
            calculator: shippingMethod.calculator || {},
        });
        if (!this.selectedChecker) {
            this.selectedChecker = shippingMethod.checker && {
                code: shippingMethod.checker.code,
                args: shippingMethod.checker.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),
            };
        }
        if (!this.selectedCalculator) {
            this.selectedCalculator = shippingMethod.calculator && {
                code: shippingMethod.calculator?.code,
                args: shippingMethod.calculator?.args.map(a => ({ ...a, value: getConfigArgValue(a.value) })),
            };
        }
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), shippingMethod, currentTranslation);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ShippingMethodDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: ShippingMethodDetailComponent, selector: "vdr-shipping-method-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"\r\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                \"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    *vdrIfPermissions=\"updatePermission\"\r\n                    [disabled]=\"\r\n                        detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                    \"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n        <vdr-page-block>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        [label]=\"'common.code' | translate\"\r\n                        for=\"code\"\r\n                        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n                    >\r\n                        <input\r\n                            id=\"code\"\r\n                            type=\"text\"\r\n                            formControlName=\"code\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-rich-text-editor\r\n                        class=\"form-grid-span\"\r\n                        formControlName=\"description\"\r\n                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        [label]=\"'common.description' | translate\"\r\n                    ></vdr-rich-text-editor>\r\n                    <vdr-form-field\r\n                        [label]=\"'settings.fulfillment-handler' | translate\"\r\n                        for=\"fulfillmentHandler\"\r\n                    >\r\n                        <select\r\n                            name=\"fulfillmentHandler\"\r\n                            formControlName=\"fulfillmentHandler\"\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                        >\r\n                            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\r\n                                {{ handler.code }}: {{ handler.description }}\r\n                            </option>\r\n                        </select>\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n\r\n            <vdr-card\r\n                formGroupName=\"customFields\"\r\n                *ngIf=\"customFields.length\"\r\n                [title]=\"'common.custom-fields' | translate\"\r\n            >\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"ShippingMethod\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"shipping-method-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-card [title]=\"'settings.shipping-eligibility-checker' | translate\">\r\n                <vdr-configurable-input\r\n                    class=\"card-span\"\r\n                    *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                    [operation]=\"selectedChecker\"\r\n                    [operationDefinition]=\"selectedCheckerDefinition\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    (remove)=\"selectedChecker = null\"\r\n                    formControlName=\"checker\"\r\n                ></vdr-configurable-input>\r\n                <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\" class=\"card-span\">\r\n                    <vdr-dropdown>\r\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            {{ 'common.select' | translate }}\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                            <button\r\n                                *ngFor=\"let checker of checkers\"\r\n                                type=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"selectChecker(checker)\"\r\n                            >\r\n                                {{ checker.description }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'settings.shipping-calculator' | translate\">\r\n                <vdr-configurable-input\r\n                    class=\"card-span\"\r\n                    *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\r\n                    [operation]=\"selectedCalculator\"\r\n                    [operationDefinition]=\"selectedCalculatorDefinition\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    (remove)=\"selectedCalculator = null\"\r\n                    formControlName=\"calculator\"\r\n                ></vdr-configurable-input>\r\n                <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\" class=\"card-span\">\r\n                    <vdr-dropdown>\r\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            {{ 'common.select' | translate }}\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                            <button\r\n                                *ngFor=\"let calculator of calculators\"\r\n                                type=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"selectCalculator(calculator)\"\r\n                            >\r\n                                {{ calculator.description }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'settings.test-shipping-method' | translate\">\r\n                <vdr-test-order-builder\r\n                    class=\"card-span\"\r\n                    (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                ></vdr-test-order-builder>\r\n                <vdr-test-address-form\r\n                    (addressChange)=\"setTestAddress($event)\"\r\n                    class=\"mt-2\"\r\n                ></vdr-test-address-form>\r\n                <vdr-shipping-method-test-result\r\n                    class=\"mt-2\"\r\n                    [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                    [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\r\n                    [testDataUpdated]=\"testDataUpdated\"\r\n                    [testResult]=\"testResult$ | async\"\r\n                    (runTest)=\"runTest()\"\r\n                ></vdr-shipping-method-test-result>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ConfigurableInputComponent, selector: "vdr-configurable-input", inputs: ["operation", "operationDefinition", "readonly", "removable", "position"], outputs: ["remove"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select" }, { kind: "component", type: i1.LanguageSelectorComponent, selector: "vdr-language-selector", inputs: ["currentLanguageCode", "availableLanguageCodes", "disabled"], outputs: ["languageCodeChange"] }, { kind: "component", type: i1.RichTextEditorComponent, selector: "vdr-rich-text-editor", inputs: ["label", "readonly"] }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items", inputs: ["locationId"] }, { kind: "directive", type: i1.DisabledDirective, selector: "[vdrDisabled]", inputs: ["vdrDisabled"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: i5.TestOrderBuilderComponent, selector: "vdr-test-order-builder", outputs: ["orderLinesChange"] }, { kind: "component", type: i6.TestAddressFormComponent, selector: "vdr-test-address-form", outputs: ["addressChange"] }, { kind: "component", type: i7.ShippingMethodTestResultComponent, selector: "vdr-shipping-method-test-result", inputs: ["testResult", "okToRun", "testDataUpdated", "currencyCode"], outputs: ["runTest"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i8.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ShippingMethodDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-shipping-method-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left>\r\n            <vdr-language-selector\r\n                [disabled]=\"isNew$ | async\"\r\n                [availableLanguageCodes]=\"availableLanguages$ | async\"\r\n                [currentLanguageCode]=\"languageCode$ | async\"\r\n                (languageCodeChange)=\"setLanguage($event)\"\r\n            ></vdr-language-selector>\r\n        </vdr-ab-left>\r\n\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"shipping-method-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"\r\n                    detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                \"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    *vdrIfPermissions=\"updatePermission\"\r\n                    [disabled]=\"\r\n                        detailForm.pristine || detailForm.invalid || !selectedChecker || !selectedCalculator\r\n                    \"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n        <vdr-page-block>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            formControlName=\"name\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                            (input)=\"updateCode(entity?.code, $event.target.value)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        [label]=\"'common.code' | translate\"\r\n                        for=\"code\"\r\n                        [readOnlyToggle]=\"updatePermission | hasPermission\"\r\n                    >\r\n                        <input\r\n                            id=\"code\"\r\n                            type=\"text\"\r\n                            formControlName=\"code\"\r\n                            [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-rich-text-editor\r\n                        class=\"form-grid-span\"\r\n                        formControlName=\"description\"\r\n                        [readonly]=\"!(updatePermission | hasPermission)\"\r\n                        [label]=\"'common.description' | translate\"\r\n                    ></vdr-rich-text-editor>\r\n                    <vdr-form-field\r\n                        [label]=\"'settings.fulfillment-handler' | translate\"\r\n                        for=\"fulfillmentHandler\"\r\n                    >\r\n                        <select\r\n                            name=\"fulfillmentHandler\"\r\n                            formControlName=\"fulfillmentHandler\"\r\n                            [vdrDisabled]=\"!(updatePermission | hasPermission)\"\r\n                        >\r\n                            <option *ngFor=\"let handler of fulfillmentHandlers\" [value]=\"handler.code\">\r\n                                {{ handler.code }}: {{ handler.description }}\r\n                            </option>\r\n                        </select>\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n\r\n            <vdr-card\r\n                formGroupName=\"customFields\"\r\n                *ngIf=\"customFields.length\"\r\n                [title]=\"'common.custom-fields' | translate\"\r\n            >\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"ShippingMethod\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"shipping-method-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n\r\n            <vdr-card [title]=\"'settings.shipping-eligibility-checker' | translate\">\r\n                <vdr-configurable-input\r\n                    class=\"card-span\"\r\n                    *ngIf=\"selectedChecker && selectedCheckerDefinition\"\r\n                    [operation]=\"selectedChecker\"\r\n                    [operationDefinition]=\"selectedCheckerDefinition\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    (remove)=\"selectedChecker = null\"\r\n                    formControlName=\"checker\"\r\n                ></vdr-configurable-input>\r\n                <div *ngIf=\"!selectedChecker || !selectedCheckerDefinition\" class=\"card-span\">\r\n                    <vdr-dropdown>\r\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            {{ 'common.select' | translate }}\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                            <button\r\n                                *ngFor=\"let checker of checkers\"\r\n                                type=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"selectChecker(checker)\"\r\n                            >\r\n                                {{ checker.description }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'settings.shipping-calculator' | translate\">\r\n                <vdr-configurable-input\r\n                    class=\"card-span\"\r\n                    *ngIf=\"selectedCalculator && selectedCalculatorDefinition\"\r\n                    [operation]=\"selectedCalculator\"\r\n                    [operationDefinition]=\"selectedCalculatorDefinition\"\r\n                    [readonly]=\"!(updatePermission | hasPermission)\"\r\n                    (remove)=\"selectedCalculator = null\"\r\n                    formControlName=\"calculator\"\r\n                ></vdr-configurable-input>\r\n                <div *ngIf=\"!selectedCalculator || !selectedCalculatorDefinition\" class=\"card-span\">\r\n                    <vdr-dropdown>\r\n                        <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"plus\"></clr-icon>\r\n                            {{ 'common.select' | translate }}\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                            <button\r\n                                *ngFor=\"let calculator of calculators\"\r\n                                type=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"selectCalculator(calculator)\"\r\n                            >\r\n                                {{ calculator.description }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </vdr-card>\r\n            <vdr-card [title]=\"'settings.test-shipping-method' | translate\">\r\n                <vdr-test-order-builder\r\n                    class=\"card-span\"\r\n                    (orderLinesChange)=\"setTestOrderLines($event)\"\r\n                ></vdr-test-order-builder>\r\n                <vdr-test-address-form\r\n                    (addressChange)=\"setTestAddress($event)\"\r\n                    class=\"mt-2\"\r\n                ></vdr-test-address-form>\r\n                <vdr-shipping-method-test-result\r\n                    class=\"mt-2\"\r\n                    [currencyCode]=\"(activeChannel$ | async)?.currencyCode\"\r\n                    [okToRun]=\"allTestDataPresent() && testDataUpdated && detailForm.valid\"\r\n                    [testDataUpdated]=\"testDataUpdated\"\r\n                    [testResult]=\"testResult$ | async\"\r\n                    (runTest)=\"runTest()\"\r\n                ></vdr-shipping-method-test-result>\r\n            </vdr-card>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2.FormBuilder }, { type: i1.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,