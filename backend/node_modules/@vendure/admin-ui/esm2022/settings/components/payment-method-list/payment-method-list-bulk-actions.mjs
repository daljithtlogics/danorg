import { createBulkAssignToChannelAction, AssignPaymentMethodsToChannelDocument, RemovePaymentMethodsFromChannelDocument, createBulkDeleteAction, createBulkRemoveFromChannelAction, Permission, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { map } from 'rxjs/operators';
export const deletePaymentMethodsBulkAction = createBulkDeleteAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeletePaymentMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    shouldRetryItem: (response, item) => !!response.message,
    bulkDelete: (dataService, ids, retrying) => dataService.settings.deletePaymentMethods(ids, retrying).pipe(map(res => res.deletePaymentMethods)),
});
const ASSIGN_PAYMENT_METHODS_TO_CHANNEL = gql `
    mutation AssignPaymentMethodsToChannel($input: AssignPaymentMethodsToChannelInput!) {
        assignPaymentMethodsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_PAYMENT_METHODS_FROM_CHANNEL = gql `
    mutation RemovePaymentMethodsFromChannel($input: RemovePaymentMethodsFromChannelInput!) {
        removePaymentMethodsFromChannel(input: $input) {
            id
            name
        }
    }
`;
export const assignPaymentMethodsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdatePaymentMethod) ||
        userPermissions.includes(Permission.UpdateSettings),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, paymentMethodIds, channelId) => dataService
        .mutate(AssignPaymentMethodsToChannelDocument, {
        input: {
            channelId,
            paymentMethodIds,
        },
    })
        .pipe(map(res => res.assignPaymentMethodsToChannel)),
});
export const removePaymentMethodsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'payment-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeletePaymentMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, paymentMethodIds, channelId) => dataService
        .mutate(RemovePaymentMethodsFromChannelDocument, {
        input: {
            channelId,
            paymentMethodIds,
        },
    })
        .pipe(map(res => res.removePaymentMethodsFromChannel)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1tZXRob2QtbGlzdC1idWxrLWFjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NldHRpbmdzL3NyYy9jb21wb25lbnRzL3BheW1lbnQtbWV0aG9kLWxpc3QvcGF5bWVudC1tZXRob2QtbGlzdC1idWxrLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILCtCQUErQixFQUMvQixxQ0FBcUMsRUFDckMsdUNBQXVDLEVBQ3ZDLHNCQUFzQixFQUN0QixpQ0FBaUMsRUFHakMsVUFBVSxHQUNiLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxzQkFBc0IsQ0FFbEU7SUFDRSxRQUFRLEVBQUUscUJBQXFCO0lBQy9CLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQ2xDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO1FBQ3hELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSTtJQUM5QixlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU87SUFDdkQsVUFBVSxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUN2QyxXQUFXLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Q0FDMUcsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQ0FBaUMsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPNUMsQ0FBQztBQUVGLE1BQU0sbUNBQW1DLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBTzlDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSx1Q0FBdUMsR0FBRywrQkFBK0IsQ0FFcEY7SUFDRSxRQUFRLEVBQUUscUJBQXFCO0lBQy9CLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQ2xDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDO1FBQ3hELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSTtJQUM5QixtQkFBbUIsRUFBRSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUM5RCxXQUFXO1NBQ04sTUFBTSxDQUFDLHFDQUFxQyxFQUFFO1FBQzNDLEtBQUssRUFBRTtZQUNILFNBQVM7WUFDVCxnQkFBZ0I7U0FDbkI7S0FDSixDQUFDO1NBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0NBQy9ELENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHlDQUF5QyxHQUFHLGlDQUFpQyxDQUV4RjtJQUNFLFFBQVEsRUFBRSxxQkFBcUI7SUFDL0Isa0JBQWtCLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FDbEMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUM7UUFDeEQsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO0lBQ3ZELFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO0lBQzlCLHFCQUFxQixFQUFFLENBQUMsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQ2hFLFdBQVc7U0FDTixNQUFNLENBQUMsdUNBQXVDLEVBQUU7UUFDN0MsS0FBSyxFQUFFO1lBQ0gsU0FBUztZQUNULGdCQUFnQjtTQUNuQjtLQUNKLENBQUM7U0FDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7Q0FDakUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIGNyZWF0ZUJ1bGtBc3NpZ25Ub0NoYW5uZWxBY3Rpb24sXHJcbiAgICBBc3NpZ25QYXltZW50TWV0aG9kc1RvQ2hhbm5lbERvY3VtZW50LFxyXG4gICAgUmVtb3ZlUGF5bWVudE1ldGhvZHNGcm9tQ2hhbm5lbERvY3VtZW50LFxyXG4gICAgY3JlYXRlQnVsa0RlbGV0ZUFjdGlvbixcclxuICAgIGNyZWF0ZUJ1bGtSZW1vdmVGcm9tQ2hhbm5lbEFjdGlvbixcclxuICAgIEdldFBheW1lbnRNZXRob2RMaXN0UXVlcnksXHJcbiAgICBJdGVtT2YsXHJcbiAgICBQZXJtaXNzaW9uLFxyXG59IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBncWwgfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVQYXltZW50TWV0aG9kc0J1bGtBY3Rpb24gPSBjcmVhdGVCdWxrRGVsZXRlQWN0aW9uPFxyXG4gICAgSXRlbU9mPEdldFBheW1lbnRNZXRob2RMaXN0UXVlcnksICdwYXltZW50TWV0aG9kcyc+XHJcbj4oe1xyXG4gICAgbG9jYXRpb246ICdwYXltZW50LW1ldGhvZC1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogdXNlclBlcm1pc3Npb25zID0+XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uRGVsZXRlUGF5bWVudE1ldGhvZCkgfHxcclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5EZWxldGVTZXR0aW5ncyksXHJcbiAgICBnZXRJdGVtTmFtZTogaXRlbSA9PiBpdGVtLm5hbWUsXHJcbiAgICBzaG91bGRSZXRyeUl0ZW06IChyZXNwb25zZSwgaXRlbSkgPT4gISFyZXNwb25zZS5tZXNzYWdlLFxyXG4gICAgYnVsa0RlbGV0ZTogKGRhdGFTZXJ2aWNlLCBpZHMsIHJldHJ5aW5nKSA9PlxyXG4gICAgICAgIGRhdGFTZXJ2aWNlLnNldHRpbmdzLmRlbGV0ZVBheW1lbnRNZXRob2RzKGlkcywgcmV0cnlpbmcpLnBpcGUobWFwKHJlcyA9PiByZXMuZGVsZXRlUGF5bWVudE1ldGhvZHMpKSxcclxufSk7XHJcblxyXG5jb25zdCBBU1NJR05fUEFZTUVOVF9NRVRIT0RTX1RPX0NIQU5ORUwgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBBc3NpZ25QYXltZW50TWV0aG9kc1RvQ2hhbm5lbCgkaW5wdXQ6IEFzc2lnblBheW1lbnRNZXRob2RzVG9DaGFubmVsSW5wdXQhKSB7XHJcbiAgICAgICAgYXNzaWduUGF5bWVudE1ldGhvZHNUb0NoYW5uZWwoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgUkVNT1ZFX1BBWU1FTlRfTUVUSE9EU19GUk9NX0NIQU5ORUwgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBSZW1vdmVQYXltZW50TWV0aG9kc0Zyb21DaGFubmVsKCRpbnB1dDogUmVtb3ZlUGF5bWVudE1ldGhvZHNGcm9tQ2hhbm5lbElucHV0ISkge1xyXG4gICAgICAgIHJlbW92ZVBheW1lbnRNZXRob2RzRnJvbUNoYW5uZWwoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5leHBvcnQgY29uc3QgYXNzaWduUGF5bWVudE1ldGhvZHNUb0NoYW5uZWxCdWxrQWN0aW9uID0gY3JlYXRlQnVsa0Fzc2lnblRvQ2hhbm5lbEFjdGlvbjxcclxuICAgIEl0ZW1PZjxHZXRQYXltZW50TWV0aG9kTGlzdFF1ZXJ5LCAncGF5bWVudE1ldGhvZHMnPlxyXG4+KHtcclxuICAgIGxvY2F0aW9uOiAncGF5bWVudC1tZXRob2QtbGlzdCcsXHJcbiAgICByZXF1aXJlc1Blcm1pc3Npb246IHVzZXJQZXJtaXNzaW9ucyA9PlxyXG4gICAgICAgIHVzZXJQZXJtaXNzaW9ucy5pbmNsdWRlcyhQZXJtaXNzaW9uLlVwZGF0ZVBheW1lbnRNZXRob2QpIHx8XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uVXBkYXRlU2V0dGluZ3MpLFxyXG4gICAgZ2V0SXRlbU5hbWU6IGl0ZW0gPT4gaXRlbS5uYW1lLFxyXG4gICAgYnVsa0Fzc2lnblRvQ2hhbm5lbDogKGRhdGFTZXJ2aWNlLCBwYXltZW50TWV0aG9kSWRzLCBjaGFubmVsSWQpID0+XHJcbiAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgLm11dGF0ZShBc3NpZ25QYXltZW50TWV0aG9kc1RvQ2hhbm5lbERvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kSWRzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnBpcGUobWFwKHJlcyA9PiByZXMuYXNzaWduUGF5bWVudE1ldGhvZHNUb0NoYW5uZWwpKSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlUGF5bWVudE1ldGhvZHNGcm9tQ2hhbm5lbEJ1bGtBY3Rpb24gPSBjcmVhdGVCdWxrUmVtb3ZlRnJvbUNoYW5uZWxBY3Rpb248XHJcbiAgICBJdGVtT2Y8R2V0UGF5bWVudE1ldGhvZExpc3RRdWVyeSwgJ3BheW1lbnRNZXRob2RzJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3BheW1lbnQtbWV0aG9kLWxpc3QnLFxyXG4gICAgcmVxdWlyZXNQZXJtaXNzaW9uOiB1c2VyUGVybWlzc2lvbnMgPT5cclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5EZWxldGVQYXltZW50TWV0aG9kKSB8fFxyXG4gICAgICAgIHVzZXJQZXJtaXNzaW9ucy5pbmNsdWRlcyhQZXJtaXNzaW9uLkRlbGV0ZVNldHRpbmdzKSxcclxuICAgIGdldEl0ZW1OYW1lOiBpdGVtID0+IGl0ZW0ubmFtZSxcclxuICAgIGJ1bGtSZW1vdmVGcm9tQ2hhbm5lbDogKGRhdGFTZXJ2aWNlLCBwYXltZW50TWV0aG9kSWRzLCBjaGFubmVsSWQpID0+XHJcbiAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgLm11dGF0ZShSZW1vdmVQYXltZW50TWV0aG9kc0Zyb21DaGFubmVsRG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGlucHV0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbElkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2RJZHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocmVzID0+IHJlcy5yZW1vdmVQYXltZW50TWV0aG9kc0Zyb21DaGFubmVsKSksXHJcbn0pO1xyXG4iXX0=