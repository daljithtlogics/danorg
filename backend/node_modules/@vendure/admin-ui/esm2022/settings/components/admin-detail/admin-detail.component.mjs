import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';
import { ADMINISTRATOR_FRAGMENT, getCustomFieldsDefaults, Permission, TypedBaseDetailComponent, } from '@vendure/admin-ui/core';
import { CUSTOMER_ROLE_CODE } from '@vendure/common/lib/shared-constants';
import { notNullOrUndefined } from '@vendure/common/lib/shared-utils';
import { gql } from 'apollo-angular';
import { mergeMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
import * as i4 from "@ng-select/ng-select";
import * as i5 from "../permission-grid/permission-grid.component";
import * as i6 from "@ngx-translate/core";
export const GET_ADMINISTRATOR_DETAIL = gql `
    query GetAdministratorDetail($id: ID!) {
        administrator(id: $id) {
            ...Administrator
        }
    }
    ${ADMINISTRATOR_FRAGMENT}
`;
export class AdminDetailComponent extends TypedBaseDetailComponent {
    getAvailableChannels() {
        return Object.values(this.selectedRolePermissions);
    }
    constructor(changeDetector, dataService, formBuilder, notificationService) {
        super();
        this.changeDetector = changeDetector;
        this.dataService = dataService;
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.customFields = this.getCustomFieldConfig('Administrator');
        this.detailForm = this.formBuilder.group({
            emailAddress: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            password: [''],
            roles: [
                [],
            ],
            customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),
        });
        this.selectedRoles = [];
        this.selectedRolePermissions = {};
        this.selectedChannelId = null;
    }
    ngOnInit() {
        this.init();
        this.allRoles$ = this.dataService.administrator
            .getRoles(999)
            .mapStream(item => item.roles.items.filter(i => i.code !== CUSTOMER_ROLE_CODE));
        this.dataService.client.userStatus().single$.subscribe(({ userStatus }) => {
            if (!userStatus.permissions.includes(Permission.CreateAdministrator) &&
                !userStatus.permissions.includes(Permission.UpdateAdministrator)) {
                const rolesSelect = this.detailForm.get('roles');
                if (rolesSelect) {
                    rolesSelect.disable();
                }
            }
        });
        this.permissionDefinitions = this.serverConfigService.getPermissionDefinitions();
    }
    ngOnDestroy() {
        this.destroy();
    }
    rolesChanged(roles) {
        this.buildPermissionsMap();
    }
    getPermissionsForSelectedChannel() {
        function getActivePermissions(input) {
            return Object.entries(input)
                .filter(([permission, active]) => active)
                .map(([permission, active]) => permission);
        }
        if (this.selectedChannelId) {
            const selectedChannel = this.selectedRolePermissions[this.selectedChannelId];
            if (selectedChannel) {
                const permissionMap = this.selectedRolePermissions[this.selectedChannelId].permissions;
                return getActivePermissions(permissionMap);
            }
        }
        const channels = Object.values(this.selectedRolePermissions);
        if (0 < channels.length) {
            this.selectedChannelId = channels[0].channelId;
            return getActivePermissions(channels[0].permissions);
        }
        return [];
    }
    create() {
        const { emailAddress, firstName, lastName, password, customFields, roles } = this.detailForm.value;
        if (!emailAddress || !firstName || !lastName || !password) {
            return;
        }
        const administrator = {
            emailAddress,
            firstName,
            lastName,
            password,
            customFields,
            roleIds: roles?.map(role => role.id).filter(notNullOrUndefined) ?? [],
        };
        this.dataService.administrator.createAdministrator(administrator).subscribe(data => {
            this.notificationService.success(_('common.notify-create-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
            this.router.navigate(['../', data.createAdministrator.id], { relativeTo: this.route });
        }, err => {
            this.notificationService.error(_('common.notify-create-error'), {
                entity: 'Administrator',
            });
        });
    }
    save() {
        this.entity$
            .pipe(take(1), mergeMap(({ id }) => {
            const formValue = this.detailForm.value;
            const administrator = {
                id,
                emailAddress: formValue.emailAddress,
                firstName: formValue.firstName,
                lastName: formValue.lastName,
                password: formValue.password,
                customFields: formValue.customFields,
                roleIds: formValue.roles?.map(role => role.id),
            };
            return this.dataService.administrator.updateAdministrator(administrator);
        }))
            .subscribe(data => {
            this.notificationService.success(_('common.notify-update-success'), {
                entity: 'Administrator',
            });
            this.detailForm.markAsPristine();
            this.changeDetector.markForCheck();
        }, err => {
            this.notificationService.error(_('common.notify-update-error'), {
                entity: 'Administrator',
            });
        });
    }
    setFormValues(entity, languageCode) {
        this.detailForm.patchValue({
            emailAddress: entity.emailAddress,
            firstName: entity.firstName,
            lastName: entity.lastName,
            roles: entity.user.roles,
        });
        if (this.customFields.length) {
            this.setCustomFieldFormValues(this.customFields, this.detailForm.get(['customFields']), entity);
        }
        const passwordControl = this.detailForm.get('password');
        if (passwordControl) {
            if (!entity.id) {
                passwordControl.setValidators([Validators.required]);
            }
            else {
                passwordControl.setValidators([]);
            }
        }
        this.buildPermissionsMap();
    }
    buildPermissionsMap() {
        const permissionsControl = this.detailForm.get('roles');
        if (permissionsControl) {
            const roles = permissionsControl.value;
            const channelIdPermissionsMap = new Map();
            const channelIdCodeMap = new Map();
            for (const role of roles ?? []) {
                for (const channel of role.channels) {
                    const channelPermissions = channelIdPermissionsMap.get(channel.id);
                    const permissionSet = channelPermissions || new Set();
                    role.permissions.forEach(p => permissionSet.add(p));
                    channelIdPermissionsMap.set(channel.id, permissionSet);
                    channelIdCodeMap.set(channel.id, channel.code);
                }
            }
            this.selectedRolePermissions = {};
            for (const channelId of Array.from(channelIdPermissionsMap.keys())) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                const permissionSet = channelIdPermissionsMap.get(channelId);
                const permissionsHash = {};
                for (const def of this.serverConfigService.getPermissionDefinitions()) {
                    permissionsHash[def.name] = permissionSet.has(def.name);
                }
                this.selectedRolePermissions[channelId] = {
                    /* eslint-disable @typescript-eslint/no-non-null-assertion */
                    channelId,
                    channelCode: channelIdCodeMap.get(channelId),
                    permissions: permissionsHash,
                    /* eslint-enable @typescript-eslint/no-non-null-assertion */
                };
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AdminDetailComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DataService }, { token: i2.FormBuilder }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: AdminDetailComponent, selector: "vdr-admin-detail", usesInheritance: true, ngImport: i0, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left> </vdr-ab-left>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n        <vdr-page-block>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field\r\n                        [label]=\"'settings.email-address-or-identifier' | translate\"\r\n                        for=\"emailAddress\"\r\n                        class=\"form-grid-span\"\r\n                    >\r\n                        <input\r\n                            id=\"emailAddress\"\r\n                            type=\"text\"\r\n                            formControlName=\"emailAddress\"\r\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n                        <input\r\n                            id=\"firstName\"\r\n                            type=\"text\"\r\n                            formControlName=\"firstName\"\r\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n                        <input\r\n                            id=\"lastName\"\r\n                            type=\"text\"\r\n                            formControlName=\"lastName\"\r\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        *ngIf=\"isNew$ | async\"\r\n                        [label]=\"'settings.password' | translate\"\r\n                        for=\"password\"\r\n                    >\r\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        *ngIf=\"\r\n                            !(isNew$ | async) &&\r\n                            (['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\r\n                        \"\r\n                        [label]=\"'settings.password' | translate\"\r\n                        for=\"password\"\r\n                        [readOnlyToggle]=\"true\"\r\n                    >\r\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n\r\n            <vdr-card\r\n                formGroupName=\"customFields\"\r\n                *ngIf=\"customFields.length\"\r\n                [title]=\"'common.custom-fields' | translate\"\r\n            >\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Administrator\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"administrator-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n    <vdr-page-block>\r\n        <vdr-card [title]=\"'settings.roles' | translate\">\r\n            <ng-select\r\n                [items]=\"allRoles$ | async\"\r\n                [multiple]=\"true\"\r\n                [hideSelected]=\"true\"\r\n                formControlName=\"roles\"\r\n                (change)=\"rolesChanged($event)\"\r\n                bindLabel=\"description\"\r\n            ></ng-select>\r\n\r\n            <ul class=\"nav mt-2\" role=\"tablist\">\r\n                <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\r\n                    <button\r\n                        [id]=\"channel.channelId\"\r\n                        (click)=\"selectedChannelId = channel.channelId\"\r\n                        class=\"btn btn-link nav-link\"\r\n                        [class.active]=\"selectedChannelId === channel.channelId\"\r\n                        [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\r\n                        type=\"button\"\r\n                    >\r\n                        {{ channel.channelCode | channelCodeToLabel | translate }}\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n            <vdr-permission-grid\r\n                [activePermissions]=\"getPermissionsForSelectedChannel()\"\r\n                [permissionDefinitions]=\"permissionDefinitions\"\r\n                [readonly]=\"true\"\r\n            ></vdr-permission-grid>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</form>\r\n", styles: ["ul.nav{overflow-x:auto;overflow-y:hidden}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "component", type: i4.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.FormFieldComponent, selector: "vdr-form-field", inputs: ["label", "for", "tooltip", "errors", "readOnlyToggle"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select" }, { kind: "directive", type: i1.IfPermissionsDirective, selector: "[vdrIfPermissions]", inputs: ["vdrIfPermissions", "vdrIfPermissionsElse"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items", inputs: ["locationId"] }, { kind: "component", type: i1.TabbedCustomFieldsComponent, selector: "vdr-tabbed-custom-fields", inputs: ["entityName", "customFields", "customFieldsFormGroup", "readonly", "compact", "showLabel"] }, { kind: "component", type: i1.CustomDetailComponentHostComponent, selector: "vdr-custom-detail-component-host", inputs: ["locationId", "entity$", "detailForm"] }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: i1.PageEntityInfoComponent, selector: "vdr-page-entity-info", inputs: ["entity"] }, { kind: "component", type: i1.PageDetailLayoutComponent, selector: "vdr-page-detail-layout" }, { kind: "component", type: i1.PageDetailSidebarComponent, selector: "vdr-page-detail-sidebar" }, { kind: "component", type: i1.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "component", type: i5.PermissionGridComponent, selector: "vdr-permission-grid", inputs: ["permissionDefinitions", "activePermissions", "readonly"], outputs: ["permissionChange"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.ChannelLabelPipe, name: "channelCodeToLabel" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AdminDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-admin-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-block>\r\n    <vdr-action-bar>\r\n        <vdr-ab-left> </vdr-ab-left>\r\n        <vdr-ab-right>\r\n            <vdr-action-bar-items locationId=\"administrator-detail\"></vdr-action-bar-items>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                *ngIf=\"isNew$ | async; else updateButton\"\r\n                (click)=\"create()\"\r\n                [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n            >\r\n                {{ 'common.create' | translate }}\r\n            </button>\r\n            <ng-template #updateButton>\r\n                <button\r\n                    class=\"btn btn-primary\"\r\n                    (click)=\"save()\"\r\n                    *vdrIfPermissions=\"'UpdateAdministrator'\"\r\n                    [disabled]=\"detailForm.invalid || detailForm.pristine\"\r\n                >\r\n                    {{ 'common.update' | translate }}\r\n                </button>\r\n            </ng-template>\r\n        </vdr-ab-right>\r\n    </vdr-action-bar>\r\n</vdr-page-block>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-page-detail-layout>\r\n        <vdr-page-detail-sidebar>\r\n            <vdr-card *ngIf=\"entity$ | async as entity\">\r\n                <vdr-page-entity-info [entity]=\"entity\" />\r\n            </vdr-card>\r\n        </vdr-page-detail-sidebar>\r\n        <vdr-page-block>\r\n            <vdr-card>\r\n                <div class=\"form-grid\">\r\n                    <vdr-form-field\r\n                        [label]=\"'settings.email-address-or-identifier' | translate\"\r\n                        for=\"emailAddress\"\r\n                        class=\"form-grid-span\"\r\n                    >\r\n                        <input\r\n                            id=\"emailAddress\"\r\n                            type=\"text\"\r\n                            formControlName=\"emailAddress\"\r\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'settings.first-name' | translate\" for=\"firstName\">\r\n                        <input\r\n                            id=\"firstName\"\r\n                            type=\"text\"\r\n                            formControlName=\"firstName\"\r\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field [label]=\"'settings.last-name' | translate\" for=\"lastName\">\r\n                        <input\r\n                            id=\"lastName\"\r\n                            type=\"text\"\r\n                            formControlName=\"lastName\"\r\n                            [readonly]=\"!(['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\"\r\n                        />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        *ngIf=\"isNew$ | async\"\r\n                        [label]=\"'settings.password' | translate\"\r\n                        for=\"password\"\r\n                    >\r\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n                    </vdr-form-field>\r\n                    <vdr-form-field\r\n                        *ngIf=\"\r\n                            !(isNew$ | async) &&\r\n                            (['CreateAdministrator', 'UpdateAdministrator'] | hasPermission)\r\n                        \"\r\n                        [label]=\"'settings.password' | translate\"\r\n                        for=\"password\"\r\n                        [readOnlyToggle]=\"true\"\r\n                    >\r\n                        <input id=\"password\" type=\"password\" formControlName=\"password\" />\r\n                    </vdr-form-field>\r\n                </div>\r\n            </vdr-card>\r\n\r\n            <vdr-card\r\n                formGroupName=\"customFields\"\r\n                *ngIf=\"customFields.length\"\r\n                [title]=\"'common.custom-fields' | translate\"\r\n            >\r\n                <vdr-tabbed-custom-fields\r\n                    entityName=\"Administrator\"\r\n                    [customFields]=\"customFields\"\r\n                    [customFieldsFormGroup]=\"detailForm.get('customFields')\"\r\n                ></vdr-tabbed-custom-fields>\r\n            </vdr-card>\r\n            <vdr-custom-detail-component-host\r\n                locationId=\"administrator-detail\"\r\n                [entity$]=\"entity$\"\r\n                [detailForm]=\"detailForm\"\r\n            ></vdr-custom-detail-component-host>\r\n        </vdr-page-block>\r\n    </vdr-page-detail-layout>\r\n    <vdr-page-block>\r\n        <vdr-card [title]=\"'settings.roles' | translate\">\r\n            <ng-select\r\n                [items]=\"allRoles$ | async\"\r\n                [multiple]=\"true\"\r\n                [hideSelected]=\"true\"\r\n                formControlName=\"roles\"\r\n                (change)=\"rolesChanged($event)\"\r\n                bindLabel=\"description\"\r\n            ></ng-select>\r\n\r\n            <ul class=\"nav mt-2\" role=\"tablist\">\r\n                <li role=\"presentation\" class=\"nav-item\" *ngFor=\"let channel of getAvailableChannels()\">\r\n                    <button\r\n                        [id]=\"channel.channelId\"\r\n                        (click)=\"selectedChannelId = channel.channelId\"\r\n                        class=\"btn btn-link nav-link\"\r\n                        [class.active]=\"selectedChannelId === channel.channelId\"\r\n                        [attr.aria-selected]=\"selectedChannelId === channel.channelId\"\r\n                        type=\"button\"\r\n                    >\r\n                        {{ channel.channelCode | channelCodeToLabel | translate }}\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n            <vdr-permission-grid\r\n                [activePermissions]=\"getPermissionsForSelectedChannel()\"\r\n                [permissionDefinitions]=\"permissionDefinitions\"\r\n                [readonly]=\"true\"\r\n            ></vdr-permission-grid>\r\n        </vdr-card>\r\n    </vdr-page-block>\r\n</form>\r\n", styles: ["ul.nav{overflow-x:auto;overflow-y:hidden}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DataService }, { type: i2.FormBuilder }, { type: i1.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,