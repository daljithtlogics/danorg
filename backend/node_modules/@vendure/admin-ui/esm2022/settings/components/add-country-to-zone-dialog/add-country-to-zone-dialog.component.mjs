import { ChangeDetectionStrategy, Component } from '@angular/core';
import { GetCountryListDocument, GetZoneMembersDocument, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { map, withLatestFrom } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "../zone-member-list/zone-member-list.component";
import * as i3 from "@angular/common";
import * as i4 from "@ngx-translate/core";
export const GET_ZONE_MEMBERS = gql `
    query GetZoneMembers($zoneId: ID!) {
        zone(id: $zoneId) {
            id
            createdAt
            updatedAt
            name
            members {
                createdAt
                updatedAt
                id
                name
                code
                enabled
            }
        }
    }
`;
export class AddCountryToZoneDialogComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.selectedMemberIds = [];
    }
    ngOnInit() {
        this.currentMembers$ = this.dataService
            .query(GetZoneMembersDocument, { zoneId: this.zoneId })
            .mapSingle(({ zone }) => zone?.members ?? []);
        this.availableCountries$ = this.dataService
            .query(GetCountryListDocument, {
            options: { take: 999 },
        })
            .mapStream(data => data.countries.items)
            .pipe(withLatestFrom(this.currentMembers$), map(([countries, currentMembers]) => countries.filter(c => !currentMembers.find(cm => cm.id === c.id))));
    }
    cancel() {
        this.resolveWith();
    }
    add() {
        this.resolveWith(this.selectedMemberIds);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AddCountryToZoneDialogComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: AddCountryToZoneDialogComponent, selector: "vdr-add-country-to-zone-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\r\n\r\n<vdr-zone-member-list\r\n    [members]=\"availableCountries$ | async\"\r\n    [selectedMemberIds]=\"selectedMemberIds\"\r\n    (selectionChange)=\"selectedMemberIds = $event\"\r\n>\r\n</vdr-zone-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\r\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\r\n    </button>\r\n</ng-template>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i1.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i1.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i2.ZoneMemberListComponent, selector: "vdr-zone-member-list", inputs: ["locationId", "members", "selectedMemberIds", "activeZone"], outputs: ["selectionChange"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: AddCountryToZoneDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-add-country-to-zone-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}</ng-template>\r\n\r\n<vdr-zone-member-list\r\n    [members]=\"availableCountries$ | async\"\r\n    [selectedMemberIds]=\"selectedMemberIds\"\r\n    (selectionChange)=\"selectedMemberIds = $event\"\r\n>\r\n</vdr-zone-member-list>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"add()\" [disabled]=\"!selectedMemberIds.length\" class=\"btn btn-primary\">\r\n        {{ 'settings.add-countries-to-zone' | translate: { zoneName: zoneName } }}\r\n    </button>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.DataService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWNvdW50cnktdG8tem9uZS1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXR0aW5ncy9zcmMvY29tcG9uZW50cy9hZGQtY291bnRyeS10by16b25lLWRpYWxvZy9hZGQtY291bnRyeS10by16b25lLWRpYWxvZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NldHRpbmdzL3NyYy9jb21wb25lbnRzL2FkZC1jb3VudHJ5LXRvLXpvbmUtZGlhbG9nL2FkZC1jb3VudHJ5LXRvLXpvbmUtZGlhbG9nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUdILHNCQUFzQixFQUd0QixzQkFBc0IsR0FHekIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBRXJELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQmxDLENBQUM7QUFRRixNQUFNLE9BQU8sK0JBQStCO0lBUXhDLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBRjVDLHNCQUFpQixHQUFhLEVBQUUsQ0FBQztJQUVjLENBQUM7SUFFaEQsUUFBUTtRQUNKLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVc7YUFDbEMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUN0RCxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsV0FBVzthQUN0QyxLQUFLLENBQUMsc0JBQXNCLEVBQUU7WUFDM0IsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtTQUN6QixDQUFDO2FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7YUFDdkMsSUFBSSxDQUNELGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQ3BDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUUsQ0FDaEMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3BFLENBQ0osQ0FBQztJQUNWLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxHQUFHO1FBQ0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM3QyxDQUFDOzhHQWpDUSwrQkFBK0I7a0dBQS9CLCtCQUErQixzRUN4QzVDLGt0QkFlQTs7MkZEeUJhLCtCQUErQjtrQkFOM0MsU0FBUzsrQkFDSSxnQ0FBZ0MsbUJBR3pCLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICAgIERhdGFTZXJ2aWNlLFxyXG4gICAgRGlhbG9nLFxyXG4gICAgR2V0Q291bnRyeUxpc3REb2N1bWVudCxcclxuICAgIEdldENvdW50cnlMaXN0UXVlcnksXHJcbiAgICBHZXRab25lTGlzdFF1ZXJ5LFxyXG4gICAgR2V0Wm9uZU1lbWJlcnNEb2N1bWVudCxcclxuICAgIEdldFpvbmVNZW1iZXJzUXVlcnksXHJcbiAgICBJdGVtT2YsXHJcbn0gZnJvbSAnQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XHJcbmltcG9ydCB7IGdxbCB9IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEdFVF9aT05FX01FTUJFUlMgPSBncWxgXHJcbiAgICBxdWVyeSBHZXRab25lTWVtYmVycygkem9uZUlkOiBJRCEpIHtcclxuICAgICAgICB6b25lKGlkOiAkem9uZUlkKSB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIGNyZWF0ZWRBdFxyXG4gICAgICAgICAgICB1cGRhdGVkQXRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgICAgICBtZW1iZXJzIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZWRBdFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlZEF0XHJcbiAgICAgICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgICAgICAgICAgY29kZVxyXG4gICAgICAgICAgICAgICAgZW5hYmxlZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Zkci1hZGQtY291bnRyeS10by16b25lLWRpYWxvZycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vYWRkLWNvdW50cnktdG8tem9uZS1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vYWRkLWNvdW50cnktdG8tem9uZS1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWRkQ291bnRyeVRvWm9uZURpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIERpYWxvZzxzdHJpbmdbXT4sIE9uSW5pdCB7XHJcbiAgICByZXNvbHZlV2l0aDogKHJlc3VsdD86IHN0cmluZ1tdKSA9PiB2b2lkO1xyXG4gICAgem9uZU5hbWU6IHN0cmluZztcclxuICAgIHpvbmVJZDogc3RyaW5nO1xyXG4gICAgY3VycmVudE1lbWJlcnMkOiBPYnNlcnZhYmxlPE5vbk51bGxhYmxlPEdldFpvbmVNZW1iZXJzUXVlcnlbJ3pvbmUnXT5bJ21lbWJlcnMnXT47XHJcbiAgICBhdmFpbGFibGVDb3VudHJpZXMkOiBPYnNlcnZhYmxlPEFycmF5PEl0ZW1PZjxHZXRDb3VudHJ5TGlzdFF1ZXJ5LCAnY291bnRyaWVzJz4+PjtcclxuICAgIHNlbGVjdGVkTWVtYmVySWRzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY3VycmVudE1lbWJlcnMkID0gdGhpcy5kYXRhU2VydmljZVxyXG4gICAgICAgICAgICAucXVlcnkoR2V0Wm9uZU1lbWJlcnNEb2N1bWVudCwgeyB6b25lSWQ6IHRoaXMuem9uZUlkIH0pXHJcbiAgICAgICAgICAgIC5tYXBTaW5nbGUoKHsgem9uZSB9KSA9PiB6b25lPy5tZW1iZXJzID8/IFtdKTtcclxuICAgICAgICB0aGlzLmF2YWlsYWJsZUNvdW50cmllcyQgPSB0aGlzLmRhdGFTZXJ2aWNlXHJcbiAgICAgICAgICAgIC5xdWVyeShHZXRDb3VudHJ5TGlzdERvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7IHRha2U6IDk5OSB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAubWFwU3RyZWFtKGRhdGEgPT4gZGF0YS5jb3VudHJpZXMuaXRlbXMpXHJcbiAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAgICAgd2l0aExhdGVzdEZyb20odGhpcy5jdXJyZW50TWVtYmVycyQpLFxyXG4gICAgICAgICAgICAgICAgbWFwKChbY291bnRyaWVzLCBjdXJyZW50TWVtYmVyc10pID0+XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzLmZpbHRlcihjID0+ICFjdXJyZW50TWVtYmVycy5maW5kKGNtID0+IGNtLmlkID09PSBjLmlkKSksXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnJlc29sdmVXaXRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkKCkge1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZVdpdGgodGhpcy5zZWxlY3RlZE1lbWJlcklkcyk7XHJcbiAgICB9XHJcbn1cclxuIiwiPG5nLXRlbXBsYXRlIHZkckRpYWxvZ1RpdGxlPnt7ICdzZXR0aW5ncy5hZGQtY291bnRyaWVzLXRvLXpvbmUnIHwgdHJhbnNsYXRlOiB7IHpvbmVOYW1lOiB6b25lTmFtZSB9IH19PC9uZy10ZW1wbGF0ZT5cclxuXHJcbjx2ZHItem9uZS1tZW1iZXItbGlzdFxyXG4gICAgW21lbWJlcnNdPVwiYXZhaWxhYmxlQ291bnRyaWVzJCB8IGFzeW5jXCJcclxuICAgIFtzZWxlY3RlZE1lbWJlcklkc109XCJzZWxlY3RlZE1lbWJlcklkc1wiXHJcbiAgICAoc2VsZWN0aW9uQ2hhbmdlKT1cInNlbGVjdGVkTWVtYmVySWRzID0gJGV2ZW50XCJcclxuPlxyXG48L3Zkci16b25lLW1lbWJlci1saXN0PlxyXG5cclxuPG5nLXRlbXBsYXRlIHZkckRpYWxvZ0J1dHRvbnM+XHJcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0blwiIChjbGljayk9XCJjYW5jZWwoKVwiPnt7ICdjb21tb24uY2FuY2VsJyB8IHRyYW5zbGF0ZSB9fTwvYnV0dG9uPlxyXG4gICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgKGNsaWNrKT1cImFkZCgpXCIgW2Rpc2FibGVkXT1cIiFzZWxlY3RlZE1lbWJlcklkcy5sZW5ndGhcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPlxyXG4gICAgICAgIHt7ICdzZXR0aW5ncy5hZGQtY291bnRyaWVzLXRvLXpvbmUnIHwgdHJhbnNsYXRlOiB7IHpvbmVOYW1lOiB6b25lTmFtZSB9IH19XHJcbiAgICA8L2J1dHRvbj5cclxuPC9uZy10ZW1wbGF0ZT5cclxuIl19