import { createBulkAssignToChannelAction, createBulkDeleteAction, createBulkRemoveFromChannelAction, Permission, AssignShippingMethodsToChannelDocument, RemoveShippingMethodsFromChannelDocument, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { map } from 'rxjs/operators';
export const deleteShippingMethodsBulkAction = createBulkDeleteAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteShippingMethod),
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.shippingMethod.deleteShippingMethods(ids).pipe(map(res => res.deleteShippingMethods)),
});
const ASSIGN_SHIPPING_METHODS_TO_CHANNEL = gql `
    mutation AssignShippingMethodsToChannel($input: AssignShippingMethodsToChannelInput!) {
        assignShippingMethodsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_SHIPPING_METHODS_FROM_CHANNEL = gql `
    mutation RemoveShippingMethodsFromChannel($input: RemoveShippingMethodsFromChannelInput!) {
        removeShippingMethodsFromChannel(input: $input) {
            id
            name
        }
    }
`;
export const assignShippingMethodsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.UpdateShippingMethod) ||
        userPermissions.includes(Permission.UpdateSettings),
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, shippingMethodIds, channelId) => dataService
        .mutate(AssignShippingMethodsToChannelDocument, {
        input: {
            channelId,
            shippingMethodIds,
        },
    })
        .pipe(map(res => res.assignShippingMethodsToChannel)),
});
export const removeShippingMethodsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'shipping-method-list',
    requiresPermission: userPermissions => userPermissions.includes(Permission.DeleteShippingMethod) ||
        userPermissions.includes(Permission.DeleteSettings),
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, shippingMethodIds, channelId) => dataService
        .mutate(RemoveShippingMethodsFromChannelDocument, {
        input: {
            channelId,
            shippingMethodIds,
        },
    })
        .pipe(map(res => res.removeShippingMethodsFromChannel)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpcHBpbmctbWV0aG9kLWxpc3QtYnVsay1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXR0aW5ncy9zcmMvY29tcG9uZW50cy9zaGlwcGluZy1tZXRob2QtbGlzdC9zaGlwcGluZy1tZXRob2QtbGlzdC1idWxrLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILCtCQUErQixFQUMvQixzQkFBc0IsRUFDdEIsaUNBQWlDLEVBSWpDLFVBQVUsRUFDVixzQ0FBc0MsRUFDdEMsd0NBQXdDLEdBQzNDLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyxzQkFBc0IsQ0FFbkU7SUFDRSxRQUFRLEVBQUUsc0JBQXNCO0lBQ2hDLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUM7SUFDaEcsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUk7SUFDOUIsVUFBVSxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQzdCLFdBQVcsQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0NBQ3hHLENBQUMsQ0FBQztBQUVILE1BQU0sa0NBQWtDLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBTzdDLENBQUM7QUFFRixNQUFNLG9DQUFvQyxHQUFHLEdBQUcsQ0FBQTs7Ozs7OztDQU8vQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUcsK0JBQStCLENBRXJGO0lBQ0UsUUFBUSxFQUFFLHNCQUFzQjtJQUNoQyxrQkFBa0IsRUFBRSxlQUFlLENBQUMsRUFBRSxDQUNsQyxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztRQUN6RCxlQUFlLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUM7SUFDdkQsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUk7SUFDOUIsbUJBQW1CLEVBQUUsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FDL0QsV0FBVztTQUNOLE1BQU0sQ0FBQyxzQ0FBc0MsRUFBRTtRQUM1QyxLQUFLLEVBQUU7WUFDSCxTQUFTO1lBQ1QsaUJBQWlCO1NBQ3BCO0tBQ0osQ0FBQztTQUNELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztDQUNoRSxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSwwQ0FBMEMsR0FBRyxpQ0FBaUMsQ0FFekY7SUFDRSxRQUFRLEVBQUUsc0JBQXNCO0lBQ2hDLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQ2xDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDO1FBQ3pELGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQztJQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSTtJQUM5QixxQkFBcUIsRUFBRSxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUNqRSxXQUFXO1NBQ04sTUFBTSxDQUFDLHdDQUF3QyxFQUFFO1FBQzlDLEtBQUssRUFBRTtZQUNILFNBQVM7WUFDVCxpQkFBaUI7U0FDcEI7S0FDSixDQUFDO1NBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0NBQ2xFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBjcmVhdGVCdWxrQXNzaWduVG9DaGFubmVsQWN0aW9uLFxyXG4gICAgY3JlYXRlQnVsa0RlbGV0ZUFjdGlvbixcclxuICAgIGNyZWF0ZUJ1bGtSZW1vdmVGcm9tQ2hhbm5lbEFjdGlvbixcclxuICAgIEdldFNoaXBwaW5nTWV0aG9kTGlzdFF1ZXJ5LFxyXG4gICAgR2V0Um9sZXNRdWVyeSxcclxuICAgIEl0ZW1PZixcclxuICAgIFBlcm1pc3Npb24sXHJcbiAgICBBc3NpZ25TaGlwcGluZ01ldGhvZHNUb0NoYW5uZWxEb2N1bWVudCxcclxuICAgIFJlbW92ZVNoaXBwaW5nTWV0aG9kc0Zyb21DaGFubmVsRG9jdW1lbnQsXHJcbn0gZnJvbSAnQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XHJcbmltcG9ydCB7IGdxbCB9IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZVNoaXBwaW5nTWV0aG9kc0J1bGtBY3Rpb24gPSBjcmVhdGVCdWxrRGVsZXRlQWN0aW9uPFxyXG4gICAgSXRlbU9mPEdldFNoaXBwaW5nTWV0aG9kTGlzdFF1ZXJ5LCAnc2hpcHBpbmdNZXRob2RzJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3NoaXBwaW5nLW1ldGhvZC1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogdXNlclBlcm1pc3Npb25zID0+IHVzZXJQZXJtaXNzaW9ucy5pbmNsdWRlcyhQZXJtaXNzaW9uLkRlbGV0ZVNoaXBwaW5nTWV0aG9kKSxcclxuICAgIGdldEl0ZW1OYW1lOiBpdGVtID0+IGl0ZW0ubmFtZSxcclxuICAgIGJ1bGtEZWxldGU6IChkYXRhU2VydmljZSwgaWRzKSA9PlxyXG4gICAgICAgIGRhdGFTZXJ2aWNlLnNoaXBwaW5nTWV0aG9kLmRlbGV0ZVNoaXBwaW5nTWV0aG9kcyhpZHMpLnBpcGUobWFwKHJlcyA9PiByZXMuZGVsZXRlU2hpcHBpbmdNZXRob2RzKSksXHJcbn0pO1xyXG5cclxuY29uc3QgQVNTSUdOX1NISVBQSU5HX01FVEhPRFNfVE9fQ0hBTk5FTCA9IGdxbGBcclxuICAgIG11dGF0aW9uIEFzc2lnblNoaXBwaW5nTWV0aG9kc1RvQ2hhbm5lbCgkaW5wdXQ6IEFzc2lnblNoaXBwaW5nTWV0aG9kc1RvQ2hhbm5lbElucHV0ISkge1xyXG4gICAgICAgIGFzc2lnblNoaXBwaW5nTWV0aG9kc1RvQ2hhbm5lbChpbnB1dDogJGlucHV0KSB7XHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICAgIG5hbWVcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBSRU1PVkVfU0hJUFBJTkdfTUVUSE9EU19GUk9NX0NIQU5ORUwgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBSZW1vdmVTaGlwcGluZ01ldGhvZHNGcm9tQ2hhbm5lbCgkaW5wdXQ6IFJlbW92ZVNoaXBwaW5nTWV0aG9kc0Zyb21DaGFubmVsSW5wdXQhKSB7XHJcbiAgICAgICAgcmVtb3ZlU2hpcHBpbmdNZXRob2RzRnJvbUNoYW5uZWwoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5leHBvcnQgY29uc3QgYXNzaWduU2hpcHBpbmdNZXRob2RzVG9DaGFubmVsQnVsa0FjdGlvbiA9IGNyZWF0ZUJ1bGtBc3NpZ25Ub0NoYW5uZWxBY3Rpb248XHJcbiAgICBJdGVtT2Y8R2V0U2hpcHBpbmdNZXRob2RMaXN0UXVlcnksICdzaGlwcGluZ01ldGhvZHMnPlxyXG4+KHtcclxuICAgIGxvY2F0aW9uOiAnc2hpcHBpbmctbWV0aG9kLWxpc3QnLFxyXG4gICAgcmVxdWlyZXNQZXJtaXNzaW9uOiB1c2VyUGVybWlzc2lvbnMgPT5cclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5VcGRhdGVTaGlwcGluZ01ldGhvZCkgfHxcclxuICAgICAgICB1c2VyUGVybWlzc2lvbnMuaW5jbHVkZXMoUGVybWlzc2lvbi5VcGRhdGVTZXR0aW5ncyksXHJcbiAgICBnZXRJdGVtTmFtZTogaXRlbSA9PiBpdGVtLm5hbWUsXHJcbiAgICBidWxrQXNzaWduVG9DaGFubmVsOiAoZGF0YVNlcnZpY2UsIHNoaXBwaW5nTWV0aG9kSWRzLCBjaGFubmVsSWQpID0+XHJcbiAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgLm11dGF0ZShBc3NpZ25TaGlwcGluZ01ldGhvZHNUb0NoYW5uZWxEb2N1bWVudCwge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc2hpcHBpbmdNZXRob2RJZHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocmVzID0+IHJlcy5hc3NpZ25TaGlwcGluZ01ldGhvZHNUb0NoYW5uZWwpKSxcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlU2hpcHBpbmdNZXRob2RzRnJvbUNoYW5uZWxCdWxrQWN0aW9uID0gY3JlYXRlQnVsa1JlbW92ZUZyb21DaGFubmVsQWN0aW9uPFxyXG4gICAgSXRlbU9mPEdldFNoaXBwaW5nTWV0aG9kTGlzdFF1ZXJ5LCAnc2hpcHBpbmdNZXRob2RzJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3NoaXBwaW5nLW1ldGhvZC1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogdXNlclBlcm1pc3Npb25zID0+XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uRGVsZXRlU2hpcHBpbmdNZXRob2QpIHx8XHJcbiAgICAgICAgdXNlclBlcm1pc3Npb25zLmluY2x1ZGVzKFBlcm1pc3Npb24uRGVsZXRlU2V0dGluZ3MpLFxyXG4gICAgZ2V0SXRlbU5hbWU6IGl0ZW0gPT4gaXRlbS5uYW1lLFxyXG4gICAgYnVsa1JlbW92ZUZyb21DaGFubmVsOiAoZGF0YVNlcnZpY2UsIHNoaXBwaW5nTWV0aG9kSWRzLCBjaGFubmVsSWQpID0+XHJcbiAgICAgICAgZGF0YVNlcnZpY2VcclxuICAgICAgICAgICAgLm11dGF0ZShSZW1vdmVTaGlwcGluZ01ldGhvZHNGcm9tQ2hhbm5lbERvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ01ldGhvZElkcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5waXBlKG1hcChyZXMgPT4gcmVzLnJlbW92ZVNoaXBwaW5nTWV0aG9kc0Zyb21DaGFubmVsKSksXHJcbn0pO1xyXG4iXX0=