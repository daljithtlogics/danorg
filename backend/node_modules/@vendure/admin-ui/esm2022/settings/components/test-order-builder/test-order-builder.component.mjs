import { ChangeDetectionStrategy, Component, EventEmitter, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@clr/angular";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/cdk/bidi";
import * as i6 from "@ngx-translate/core";
export class TestOrderBuilderComponent {
    get subTotal() {
        return this.lines.reduce((sum, l) => sum + l.unitPriceWithTax * l.quantity, 0);
    }
    constructor(dataService, localStorageService) {
        this.dataService = dataService;
        this.localStorageService = localStorageService;
        this.orderLinesChange = new EventEmitter();
        this.lines = [];
    }
    ngOnInit() {
        this.lines = this.loadFromLocalStorage();
        if (this.lines) {
            this.orderLinesChange.emit(this.lines);
        }
        this.dataService.settings.getActiveChannel('cache-first').single$.subscribe(result => {
            this.currencyCode = result.activeChannel.defaultCurrencyCode;
        });
    }
    selectResult(result) {
        if (result) {
            this.addToLines(result);
        }
    }
    addToLines(result) {
        if (!this.lines.find(l => l.id === result.productVariantId)) {
            this.lines.push({
                id: result.productVariantId,
                name: result.productVariantName,
                preview: result.productAsset?.preview ?? '',
                quantity: 1,
                sku: result.sku,
                unitPriceWithTax: (result.priceWithTax.__typename === 'SinglePrice' && result.priceWithTax.value) || 0,
            });
            this.persistToLocalStorage();
            this.orderLinesChange.emit(this.lines);
        }
    }
    updateQuantity() {
        this.persistToLocalStorage();
        this.orderLinesChange.emit(this.lines);
    }
    removeLine(line) {
        this.lines = this.lines.filter(l => l.id !== line.id);
        this.persistToLocalStorage();
        this.orderLinesChange.emit(this.lines);
    }
    persistToLocalStorage() {
        this.localStorageService.setForCurrentLocation('shippingTestOrder', this.lines);
    }
    loadFromLocalStorage() {
        return this.localStorageService.getForCurrentLocation('shippingTestOrder') || [];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: TestOrderBuilderComponent, deps: [{ token: i1.DataService }, { token: i1.LocalStorageService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: TestOrderBuilderComponent, selector: "vdr-test-order-builder", outputs: { orderLinesChange: "orderLinesChange" }, ngImport: i0, template: "<table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'order.product-name' | translate }}</th>\r\n            <th>{{ 'order.product-sku' | translate }}</th>\r\n            <th>{{ 'order.unit-price' | translate }}</th>\r\n            <th>{{ 'order.quantity' | translate }}</th>\r\n            <th>{{ 'order.total' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tr *ngFor=\"let line of lines\" class=\"order-line\">\r\n        <td class=\"align-middle thumb\">\r\n            <img [src]=\"line.preview + '?preset=tiny'\" />\r\n        </td>\r\n        <td class=\"align-middle name\">{{ line.name }}</td>\r\n        <td class=\"align-middle sku\">{{ line.sku }}</td>\r\n        <td class=\"align-middle unit-price\">\r\n            {{ line.unitPriceWithTax | localeCurrency : currencyCode }}\r\n        </td>\r\n        <td class=\"align-middle quantity\">\r\n            <input [(ngModel)]=\"line.quantity\" (change)=\"updateQuantity()\" type=\"number\" max=\"9999\" min=\"1\" />\r\n            <button class=\"icon-button\" (click)=\"removeLine(line)\">\r\n                <clr-icon shape=\"trash\"></clr-icon>\r\n            </button>\r\n        </td>\r\n        <td class=\"align-middle total\">\r\n            {{ line.unitPriceWithTax * line.quantity | localeCurrency : currencyCode }}\r\n        </td>\r\n    </tr>\r\n    <tr class=\"sub-total\">\r\n        <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>{{ subTotal | localeCurrency : currencyCode }}</td>\r\n    </tr>\r\n</table>\r\n\r\n<ng-template #emptyPlaceholder>\r\n    <div class=\"card-block empty-placeholder card-span\">\r\n        <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\r\n        <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\r\n    </div>\r\n</ng-template>\r\n<div class=\"card-block\">\r\n    <vdr-product-variant-selector (productSelected)=\"selectResult($event)\"> </vdr-product-variant-selector>\r\n</div>\r\n", styles: [".empty-placeholder{color:var(--color-grey-400);text-align:center}.empty-text{font-size:22px}.thumb{max-width:50px}\n"], dependencies: [{ kind: "directive", type: i2.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i4.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i5.Dir, selector: "[dir]", inputs: ["dir"], outputs: ["dirChange"], exportAs: ["dir"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select" }, { kind: "component", type: i1.ProductVariantSelectorComponent, selector: "vdr-product-variant-selector", outputs: ["productSelected"] }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: TestOrderBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-test-order-builder', changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"order-table table\" *ngIf=\"lines.length; else emptyPlaceholder\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'order.product-name' | translate }}</th>\r\n            <th>{{ 'order.product-sku' | translate }}</th>\r\n            <th>{{ 'order.unit-price' | translate }}</th>\r\n            <th>{{ 'order.quantity' | translate }}</th>\r\n            <th>{{ 'order.total' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tr *ngFor=\"let line of lines\" class=\"order-line\">\r\n        <td class=\"align-middle thumb\">\r\n            <img [src]=\"line.preview + '?preset=tiny'\" />\r\n        </td>\r\n        <td class=\"align-middle name\">{{ line.name }}</td>\r\n        <td class=\"align-middle sku\">{{ line.sku }}</td>\r\n        <td class=\"align-middle unit-price\">\r\n            {{ line.unitPriceWithTax | localeCurrency : currencyCode }}\r\n        </td>\r\n        <td class=\"align-middle quantity\">\r\n            <input [(ngModel)]=\"line.quantity\" (change)=\"updateQuantity()\" type=\"number\" max=\"9999\" min=\"1\" />\r\n            <button class=\"icon-button\" (click)=\"removeLine(line)\">\r\n                <clr-icon shape=\"trash\"></clr-icon>\r\n            </button>\r\n        </td>\r\n        <td class=\"align-middle total\">\r\n            {{ line.unitPriceWithTax * line.quantity | localeCurrency : currencyCode }}\r\n        </td>\r\n    </tr>\r\n    <tr class=\"sub-total\">\r\n        <td class=\"left\">{{ 'order.sub-total' | translate }}</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n        <td>{{ subTotal | localeCurrency : currencyCode }}</td>\r\n    </tr>\r\n</table>\r\n\r\n<ng-template #emptyPlaceholder>\r\n    <div class=\"card-block empty-placeholder card-span\">\r\n        <div class=\"empty-text\">{{ 'settings.add-products-to-test-order' | translate }}</div>\r\n        <clr-icon shape=\"arrow\" dir=\"down\" size=\"96\"></clr-icon>\r\n    </div>\r\n</ng-template>\r\n<div class=\"card-block\">\r\n    <vdr-product-variant-selector (productSelected)=\"selectResult($event)\"> </vdr-product-variant-selector>\r\n</div>\r\n", styles: [".empty-placeholder{color:var(--color-grey-400);text-align:center}.empty-text{font-size:22px}.thumb{max-width:50px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i1.LocalStorageService }]; }, propDecorators: { orderLinesChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,