import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { DEFAULT_CHANNEL_CODE } from '@vendure/common/lib/shared-constants';
import { GET_SELLER_ORDERS } from './seller-orders-card.graphql';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@vendure/admin-ui/core";
import * as i3 from "@clr/angular";
import * as i4 from "@angular/common";
import * as i5 from "@ngx-translate/core";
export class SellerOrdersCardComponent {
    constructor(router, dataService, channelService) {
        this.router = router;
        this.dataService = dataService;
        this.channelService = channelService;
    }
    ngOnInit() {
        this.sellerOrders$ = this.dataService
            .query(GET_SELLER_ORDERS, {
            orderId: this.orderId,
        })
            .mapSingle(({ order }) => order?.sellerOrders ?? []);
    }
    getSeller(order) {
        const sellerChannel = order.channels.find(channel => channel.code !== DEFAULT_CHANNEL_CODE);
        return sellerChannel?.seller;
    }
    navigateToSellerOrder(order) {
        this.router.navigate(['/orders', order.id]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: SellerOrdersCardComponent, deps: [{ token: i1.Router }, { token: i2.DataService }, { token: i2.ChannelService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: SellerOrdersCardComponent, selector: "vdr-seller-orders-card", inputs: { orderId: "orderId" }, ngImport: i0, template: "<vdr-card [title]=\"'order.seller-orders' | translate\">\r\n    <div class=\"form-grid\">\r\n        <div *ngFor=\"let order of sellerOrders$ | async\">\r\n            <a [routerLink]=\"['seller-orders', order.id]\" class=\"button-ghost mb-1\"\r\n                >{{ order.code }} <clr-icon shape=\"arrow right\"></clr-icon\r\n            ></a>\r\n            <vdr-labeled-data [label]=\"'order.state' | translate\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'common.seller' | translate\">\r\n                {{ seller.name }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'order.total' | translate\">\r\n                {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </div>\r\n</vdr-card>\r\n", styles: [":host{display:block}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: i2.OrderStateLabelComponent, selector: "vdr-order-state-label", inputs: ["state"] }, { kind: "component", type: i2.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i2.CardComponent, selector: "vdr-card", inputs: ["title", "paddingX"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }, { kind: "pipe", type: i2.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: SellerOrdersCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-seller-orders-card', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-card [title]=\"'order.seller-orders' | translate\">\r\n    <div class=\"form-grid\">\r\n        <div *ngFor=\"let order of sellerOrders$ | async\">\r\n            <a [routerLink]=\"['seller-orders', order.id]\" class=\"button-ghost mb-1\"\r\n                >{{ order.code }} <clr-icon shape=\"arrow right\"></clr-icon\r\n            ></a>\r\n            <vdr-labeled-data [label]=\"'order.state' | translate\">\r\n                <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'common.seller' | translate\">\r\n                {{ seller.name }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data *ngIf=\"getSeller(order) as seller\" [label]=\"'order.total' | translate\">\r\n                {{ order.totalWithTax | localeCurrency : order.currencyCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </div>\r\n</vdr-card>\r\n", styles: [":host{display:block}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.DataService }, { type: i2.ChannelService }]; }, propDecorators: { orderId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsbGVyLW9yZGVycy1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvb3JkZXIvc3JjL2NvbXBvbmVudHMvc2VsbGVyLW9yZGVycy1jYXJkL3NlbGxlci1vcmRlcnMtY2FyZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL29yZGVyL3NyYy9jb21wb25lbnRzL3NlbGxlci1vcmRlcnMtY2FyZC9zZWxsZXItb3JkZXJzLWNhcmQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFRbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHNUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7Ozs7QUFVakUsTUFBTSxPQUFPLHlCQUF5QjtJQUtsQyxZQUNZLE1BQWMsRUFDZCxXQUF3QixFQUN4QixjQUE4QjtRQUY5QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO0lBQ3ZDLENBQUM7SUFFSixRQUFRO1FBQ0osSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVzthQUNoQyxLQUFLLENBQXNELGlCQUFpQixFQUFFO1lBQzNFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN4QixDQUFDO2FBQ0QsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQWtCO1FBQ3hCLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzVGLE9BQU8sYUFBYSxFQUFFLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBRUQscUJBQXFCLENBQUMsS0FBa0I7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs4R0ExQlEseUJBQXlCO2tHQUF6Qix5QkFBeUIsOEZDckJ0Qyw0K0JBa0JBOzsyRkRHYSx5QkFBeUI7a0JBTnJDLFNBQVM7K0JBQ0ksd0JBQXdCLG1CQUdqQix1QkFBdUIsQ0FBQyxNQUFNO29KQUd0QyxPQUFPO3NCQUFmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7XHJcbiAgICBDaGFubmVsU2VydmljZSxcclxuICAgIERhdGFTZXJ2aWNlLFxyXG4gICAgR2V0U2VsbGVyT3JkZXJzUXVlcnksXHJcbiAgICBHZXRTZWxsZXJPcmRlcnNRdWVyeVZhcmlhYmxlcyxcclxufSBmcm9tICdAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuaW1wb3J0IHsgREVGQVVMVF9DSEFOTkVMX0NPREUgfSBmcm9tICdAdmVuZHVyZS9jb21tb24vbGliL3NoYXJlZC1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBHRVRfU0VMTEVSX09SREVSUyB9IGZyb20gJy4vc2VsbGVyLW9yZGVycy1jYXJkLmdyYXBocWwnO1xyXG5cclxudHlwZSBTZWxsZXJPcmRlciA9IE5vbk51bGxhYmxlPE5vbk51bGxhYmxlPEdldFNlbGxlck9yZGVyc1F1ZXJ5WydvcmRlciddPlsnc2VsbGVyT3JkZXJzJ10+W251bWJlcl07XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLXNlbGxlci1vcmRlcnMtY2FyZCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VsbGVyLW9yZGVycy1jYXJkLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL3NlbGxlci1vcmRlcnMtY2FyZC5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTZWxsZXJPcmRlcnNDYXJkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgpIG9yZGVySWQ6IHN0cmluZztcclxuXHJcbiAgICBzZWxsZXJPcmRlcnMkOiBPYnNlcnZhYmxlPFNlbGxlck9yZGVyW10+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBkYXRhU2VydmljZTogRGF0YVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBjaGFubmVsU2VydmljZTogQ2hhbm5lbFNlcnZpY2UsXHJcbiAgICApIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zZWxsZXJPcmRlcnMkID0gdGhpcy5kYXRhU2VydmljZVxyXG4gICAgICAgICAgICAucXVlcnk8R2V0U2VsbGVyT3JkZXJzUXVlcnksIEdldFNlbGxlck9yZGVyc1F1ZXJ5VmFyaWFibGVzPihHRVRfU0VMTEVSX09SREVSUywge1xyXG4gICAgICAgICAgICAgICAgb3JkZXJJZDogdGhpcy5vcmRlcklkLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAubWFwU2luZ2xlKCh7IG9yZGVyIH0pID0+IG9yZGVyPy5zZWxsZXJPcmRlcnMgPz8gW10pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNlbGxlcihvcmRlcjogU2VsbGVyT3JkZXIpIHtcclxuICAgICAgICBjb25zdCBzZWxsZXJDaGFubmVsID0gb3JkZXIuY2hhbm5lbHMuZmluZChjaGFubmVsID0+IGNoYW5uZWwuY29kZSAhPT0gREVGQVVMVF9DSEFOTkVMX0NPREUpO1xyXG4gICAgICAgIHJldHVybiBzZWxsZXJDaGFubmVsPy5zZWxsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgbmF2aWdhdGVUb1NlbGxlck9yZGVyKG9yZGVyOiBTZWxsZXJPcmRlcikge1xyXG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL29yZGVycycsIG9yZGVyLmlkXSk7XHJcbiAgICB9XHJcbn1cclxuIiwiPHZkci1jYXJkIFt0aXRsZV09XCInb3JkZXIuc2VsbGVyLW9yZGVycycgfCB0cmFuc2xhdGVcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyaWRcIj5cclxuICAgICAgICA8ZGl2ICpuZ0Zvcj1cImxldCBvcmRlciBvZiBzZWxsZXJPcmRlcnMkIHwgYXN5bmNcIj5cclxuICAgICAgICAgICAgPGEgW3JvdXRlckxpbmtdPVwiWydzZWxsZXItb3JkZXJzJywgb3JkZXIuaWRdXCIgY2xhc3M9XCJidXR0b24tZ2hvc3QgbWItMVwiXHJcbiAgICAgICAgICAgICAgICA+e3sgb3JkZXIuY29kZSB9fSA8Y2xyLWljb24gc2hhcGU9XCJhcnJvdyByaWdodFwiPjwvY2xyLWljb25cclxuICAgICAgICAgICAgPjwvYT5cclxuICAgICAgICAgICAgPHZkci1sYWJlbGVkLWRhdGEgW2xhYmVsXT1cIidvcmRlci5zdGF0ZScgfCB0cmFuc2xhdGVcIj5cclxuICAgICAgICAgICAgICAgIDx2ZHItb3JkZXItc3RhdGUtbGFiZWwgW3N0YXRlXT1cIm9yZGVyLnN0YXRlXCI+PC92ZHItb3JkZXItc3RhdGUtbGFiZWw+XHJcbiAgICAgICAgICAgIDwvdmRyLWxhYmVsZWQtZGF0YT5cclxuICAgICAgICAgICAgPHZkci1sYWJlbGVkLWRhdGEgKm5nSWY9XCJnZXRTZWxsZXIob3JkZXIpIGFzIHNlbGxlclwiIFtsYWJlbF09XCInY29tbW9uLnNlbGxlcicgfCB0cmFuc2xhdGVcIj5cclxuICAgICAgICAgICAgICAgIHt7IHNlbGxlci5uYW1lIH19XHJcbiAgICAgICAgICAgIDwvdmRyLWxhYmVsZWQtZGF0YT5cclxuICAgICAgICAgICAgPHZkci1sYWJlbGVkLWRhdGEgKm5nSWY9XCJnZXRTZWxsZXIob3JkZXIpIGFzIHNlbGxlclwiIFtsYWJlbF09XCInb3JkZXIudG90YWwnIHwgdHJhbnNsYXRlXCI+XHJcbiAgICAgICAgICAgICAgICB7eyBvcmRlci50b3RhbFdpdGhUYXggfCBsb2NhbGVDdXJyZW5jeSA6IG9yZGVyLmN1cnJlbmN5Q29kZSB9fVxyXG4gICAgICAgICAgICA8L3Zkci1sYWJlbGVkLWRhdGE+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC92ZHItY2FyZD5cclxuIl19