import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@vendure/admin-ui/core";
import * as i3 from "../simple-item-list/simple-item-list.component";
import * as i4 from "@ngx-translate/core";
export class ModificationDetailComponent {
    constructor() {
        this.addedItems = new Map();
        this.removedItems = new Map();
    }
    ngOnChanges() {
        const { added, removed } = this.getModifiedLines();
        this.addedItems = added;
        this.removedItems = removed;
    }
    getSurcharge(id) {
        return this.order.surcharges.find(m => m.id === id);
    }
    getAddedItems() {
        return [...this.addedItems.entries()].map(([line, count]) => ({
            name: line.productVariant.name,
            quantity: count,
        }));
    }
    getRemovedItems() {
        return [...this.removedItems.entries()].map(([line, count]) => ({
            name: line.productVariant.name,
            quantity: count,
        }));
    }
    getModifiedLines() {
        const added = new Map();
        const removed = new Map();
        for (const modificationLine of this.modification.lines || []) {
            const line = this.order.lines.find(l => l.id === modificationLine.orderLineId);
            if (!line) {
                continue;
            }
            if (modificationLine.quantity < 0) {
                removed.set(line, -modificationLine.quantity);
            }
            else {
                added.set(line, modificationLine.quantity);
            }
        }
        return { added, removed };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ModificationDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: ModificationDetailComponent, selector: "vdr-modification-detail", inputs: { order: "order", modification: "modification" }, usesOnChanges: true, ngImport: i0, template: "<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.LabeledDataComponent, selector: "vdr-labeled-data", inputs: ["label"] }, { kind: "component", type: i3.SimpleItemListComponent, selector: "vdr-simple-item-list", inputs: ["items"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i2.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: ModificationDetailComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-modification-detail', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n" }]
        }], propDecorators: { order: [{
                type: Input
            }], modification: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kaWZpY2F0aW9uLWRldGFpbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL29yZGVyL3NyYy9jb21wb25lbnRzL21vZGlmaWNhdGlvbi1kZXRhaWwvbW9kaWZpY2F0aW9uLWRldGFpbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL29yZGVyL3NyYy9jb21wb25lbnRzL21vZGlmaWNhdGlvbi1kZXRhaWwvbW9kaWZpY2F0aW9uLWRldGFpbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7Ozs7OztBQVM3RixNQUFNLE9BQU8sMkJBQTJCO0lBTnhDO1FBU1ksZUFBVSxHQUFHLElBQUksR0FBRyxFQUFnRCxDQUFDO1FBQ3JFLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQWdELENBQUM7S0EwQ2xGO0lBeENHLFdBQVc7UUFDUCxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxZQUFZLENBQUMsRUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUQsSUFBSSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSTtZQUM5QixRQUFRLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7SUFFRCxlQUFlO1FBQ1gsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVELElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUk7WUFDOUIsUUFBUSxFQUFFLEtBQUs7U0FDbEIsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3BCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUFnRCxDQUFDO1FBQ3RFLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFnRCxDQUFDO1FBQ3hFLEtBQUssTUFBTSxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUU7WUFDMUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvRSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLFNBQVM7YUFDWjtZQUNELElBQUksZ0JBQWdCLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqRDtpQkFBTTtnQkFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM5QztTQUNKO1FBQ0QsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDOzhHQTdDUSwyQkFBMkI7a0dBQTNCLDJCQUEyQiw4SUNUeEMsdTZCQWNBOzsyRkRMYSwyQkFBMkI7a0JBTnZDLFNBQVM7K0JBQ0kseUJBQXlCLG1CQUdsQix1QkFBdUIsQ0FBQyxNQUFNOzhCQUd0QyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPcmRlckRldGFpbEZyYWdtZW50IH0gZnJvbSAnQHZlbmR1cmUvYWRtaW4tdWkvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmRyLW1vZGlmaWNhdGlvbi1kZXRhaWwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL21vZGlmaWNhdGlvbi1kZXRhaWwuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vbW9kaWZpY2F0aW9uLWRldGFpbC5jb21wb25lbnQuc2NzcyddLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNb2RpZmljYXRpb25EZXRhaWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCkgb3JkZXI6IE9yZGVyRGV0YWlsRnJhZ21lbnQ7XHJcbiAgICBASW5wdXQoKSBtb2RpZmljYXRpb246IE9yZGVyRGV0YWlsRnJhZ21lbnRbJ21vZGlmaWNhdGlvbnMnXVtudW1iZXJdO1xyXG4gICAgcHJpdmF0ZSBhZGRlZEl0ZW1zID0gbmV3IE1hcDxPcmRlckRldGFpbEZyYWdtZW50WydsaW5lcyddW251bWJlcl0sIG51bWJlcj4oKTtcclxuICAgIHByaXZhdGUgcmVtb3ZlZEl0ZW1zID0gbmV3IE1hcDxPcmRlckRldGFpbEZyYWdtZW50WydsaW5lcyddW251bWJlcl0sIG51bWJlcj4oKTtcclxuXHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IGFkZGVkLCByZW1vdmVkIH0gPSB0aGlzLmdldE1vZGlmaWVkTGluZXMoKTtcclxuICAgICAgICB0aGlzLmFkZGVkSXRlbXMgPSBhZGRlZDtcclxuICAgICAgICB0aGlzLnJlbW92ZWRJdGVtcyA9IHJlbW92ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3VyY2hhcmdlKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcmRlci5zdXJjaGFyZ2VzLmZpbmQobSA9PiBtLmlkID09PSBpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWRkZWRJdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMuYWRkZWRJdGVtcy5lbnRyaWVzKCldLm1hcCgoW2xpbmUsIGNvdW50XSkgPT4gKHtcclxuICAgICAgICAgICAgbmFtZTogbGluZS5wcm9kdWN0VmFyaWFudC5uYW1lLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogY291bnQsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJlbW92ZWRJdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMucmVtb3ZlZEl0ZW1zLmVudHJpZXMoKV0ubWFwKChbbGluZSwgY291bnRdKSA9PiAoe1xyXG4gICAgICAgICAgICBuYW1lOiBsaW5lLnByb2R1Y3RWYXJpYW50Lm5hbWUsXHJcbiAgICAgICAgICAgIHF1YW50aXR5OiBjb3VudCxcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRNb2RpZmllZExpbmVzKCkge1xyXG4gICAgICAgIGNvbnN0IGFkZGVkID0gbmV3IE1hcDxPcmRlckRldGFpbEZyYWdtZW50WydsaW5lcyddW251bWJlcl0sIG51bWJlcj4oKTtcclxuICAgICAgICBjb25zdCByZW1vdmVkID0gbmV3IE1hcDxPcmRlckRldGFpbEZyYWdtZW50WydsaW5lcyddW251bWJlcl0sIG51bWJlcj4oKTtcclxuICAgICAgICBmb3IgKGNvbnN0IG1vZGlmaWNhdGlvbkxpbmUgb2YgdGhpcy5tb2RpZmljYXRpb24ubGluZXMgfHwgW10pIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IHRoaXMub3JkZXIubGluZXMuZmluZChsID0+IGwuaWQgPT09IG1vZGlmaWNhdGlvbkxpbmUub3JkZXJMaW5lSWQpO1xyXG4gICAgICAgICAgICBpZiAoIWxpbmUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChtb2RpZmljYXRpb25MaW5lLnF1YW50aXR5IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZC5zZXQobGluZSwgLW1vZGlmaWNhdGlvbkxpbmUucXVhbnRpdHkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWRkZWQuc2V0KGxpbmUsIG1vZGlmaWNhdGlvbkxpbmUucXVhbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGFkZGVkLCByZW1vdmVkIH07XHJcbiAgICB9XHJcbn1cclxuIiwiPHZkci1sYWJlbGVkLWRhdGEgW2xhYmVsXT1cIidjb21tb24uSUQnIHwgdHJhbnNsYXRlXCI+e3sgbW9kaWZpY2F0aW9uLmlkIH19PC92ZHItbGFiZWxlZC1kYXRhPlxyXG48dmRyLWxhYmVsZWQtZGF0YSAqbmdJZj1cIm1vZGlmaWNhdGlvbi5ub3RlXCIgW2xhYmVsXT1cIidvcmRlci5ub3RlJyB8IHRyYW5zbGF0ZVwiPnt7XHJcbiAgICBtb2RpZmljYXRpb24ubm90ZVxyXG59fTwvdmRyLWxhYmVsZWQtZGF0YT5cclxuPHZkci1sYWJlbGVkLWRhdGEgKm5nRm9yPVwibGV0IHN1cmNoYXJnZSBvZiBtb2RpZmljYXRpb24uc3VyY2hhcmdlc1wiIFtsYWJlbF09XCInb3JkZXIuc3VyY2hhcmdlcycgfCB0cmFuc2xhdGVcIj5cclxuICAgIHt7IGdldFN1cmNoYXJnZShzdXJjaGFyZ2UuaWQpPy5kZXNjcmlwdGlvbiB9fVxyXG4gICAge3sgZ2V0U3VyY2hhcmdlKHN1cmNoYXJnZS5pZCk/LnByaWNlV2l0aFRheCB8IGxvY2FsZUN1cnJlbmN5OiBvcmRlci5jdXJyZW5jeUNvZGUgfX08L3Zkci1sYWJlbGVkLWRhdGFcclxuPlxyXG48dmRyLWxhYmVsZWQtZGF0YSAqbmdJZj1cImdldEFkZGVkSXRlbXMoKS5sZW5ndGhcIiBbbGFiZWxdPVwiJ29yZGVyLmFkZGVkLWl0ZW1zJyB8IHRyYW5zbGF0ZVwiPlxyXG4gICAgPHZkci1zaW1wbGUtaXRlbS1saXN0IFtpdGVtc109XCJnZXRBZGRlZEl0ZW1zKClcIj48L3Zkci1zaW1wbGUtaXRlbS1saXN0PlxyXG48L3Zkci1sYWJlbGVkLWRhdGE+XHJcbjx2ZHItbGFiZWxlZC1kYXRhICpuZ0lmPVwiZ2V0UmVtb3ZlZEl0ZW1zKCkubGVuZ3RoXCIgW2xhYmVsXT1cIidvcmRlci5yZW1vdmVkLWl0ZW1zJyB8IHRyYW5zbGF0ZVwiPlxyXG4gICAgPHZkci1zaW1wbGUtaXRlbS1saXN0IFtpdGVtc109XCJnZXRSZW1vdmVkSXRlbXMoKVwiPjwvdmRyLXNpbXBsZS1pdGVtLWxpc3Q+XHJcbjwvdmRyLWxhYmVsZWQtZGF0YT5cclxuIl19