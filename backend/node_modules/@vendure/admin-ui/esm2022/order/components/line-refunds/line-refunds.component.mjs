import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@clr/angular";
import * as i2 from "@angular/common";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "@ngx-translate/core";
export class LineRefundsComponent {
    getRefundedCount() {
        const refundLines = this.payments
            ?.reduce((all, payment) => [...all, ...payment.refunds], [])
            .filter(refund => refund.state !== 'Failed')
            .reduce((all, refund) => [...all, ...refund.lines], []) ?? [];
        return refundLines
            .filter(i => i.orderLineId === this.line.id)
            .reduce((sum, i) => sum + i.quantity, 0);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: LineRefundsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: LineRefundsComponent, selector: "vdr-line-refunds", inputs: { line: "line", payments: "payments" }, ngImport: i0, template: "<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n", styles: [":host{color:var(--color-error-500)}\n"], dependencies: [{ kind: "directive", type: i1.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.Dir, selector: "[dir]", inputs: ["dir"], outputs: ["dirChange"], exportAs: ["dir"] }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: LineRefundsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-line-refunds', changeDetection: ChangeDetectionStrategy.OnPush, template: "<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n", styles: [":host{color:var(--color-error-500)}\n"] }]
        }], propDecorators: { line: [{
                type: Input
            }], payments: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1yZWZ1bmRzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvb3JkZXIvc3JjL2NvbXBvbmVudHMvbGluZS1yZWZ1bmRzL2xpbmUtcmVmdW5kcy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL29yZGVyL3NyYy9jb21wb25lbnRzL2xpbmUtcmVmdW5kcy9saW5lLXJlZnVuZHMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7OztBQVMxRSxNQUFNLE9BQU8sb0JBQW9CO0lBSTdCLGdCQUFnQjtRQUNaLE1BQU0sV0FBVyxHQUNiLElBQUksQ0FBQyxRQUFRO1lBQ1QsRUFBRSxNQUFNLENBQ0osQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUM5QyxFQUEyQyxDQUM5QzthQUNBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDO2FBQzNDLE1BQU0sQ0FDSCxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQzFDLEVBQXNELENBQ3pELElBQUksRUFBRSxDQUFDO1FBRWhCLE9BQU8sV0FBVzthQUNiLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDM0MsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQzs4R0FwQlEsb0JBQW9CO2tHQUFwQixvQkFBb0Isd0dDVGpDLDhNQUdBOzsyRkRNYSxvQkFBb0I7a0JBTmhDLFNBQVM7K0JBQ0ksa0JBQWtCLG1CQUdYLHVCQUF1QixDQUFDLE1BQU07OEJBR3RDLElBQUk7c0JBQVosS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT3JkZXJEZXRhaWxGcmFnbWVudCwgUGF5bWVudFdpdGhSZWZ1bmRzRnJhZ21lbnQgfSBmcm9tICdAdmVuZHVyZS9hZG1pbi11aS9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICd2ZHItbGluZS1yZWZ1bmRzJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9saW5lLXJlZnVuZHMuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vbGluZS1yZWZ1bmRzLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIExpbmVSZWZ1bmRzQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dCgpIGxpbmU6IE9yZGVyRGV0YWlsRnJhZ21lbnRbJ2xpbmVzJ11bbnVtYmVyXTtcclxuICAgIEBJbnB1dCgpIHBheW1lbnRzOiBQYXltZW50V2l0aFJlZnVuZHNGcmFnbWVudFtdO1xyXG5cclxuICAgIGdldFJlZnVuZGVkQ291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCByZWZ1bmRMaW5lcyA9XHJcbiAgICAgICAgICAgIHRoaXMucGF5bWVudHNcclxuICAgICAgICAgICAgICAgID8ucmVkdWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIChhbGwsIHBheW1lbnQpID0+IFsuLi5hbGwsIC4uLnBheW1lbnQucmVmdW5kc10sXHJcbiAgICAgICAgICAgICAgICAgICAgW10gYXMgUGF5bWVudFdpdGhSZWZ1bmRzRnJhZ21lbnRbJ3JlZnVuZHMnXSxcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIocmVmdW5kID0+IHJlZnVuZC5zdGF0ZSAhPT0gJ0ZhaWxlZCcpXHJcbiAgICAgICAgICAgICAgICAucmVkdWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIChhbGwsIHJlZnVuZCkgPT4gWy4uLmFsbCwgLi4ucmVmdW5kLmxpbmVzXSxcclxuICAgICAgICAgICAgICAgICAgICBbXSBhcyBBcnJheTx7IG9yZGVyTGluZUlkOiBzdHJpbmc7IHF1YW50aXR5OiBudW1iZXIgfT4sXHJcbiAgICAgICAgICAgICAgICApID8/IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVmdW5kTGluZXNcclxuICAgICAgICAgICAgLmZpbHRlcihpID0+IGkub3JkZXJMaW5lSWQgPT09IHRoaXMubGluZS5pZClcclxuICAgICAgICAgICAgLnJlZHVjZSgoc3VtLCBpKSA9PiBzdW0gKyBpLnF1YW50aXR5LCAwKTtcclxuICAgIH1cclxufVxyXG4iLCI8c3BhbiAqbmdJZj1cImdldFJlZnVuZGVkQ291bnQoKVwiIFt0aXRsZV09XCInb3JkZXIucmVmdW5kZWQtY291bnQnIHwgdHJhbnNsYXRlOiB7IGNvdW50OiBnZXRSZWZ1bmRlZENvdW50KCkgfVwiPlxyXG4gICAgPGNsci1pY29uIHNoYXBlPVwicmVkb1wiIGNsYXNzPVwiaXMtc29saWRcIiBkaXI9XCJkb3duXCI+PC9jbHItaWNvbj5cclxuPC9zcGFuPlxyXG4iXX0=