import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@clr/angular";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@vendure/admin-ui/core";
import * as i5 from "../order-table/order-table.component";
import * as i6 from "@ngx-translate/core";
export var OrderEditResultType;
(function (OrderEditResultType) {
    OrderEditResultType[OrderEditResultType["Refund"] = 0] = "Refund";
    OrderEditResultType[OrderEditResultType["Payment"] = 1] = "Payment";
    OrderEditResultType[OrderEditResultType["PriceUnchanged"] = 2] = "PriceUnchanged";
    OrderEditResultType[OrderEditResultType["Cancel"] = 3] = "Cancel";
})(OrderEditResultType || (OrderEditResultType = {}));
export class OrderEditsPreviewDialogComponent {
    get priceDifference() {
        return this.order.totalWithTax - this.originalTotalWithTax;
    }
    ngOnInit() {
        this.refundNote = this.modifyOrderInput.note || '';
    }
    cancel() {
        this.resolveWith({
            result: OrderEditResultType.Cancel,
        });
    }
    submit() {
        if (0 < this.priceDifference) {
            this.resolveWith({
                result: OrderEditResultType.Payment,
            });
        }
        else if (this.priceDifference < 0) {
            this.resolveWith({
                result: OrderEditResultType.Refund,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                refundPaymentId: this.selectedPayment.id,
                refundNote: this.refundNote,
            });
        }
        else {
            this.resolveWith({
                result: OrderEditResultType.PriceUnchanged,
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: OrderEditsPreviewDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: OrderEditsPreviewDialogComponent, selector: "vdr-order-edits-preview-dialog", ngImport: i0, template: "<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\r\n\r\n<h4 class=\"h4\">\r\n    {{ 'order.modify-order-price-difference' | translate }}:\r\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\r\n</h4>\r\n<div *ngIf=\"priceDifference < 0\">\r\n<clr-select-container>\r\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\r\n        <option\r\n            *ngFor=\"let payment of order.payments\"\r\n            [ngValue]=\"payment\"\r\n        >\r\n            #{{ payment.id }} {{ payment.method }}:\r\n            {{ payment.amount | localeCurrency: order.currencyCode }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i1.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i1.ClrSelect, selector: "[clrSelect]" }, { kind: "component", type: i1.ClrSelectContainer, selector: "clr-select-container" }, { kind: "directive", type: i1.ClrTextarea, selector: "[clrTextarea]" }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.FormFieldControlDirective, selector: "input, textarea, select" }, { kind: "directive", type: i4.DialogButtonsDirective, selector: "[vdrDialogButtons]" }, { kind: "directive", type: i4.DialogTitleDirective, selector: "[vdrDialogTitle]" }, { kind: "component", type: i5.OrderTableComponent, selector: "vdr-order-table", inputs: ["order", "orderLineCustomFields", "isDraft"], outputs: ["adjust", "remove"] }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }, { kind: "pipe", type: i4.LocaleCurrencyPipe, name: "localeCurrency" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: OrderEditsPreviewDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-edits-preview-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\r\n\r\n<h4 class=\"h4\">\r\n    {{ 'order.modify-order-price-difference' | translate }}:\r\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\r\n</h4>\r\n<div *ngIf=\"priceDifference < 0\">\r\n<clr-select-container>\r\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\r\n        <option\r\n            *ngFor=\"let payment of order.payments\"\r\n            [ngValue]=\"payment\"\r\n        >\r\n            #{{ payment.id }} {{ payment.method }}:\r\n            {{ payment.amount | localeCurrency: order.currencyCode }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItZWRpdHMtcHJldmlldy1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9vcmRlci9zcmMvY29tcG9uZW50cy9vcmRlci1lZGl0cy1wcmV2aWV3LWRpYWxvZy9vcmRlci1lZGl0cy1wcmV2aWV3LWRpYWxvZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL29yZGVyL3NyYy9jb21wb25lbnRzL29yZGVyLWVkaXRzLXByZXZpZXctZGlhbG9nL29yZGVyLWVkaXRzLXByZXZpZXctZGlhbG9nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBRzNFLE1BQU0sQ0FBTixJQUFZLG1CQUtYO0FBTEQsV0FBWSxtQkFBbUI7SUFDM0IsaUVBQU0sQ0FBQTtJQUNOLG1FQUFPLENBQUE7SUFDUCxpRkFBYyxDQUFBO0lBQ2QsaUVBQU0sQ0FBQTtBQUNWLENBQUMsRUFMVyxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBSzlCO0FBNEJELE1BQU0sT0FBTyxnQ0FBZ0M7SUFXekMsSUFBSSxlQUFlO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUM7SUFDL0QsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3ZELENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNiLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxNQUFNO1NBQ3JDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUMxQixJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUNiLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxPQUFPO2FBQ3RDLENBQUMsQ0FBQztTQUNOO2FBQU0sSUFBSSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUNiLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxNQUFNO2dCQUNsQyxvRUFBb0U7Z0JBQ3BFLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZ0IsQ0FBQyxFQUFFO2dCQUN6QyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7YUFDOUIsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQ2IsTUFBTSxFQUFFLG1CQUFtQixDQUFDLGNBQWM7YUFDN0MsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzhHQTFDUSxnQ0FBZ0M7a0dBQWhDLGdDQUFnQyxzRUNwQzdDLG04Q0E2QkE7OzJGRE9hLGdDQUFnQztrQkFONUMsU0FBUzsrQkFDSSxnQ0FBZ0MsbUJBR3pCLHVCQUF1QixDQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ3VzdG9tRmllbGRDb25maWcsIERpYWxvZywgTW9kaWZ5T3JkZXJJbnB1dCwgT3JkZXJEZXRhaWxGcmFnbWVudCB9IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG5cclxuZXhwb3J0IGVudW0gT3JkZXJFZGl0UmVzdWx0VHlwZSB7XHJcbiAgICBSZWZ1bmQsXHJcbiAgICBQYXltZW50LFxyXG4gICAgUHJpY2VVbmNoYW5nZWQsXHJcbiAgICBDYW5jZWwsXHJcbn1cclxuXHJcbmludGVyZmFjZSBPcmRlckVkaXRzUmVmdW5kUmVzdWx0IHtcclxuICAgIHJlc3VsdDogT3JkZXJFZGl0UmVzdWx0VHlwZS5SZWZ1bmQ7XHJcbiAgICByZWZ1bmRQYXltZW50SWQ6IHN0cmluZztcclxuICAgIHJlZnVuZE5vdGU/OiBzdHJpbmc7XHJcbn1cclxuaW50ZXJmYWNlIE9yZGVyRWRpdHNQYXltZW50UmVzdWx0IHtcclxuICAgIHJlc3VsdDogT3JkZXJFZGl0UmVzdWx0VHlwZS5QYXltZW50O1xyXG59XHJcbmludGVyZmFjZSBPcmRlckVkaXRzUHJpY2VVbmNoYW5nZWRSZXN1bHQge1xyXG4gICAgcmVzdWx0OiBPcmRlckVkaXRSZXN1bHRUeXBlLlByaWNlVW5jaGFuZ2VkO1xyXG59XHJcbmludGVyZmFjZSBPcmRlckVkaXRzQ2FuY2VsUmVzdWx0IHtcclxuICAgIHJlc3VsdDogT3JkZXJFZGl0UmVzdWx0VHlwZS5DYW5jZWw7XHJcbn1cclxudHlwZSBPcmRlckVkaXRSZXN1bHQgPVxyXG4gICAgfCBPcmRlckVkaXRzUmVmdW5kUmVzdWx0XHJcbiAgICB8IE9yZGVyRWRpdHNQYXltZW50UmVzdWx0XHJcbiAgICB8IE9yZGVyRWRpdHNQcmljZVVuY2hhbmdlZFJlc3VsdFxyXG4gICAgfCBPcmRlckVkaXRzQ2FuY2VsUmVzdWx0O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Zkci1vcmRlci1lZGl0cy1wcmV2aWV3LWRpYWxvZycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vb3JkZXItZWRpdHMtcHJldmlldy1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vb3JkZXItZWRpdHMtcHJldmlldy1kaWFsb2cuY29tcG9uZW50LnNjc3MnXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3JkZXJFZGl0c1ByZXZpZXdEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIERpYWxvZzxPcmRlckVkaXRSZXN1bHQ+IHtcclxuICAgIC8vIFBhc3NlZCBpbiB2aWEgdGhlIG1vZGFsU2VydmljZVxyXG4gICAgb3JkZXI6IE9yZGVyRGV0YWlsRnJhZ21lbnQ7XHJcbiAgICBvcmlnaW5hbFRvdGFsV2l0aFRheDogbnVtYmVyO1xyXG4gICAgb3JkZXJMaW5lQ3VzdG9tRmllbGRzOiBDdXN0b21GaWVsZENvbmZpZ1tdO1xyXG4gICAgbW9kaWZ5T3JkZXJJbnB1dDogTW9kaWZ5T3JkZXJJbnB1dDtcclxuXHJcbiAgICBzZWxlY3RlZFBheW1lbnQ/OiBOb25OdWxsYWJsZTxPcmRlckRldGFpbEZyYWdtZW50WydwYXltZW50cyddPltudW1iZXJdO1xyXG4gICAgcmVmdW5kTm90ZTogc3RyaW5nO1xyXG4gICAgcmVzb2x2ZVdpdGg6IChyZXN1bHQ/OiBPcmRlckVkaXRSZXN1bHQpID0+IHZvaWQ7XHJcblxyXG4gICAgZ2V0IHByaWNlRGlmZmVyZW5jZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9yZGVyLnRvdGFsV2l0aFRheCAtIHRoaXMub3JpZ2luYWxUb3RhbFdpdGhUYXg7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5yZWZ1bmROb3RlID0gdGhpcy5tb2RpZnlPcmRlcklucHV0Lm5vdGUgfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuY2VsKCkge1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZVdpdGgoe1xyXG4gICAgICAgICAgICByZXN1bHQ6IE9yZGVyRWRpdFJlc3VsdFR5cGUuQ2FuY2VsLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN1Ym1pdCgpIHtcclxuICAgICAgICBpZiAoMCA8IHRoaXMucHJpY2VEaWZmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZVdpdGgoe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBPcmRlckVkaXRSZXN1bHRUeXBlLlBheW1lbnQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmljZURpZmZlcmVuY2UgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZVdpdGgoe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBPcmRlckVkaXRSZXN1bHRUeXBlLlJlZnVuZCxcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXHJcbiAgICAgICAgICAgICAgICByZWZ1bmRQYXltZW50SWQ6IHRoaXMuc2VsZWN0ZWRQYXltZW50IS5pZCxcclxuICAgICAgICAgICAgICAgIHJlZnVuZE5vdGU6IHRoaXMucmVmdW5kTm90ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlV2l0aCh7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IE9yZGVyRWRpdFJlc3VsdFR5cGUuUHJpY2VVbmNoYW5nZWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCI8bmctdGVtcGxhdGUgdmRyRGlhbG9nVGl0bGU+e3sgJ29yZGVyLmNvbmZpcm0tbW9kaWZpY2F0aW9ucycgfCB0cmFuc2xhdGUgfX08L25nLXRlbXBsYXRlPlxyXG48dmRyLW9yZGVyLXRhYmxlIFtvcmRlcl09XCJvcmRlclwiIFtvcmRlckxpbmVDdXN0b21GaWVsZHNdPVwib3JkZXJMaW5lQ3VzdG9tRmllbGRzXCI+PC92ZHItb3JkZXItdGFibGU+XHJcblxyXG48aDQgY2xhc3M9XCJoNFwiPlxyXG4gICAge3sgJ29yZGVyLm1vZGlmeS1vcmRlci1wcmljZS1kaWZmZXJlbmNlJyB8IHRyYW5zbGF0ZSB9fTpcclxuICAgIDxzdHJvbmc+e3sgcHJpY2VEaWZmZXJlbmNlIHwgbG9jYWxlQ3VycmVuY3k6IG9yZGVyLmN1cnJlbmN5Q29kZSB9fTwvc3Ryb25nPlxyXG48L2g0PlxyXG48ZGl2ICpuZ0lmPVwicHJpY2VEaWZmZXJlbmNlIDwgMFwiPlxyXG48Y2xyLXNlbGVjdC1jb250YWluZXI+XHJcbiAgICA8bGFiZWw+e3sgJ29yZGVyLnBheW1lbnQtdG8tcmVmdW5kJyB8IHRyYW5zbGF0ZSB9fTwvbGFiZWw+XHJcbiAgICA8c2VsZWN0IGNsclNlbGVjdCBuYW1lPVwib3B0aW9uc1wiIFsobmdNb2RlbCldPVwic2VsZWN0ZWRQYXltZW50XCI+XHJcbiAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAqbmdGb3I9XCJsZXQgcGF5bWVudCBvZiBvcmRlci5wYXltZW50c1wiXHJcbiAgICAgICAgICAgIFtuZ1ZhbHVlXT1cInBheW1lbnRcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgI3t7IHBheW1lbnQuaWQgfX0ge3sgcGF5bWVudC5tZXRob2QgfX06XHJcbiAgICAgICAgICAgIHt7IHBheW1lbnQuYW1vdW50IHwgbG9jYWxlQ3VycmVuY3k6IG9yZGVyLmN1cnJlbmN5Q29kZSB9fVxyXG4gICAgICAgIDwvb3B0aW9uPlxyXG4gICAgPC9zZWxlY3Q+XHJcbjwvY2xyLXNlbGVjdC1jb250YWluZXI+XHJcbiAgICA8bGFiZWwgY2xhc3M9XCJjbHItY29udHJvbC1sYWJlbFwiPnt7ICdvcmRlci5yZWZ1bmQtY2FuY2VsbGF0aW9uLXJlYXNvbicgfCB0cmFuc2xhdGUgfX08L2xhYmVsPlxyXG4gICAgPHRleHRhcmVhIFsobmdNb2RlbCldPVwicmVmdW5kTm90ZVwiIG5hbWU9XCJyZWZ1bmROb3RlXCIgY2xyVGV4dGFyZWEgcmVxdWlyZWQ+PC90ZXh0YXJlYT5cclxuPC9kaXY+XHJcbjxuZy10ZW1wbGF0ZSB2ZHJEaWFsb2dCdXR0b25zPlxyXG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG5cIiAoY2xpY2spPVwiY2FuY2VsKClcIj57eyAnY29tbW9uLmNhbmNlbCcgfCB0cmFuc2xhdGUgfX08L2J1dHRvbj5cclxuICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIChjbGljayk9XCJzdWJtaXQoKVwiIFtkaXNhYmxlZF09XCJwcmljZURpZmZlcmVuY2UgPCAwICYmICFzZWxlY3RlZFBheW1lbnRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPlxyXG4gICAgICAgIHt7ICdjb21tb24uY29uZmlybScgfCB0cmFuc2xhdGUgfX1cclxuICAgIDwvYnV0dG9uPlxyXG48L25nLXRlbXBsYXRlPlxyXG4iXX0=