import { AssignPromotionsToChannelDocument, createBulkAssignToChannelAction, createBulkDeleteAction, createBulkRemoveFromChannelAction, Permission, RemovePromotionsFromChannelDocument, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { map } from 'rxjs/operators';
const ASSIGN_PROMOTIONS_TO_CHANNEL = gql `
    mutation AssignPromotionsToChannel($input: AssignPromotionsToChannelInput!) {
        assignPromotionsToChannel(input: $input) {
            id
            name
        }
    }
`;
const REMOVE_PROMOTIONS_FROM_CHANNEL = gql `
    mutation RemovePromotionsFromChannel($input: RemovePromotionsFromChannelInput!) {
        removePromotionsFromChannel(input: $input) {
            id
            name
        }
    }
`;
export const deletePromotionsBulkAction = createBulkDeleteAction({
    location: 'promotion-list',
    requiresPermission: Permission.DeletePromotion,
    getItemName: item => item.name,
    bulkDelete: (dataService, ids) => dataService.promotion.deletePromotions(ids).pipe(map(res => res.deletePromotions)),
});
export const assignPromotionsToChannelBulkAction = createBulkAssignToChannelAction({
    location: 'promotion-list',
    requiresPermission: Permission.UpdatePromotion,
    getItemName: item => item.name,
    bulkAssignToChannel: (dataService, promotionIds, channelId) => dataService
        .mutate(AssignPromotionsToChannelDocument, {
        input: {
            channelId,
            promotionIds,
        },
    })
        .pipe(map(res => res.assignPromotionsToChannel)),
});
export const removePromotionsFromChannelBulkAction = createBulkRemoveFromChannelAction({
    location: 'promotion-list',
    requiresPermission: Permission.DeleteCatalog,
    getItemName: item => item.name,
    bulkRemoveFromChannel: (dataService, promotionIds, channelId) => dataService
        .mutate(RemovePromotionsFromChannelDocument, {
        input: {
            channelId,
            promotionIds,
        },
    })
        .pipe(map(res => res.removePromotionsFromChannel)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbW90aW9uLWxpc3QtYnVsay1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9tYXJrZXRpbmcvc3JjL2NvbXBvbmVudHMvcHJvbW90aW9uLWxpc3QvcHJvbW90aW9uLWxpc3QtYnVsay1hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxpQ0FBaUMsRUFDakMsK0JBQStCLEVBQy9CLHNCQUFzQixFQUN0QixpQ0FBaUMsRUFHakMsVUFBVSxFQUNWLG1DQUFtQyxHQUN0QyxNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsTUFBTSw0QkFBNEIsR0FBRyxHQUFHLENBQUE7Ozs7Ozs7Q0FPdkMsQ0FBQztBQUVGLE1BQU0sOEJBQThCLEdBQUcsR0FBRyxDQUFBOzs7Ozs7O0NBT3pDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxzQkFBc0IsQ0FDNUQ7SUFDSSxRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxlQUFlO0lBQzlDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO0lBQzlCLFVBQVUsRUFBRSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUM3QixXQUFXLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN6RixDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBRywrQkFBK0IsQ0FFaEY7SUFDRSxRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxlQUFlO0lBQzlDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO0lBQzlCLG1CQUFtQixFQUFFLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUMxRCxXQUFXO1NBQ04sTUFBTSxDQUFDLGlDQUFpQyxFQUFFO1FBQ3ZDLEtBQUssRUFBRTtZQUNILFNBQVM7WUFDVCxZQUFZO1NBQ2Y7S0FDSixDQUFDO1NBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0NBQzNELENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUFHLGlDQUFpQyxDQUVwRjtJQUNFLFFBQVEsRUFBRSxnQkFBZ0I7SUFDMUIsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLGFBQWE7SUFDNUMsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUk7SUFDOUIscUJBQXFCLEVBQUUsQ0FBQyxXQUFXLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQzVELFdBQVc7U0FDTixNQUFNLENBQUMsbUNBQW1DLEVBQUU7UUFDekMsS0FBSyxFQUFFO1lBQ0gsU0FBUztZQUNULFlBQVk7U0FDZjtLQUNKLENBQUM7U0FDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Q0FDN0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEFzc2lnblByb21vdGlvbnNUb0NoYW5uZWxEb2N1bWVudCxcclxuICAgIGNyZWF0ZUJ1bGtBc3NpZ25Ub0NoYW5uZWxBY3Rpb24sXHJcbiAgICBjcmVhdGVCdWxrRGVsZXRlQWN0aW9uLFxyXG4gICAgY3JlYXRlQnVsa1JlbW92ZUZyb21DaGFubmVsQWN0aW9uLFxyXG4gICAgR2V0UHJvbW90aW9uTGlzdFF1ZXJ5LFxyXG4gICAgSXRlbU9mLFxyXG4gICAgUGVybWlzc2lvbixcclxuICAgIFJlbW92ZVByb21vdGlvbnNGcm9tQ2hhbm5lbERvY3VtZW50LFxyXG59IGZyb20gJ0B2ZW5kdXJlL2FkbWluLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBncWwgfSBmcm9tICdhcG9sbG8tYW5ndWxhcic7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmNvbnN0IEFTU0lHTl9QUk9NT1RJT05TX1RPX0NIQU5ORUwgPSBncWxgXHJcbiAgICBtdXRhdGlvbiBBc3NpZ25Qcm9tb3Rpb25zVG9DaGFubmVsKCRpbnB1dDogQXNzaWduUHJvbW90aW9uc1RvQ2hhbm5lbElucHV0ISkge1xyXG4gICAgICAgIGFzc2lnblByb21vdGlvbnNUb0NoYW5uZWwoaW5wdXQ6ICRpbnB1dCkge1xyXG4gICAgICAgICAgICBpZFxyXG4gICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgUkVNT1ZFX1BST01PVElPTlNfRlJPTV9DSEFOTkVMID0gZ3FsYFxyXG4gICAgbXV0YXRpb24gUmVtb3ZlUHJvbW90aW9uc0Zyb21DaGFubmVsKCRpbnB1dDogUmVtb3ZlUHJvbW90aW9uc0Zyb21DaGFubmVsSW5wdXQhKSB7XHJcbiAgICAgICAgcmVtb3ZlUHJvbW90aW9uc0Zyb21DaGFubmVsKGlucHV0OiAkaW5wdXQpIHtcclxuICAgICAgICAgICAgaWRcclxuICAgICAgICAgICAgbmFtZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVQcm9tb3Rpb25zQnVsa0FjdGlvbiA9IGNyZWF0ZUJ1bGtEZWxldGVBY3Rpb248SXRlbU9mPEdldFByb21vdGlvbkxpc3RRdWVyeSwgJ3Byb21vdGlvbnMnPj4oXHJcbiAgICB7XHJcbiAgICAgICAgbG9jYXRpb246ICdwcm9tb3Rpb24tbGlzdCcsXHJcbiAgICAgICAgcmVxdWlyZXNQZXJtaXNzaW9uOiBQZXJtaXNzaW9uLkRlbGV0ZVByb21vdGlvbixcclxuICAgICAgICBnZXRJdGVtTmFtZTogaXRlbSA9PiBpdGVtLm5hbWUsXHJcbiAgICAgICAgYnVsa0RlbGV0ZTogKGRhdGFTZXJ2aWNlLCBpZHMpID0+XHJcbiAgICAgICAgICAgIGRhdGFTZXJ2aWNlLnByb21vdGlvbi5kZWxldGVQcm9tb3Rpb25zKGlkcykucGlwZShtYXAocmVzID0+IHJlcy5kZWxldGVQcm9tb3Rpb25zKSksXHJcbiAgICB9LFxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFzc2lnblByb21vdGlvbnNUb0NoYW5uZWxCdWxrQWN0aW9uID0gY3JlYXRlQnVsa0Fzc2lnblRvQ2hhbm5lbEFjdGlvbjxcclxuICAgIEl0ZW1PZjxHZXRQcm9tb3Rpb25MaXN0UXVlcnksICdwcm9tb3Rpb25zJz5cclxuPih7XHJcbiAgICBsb2NhdGlvbjogJ3Byb21vdGlvbi1saXN0JyxcclxuICAgIHJlcXVpcmVzUGVybWlzc2lvbjogUGVybWlzc2lvbi5VcGRhdGVQcm9tb3Rpb24sXHJcbiAgICBnZXRJdGVtTmFtZTogaXRlbSA9PiBpdGVtLm5hbWUsXHJcbiAgICBidWxrQXNzaWduVG9DaGFubmVsOiAoZGF0YVNlcnZpY2UsIHByb21vdGlvbklkcywgY2hhbm5lbElkKSA9PlxyXG4gICAgICAgIGRhdGFTZXJ2aWNlXHJcbiAgICAgICAgICAgIC5tdXRhdGUoQXNzaWduUHJvbW90aW9uc1RvQ2hhbm5lbERvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICBwcm9tb3Rpb25JZHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocmVzID0+IHJlcy5hc3NpZ25Qcm9tb3Rpb25zVG9DaGFubmVsKSksXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVByb21vdGlvbnNGcm9tQ2hhbm5lbEJ1bGtBY3Rpb24gPSBjcmVhdGVCdWxrUmVtb3ZlRnJvbUNoYW5uZWxBY3Rpb248XHJcbiAgICBJdGVtT2Y8R2V0UHJvbW90aW9uTGlzdFF1ZXJ5LCAncHJvbW90aW9ucyc+XHJcbj4oe1xyXG4gICAgbG9jYXRpb246ICdwcm9tb3Rpb24tbGlzdCcsXHJcbiAgICByZXF1aXJlc1Blcm1pc3Npb246IFBlcm1pc3Npb24uRGVsZXRlQ2F0YWxvZyxcclxuICAgIGdldEl0ZW1OYW1lOiBpdGVtID0+IGl0ZW0ubmFtZSxcclxuICAgIGJ1bGtSZW1vdmVGcm9tQ2hhbm5lbDogKGRhdGFTZXJ2aWNlLCBwcm9tb3Rpb25JZHMsIGNoYW5uZWxJZCkgPT5cclxuICAgICAgICBkYXRhU2VydmljZVxyXG4gICAgICAgICAgICAubXV0YXRlKFJlbW92ZVByb21vdGlvbnNGcm9tQ2hhbm5lbERvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxJZCxcclxuICAgICAgICAgICAgICAgICAgICBwcm9tb3Rpb25JZHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucGlwZShtYXAocmVzID0+IHJlcy5yZW1vdmVQcm9tb3Rpb25zRnJvbUNoYW5uZWwpKSxcclxufSk7XHJcbiJdfQ==