import { ChangeDetectionStrategy, Component } from '@angular/core';
import { GetOrderChartDataDocument, MetricType, } from '@vendure/admin-ui/core';
import { gql } from 'apollo-angular';
import { BehaviorSubject, combineLatest, Subject, switchMap } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@vendure/admin-ui/core";
import * as i2 from "@clr/angular";
import * as i3 from "@angular/common";
import * as i4 from "@ngx-translate/core";
export const GET_ORDER_CHART_DATA = gql `
    query GetOrderChartData($refresh: Boolean, $types: [MetricType!]!) {
        metricSummary(input: { interval: Daily, types: $types, refresh: $refresh }) {
            interval
            type
            entries {
                label
                value
            }
        }
    }
`;
export class OrderChartWidgetComponent {
    constructor(dataService) {
        this.dataService = dataService;
        this.refresh$ = new Subject();
        this.metricType$ = new BehaviorSubject(MetricType.OrderTotal);
        this.MetricType = MetricType;
    }
    ngOnInit() {
        const currencyCode$ = this.dataService.settings
            .getActiveChannel()
            .refetchOnChannelChange()
            .mapStream(data => data.activeChannel.defaultCurrencyCode || undefined);
        const uiState$ = this.dataService.client.uiState().mapStream(data => data.uiState);
        const metricType$ = this.metricType$.pipe(distinctUntilChanged());
        this.metrics$ = combineLatest(metricType$, currencyCode$, uiState$).pipe(switchMap(([metricType, currencyCode, uiState]) => this.refresh$.pipe(startWith(false), switchMap(refresh => this.dataService
            .query(GetOrderChartDataDocument, {
            types: [metricType],
            refresh,
        })
            .mapSingle(data => data.metricSummary)
            .pipe(map(metrics => {
            const formatValueAs = metricType === MetricType.OrderCount ? 'number' : 'currency';
            const locale = `${uiState.language}-${uiState.locale}`;
            const formatOptions = {
                formatValueAs,
                currencyCode,
                locale,
            };
            return (metrics
                .find(m => m.type === metricType)
                ?.entries.map(entry => ({ ...entry, formatOptions })) ?? []);
        }))))));
    }
    refresh() {
        this.refresh$.next(true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: OrderChartWidgetComponent, deps: [{ token: i1.DataService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: OrderChartWidgetComponent, selector: "vdr-order-chart-widget", ngImport: i0, template: "<vdr-chart [entries]=\"metrics$ | async\" />\r\n<div class=\"flex\" *ngIf=\"metricType$ | async as activeMetricType\">\r\n    <button\r\n        class=\"button-small\"\r\n        (click)=\"metricType$.next(MetricType.OrderTotal)\"\r\n        [class.active]=\"activeMetricType === MetricType.OrderTotal\"\r\n    >\r\n        {{ 'dashboard.metric-order-total-value' | translate }}\r\n    </button>\r\n    <button\r\n        class=\"ml-1 button-small\"\r\n        (click)=\"metricType$.next(MetricType.OrderCount)\"\r\n        [class.active]=\"activeMetricType === MetricType.OrderCount\"\r\n    >\r\n        {{ 'dashboard.metric-number-of-orders' | translate }}\r\n    </button>\r\n    <button\r\n        class=\"ml-1 button-small\"\r\n        (click)=\"metricType$.next(MetricType.AverageOrderValue)\"\r\n        [class.active]=\"activeMetricType === MetricType.AverageOrderValue\"\r\n    >\r\n        {{ 'dashboard.metric-average-order-value' | translate }}\r\n    </button>\r\n    <div class=\"flex-spacer\"></div>\r\n    <button class=\"button-small\" (click)=\"refresh()\">\r\n        <clr-icon shape=\"refresh\"></clr-icon>\r\n    </button>\r\n</div>\r\n", styles: [".button-small.active{background-color:var(--color-primary-200);color:var(--color-primary-900)}\n"], dependencies: [{ kind: "directive", type: i2.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ChartComponent, selector: "vdr-chart", inputs: ["entries", "options"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: OrderChartWidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-order-chart-widget', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-chart [entries]=\"metrics$ | async\" />\r\n<div class=\"flex\" *ngIf=\"metricType$ | async as activeMetricType\">\r\n    <button\r\n        class=\"button-small\"\r\n        (click)=\"metricType$.next(MetricType.OrderTotal)\"\r\n        [class.active]=\"activeMetricType === MetricType.OrderTotal\"\r\n    >\r\n        {{ 'dashboard.metric-order-total-value' | translate }}\r\n    </button>\r\n    <button\r\n        class=\"ml-1 button-small\"\r\n        (click)=\"metricType$.next(MetricType.OrderCount)\"\r\n        [class.active]=\"activeMetricType === MetricType.OrderCount\"\r\n    >\r\n        {{ 'dashboard.metric-number-of-orders' | translate }}\r\n    </button>\r\n    <button\r\n        class=\"ml-1 button-small\"\r\n        (click)=\"metricType$.next(MetricType.AverageOrderValue)\"\r\n        [class.active]=\"activeMetricType === MetricType.AverageOrderValue\"\r\n    >\r\n        {{ 'dashboard.metric-average-order-value' | translate }}\r\n    </button>\r\n    <div class=\"flex-spacer\"></div>\r\n    <button class=\"button-small\" (click)=\"refresh()\">\r\n        <clr-icon shape=\"refresh\"></clr-icon>\r\n    </button>\r\n</div>\r\n", styles: [".button-small.active{background-color:var(--color-primary-200);color:var(--color-primary-900)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DataService }]; } });
//# sourceMappingURL=data:application/json;base64,