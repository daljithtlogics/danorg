import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { DataService, GetOrderHistoryQuery, ModalService, NotificationService, OrderDetailFragment, OrderDetailQueryDocument, TimelineHistoryEntry, TypedBaseDetailComponent } from '@vendure/admin-ui/core';
import { Observable, Subject } from 'rxjs';
import { OrderTransitionService } from '../../providers/order-transition.service';
import * as i0 from "@angular/core";
type Payment = NonNullable<OrderDetailFragment['payments']>[number];
export declare const ORDER_DETAIL_QUERY: import("apollo-angular").TypedDocumentNode<unknown, unknown>;
export declare class OrderDetailComponent extends TypedBaseDetailComponent<typeof OrderDetailQueryDocument, 'order'> implements OnInit, OnDestroy {
    private changeDetector;
    protected dataService: DataService;
    private notificationService;
    private modalService;
    private orderTransitionService;
    private formBuilder;
    customFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    orderLineCustomFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    detailForm: FormGroup<{
        customFields: FormGroup<{
            [x: string]: import("@angular/forms").FormControl<false | "" | 0 | Date | null>;
        }>;
    }>;
    history$: Observable<NonNullable<GetOrderHistoryQuery['order']>['history']['items'] | undefined>;
    nextStates$: Observable<string[]>;
    fetchHistory: Subject<void>;
    private readonly defaultStates;
    constructor(changeDetector: ChangeDetectorRef, dataService: DataService, notificationService: NotificationService, modalService: ModalService, orderTransitionService: OrderTransitionService, formBuilder: FormBuilder);
    ngOnInit(): void;
    ngOnDestroy(): void;
    openStateDiagram(): void;
    transitionToState(state: string): void;
    manuallyTransitionToState(order: OrderDetailFragment): void;
    transitionToModifying(): void;
    updateCustomFields(): void;
    getOrderAddressLines(orderAddress?: {
        [key: string]: string;
    }): string[];
    settlePayment(payment: Payment): void;
    transitionPaymentState({ payment, state }: {
        payment: Payment;
        state: string;
    }): void;
    canAddFulfillment(order: OrderDetailFragment): boolean;
    hasUnsettledModifications(order: OrderDetailFragment): boolean;
    getOutstandingModificationAmount(order: OrderDetailFragment): number;
    outstandingPaymentAmount(order: OrderDetailFragment): number;
    addManualPayment(order: OrderDetailFragment): void;
    fulfillOrder(): void;
    transitionFulfillment(id: string, state: string): void;
    cancelOrRefund(order: OrderDetailFragment): void;
    settleRefund(refund: Payment['refunds'][number]): void;
    addNote(event: {
        note: string;
        isPublic: boolean;
    }): void;
    updateNote(entry: TimelineHistoryEntry): void;
    deleteNote(entry: TimelineHistoryEntry): import("rxjs").Subscription;
    orderHasSettledPayments(order: OrderDetailFragment): boolean;
    private cancelOrder;
    private refundOrder;
    private refetchOrder;
    protected setFormValues(entity: OrderDetailFragment): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OrderDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OrderDetailComponent, "vdr-order-detail", never, {}, {}, never, never, false, never>;
}
export {};
