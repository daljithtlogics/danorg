import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { UntypedFormArray, UntypedFormControl, UntypedFormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AddItemInput, BaseDetailComponent, CustomFieldConfig, DataService, GetAvailableCountriesQuery, LanguageCode, ModalService, ModifyOrderInput, NotificationService, OrderDetailFragment, OrderLineInput, ProductSelectorSearchQuery, ServerConfigService, SurchargeInput } from '@vendure/admin-ui/core';
import { Observable } from 'rxjs';
import { OrderTransitionService } from '../../providers/order-transition.service';
import * as i0 from "@angular/core";
type ProductSelectorItem = ProductSelectorSearchQuery['search']['items'][number];
interface AddedLine {
    productVariantId: string;
    productAsset?: ProductSelectorItem['productAsset'] | null;
    productVariantName: string;
    sku: string;
    priceWithTax: number;
    price: number;
    quantity: number;
}
type ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {
    addItems: Array<AddItemInput & {
        customFields?: any;
    }>;
    adjustOrderLines: Array<OrderLineInput & {
        customFields?: any;
    }>;
};
export declare class OrderEditorComponent extends BaseDetailComponent<OrderDetailFragment> implements OnInit, OnDestroy {
    private changeDetector;
    protected dataService: DataService;
    private notificationService;
    private modalService;
    private orderTransitionService;
    availableCountries$: Observable<GetAvailableCountriesQuery['countries']['items']>;
    addressCustomFields: CustomFieldConfig[];
    detailForm: UntypedFormGroup;
    couponCodesControl: UntypedFormControl;
    orderLineCustomFieldsFormArray: UntypedFormArray;
    addItemCustomFieldsFormArray: UntypedFormArray;
    addItemCustomFieldsForm: UntypedFormGroup;
    addItemSelectedVariant: ProductSelectorItem | undefined;
    orderLineCustomFields: CustomFieldConfig[];
    modifyOrderInput: ModifyOrderData;
    surchargeForm: UntypedFormGroup;
    shippingAddressForm: UntypedFormGroup;
    billingAddressForm: UntypedFormGroup;
    note: string;
    recalculateShipping: boolean;
    previousState: string;
    private addedVariants;
    constructor(router: Router, route: ActivatedRoute, serverConfigService: ServerConfigService, changeDetector: ChangeDetectorRef, dataService: DataService, notificationService: NotificationService, modalService: ModalService, orderTransitionService: OrderTransitionService);
    get addedLines(): AddedLine[];
    ngOnInit(): void;
    ngOnDestroy(): void;
    transitionToPriorState(order: OrderDetailFragment): void;
    canPreviewChanges(): boolean;
    isLineModified(line: OrderDetailFragment['lines'][number]): boolean;
    updateLineQuantity(line: OrderDetailFragment['lines'][number], quantity: string): void;
    updateAddedItemQuantity(item: AddedLine, quantity: string): void;
    trackByProductVariantId(index: number, item: AddedLine): string;
    getSelectedItemPrice(result: ProductSelectorItem | undefined): number;
    addItemToOrder(result: ProductSelectorItem | undefined): void;
    private isMatchingAddItemRow;
    removeAddedItem(index: number): void;
    getSurchargePrices(surcharge: SurchargeInput): {
        price: number;
        priceWithTax: number;
    };
    addSurcharge(value: any): void;
    removeSurcharge(index: number): void;
    previewAndModify(order: OrderDetailFragment): void;
    private addAddressCustomFieldsFormGroup;
    protected setFormValues(entity: OrderDetailFragment, languageCode: LanguageCode): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OrderEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OrderEditorComponent, "vdr-order-editor", never, {}, {}, never, never, false, never>;
}
export {};
