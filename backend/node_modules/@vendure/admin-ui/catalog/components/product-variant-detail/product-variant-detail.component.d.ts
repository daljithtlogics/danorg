import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, UntypedFormGroup } from '@angular/forms';
import { Asset, CurrencyCode, DataService, GetProductVariantDetailDocument, GetProductVariantDetailQuery, GlobalFlag, ItemOf, LanguageCode, ModalService, NotificationService, Permission, ProductOptionFragment, TypedBaseDetailComponent } from '@vendure/admin-ui/core';
import { Observable } from 'rxjs';
import { ProductDetailService } from '../../providers/product-detail/product-detail.service';
import * as i0 from "@angular/core";
interface SelectedAssets {
    assets?: Asset[];
    featuredAsset?: Asset;
}
export declare class ProductVariantDetailComponent extends TypedBaseDetailComponent<typeof GetProductVariantDetailDocument, 'productVariant'> implements OnInit, OnDestroy {
    private productDetailService;
    private formBuilder;
    private modalService;
    private notificationService;
    protected dataService: DataService;
    private changeDetector;
    readonly updatePermissions: Permission[];
    readonly customFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    readonly customOptionFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    stockLevels$: Observable<NonNullable<GetProductVariantDetailQuery['productVariant']>['stockLevels']>;
    detailForm: FormGroup<{
        id: FormControl<string | null>;
        enabled: FormControl<boolean | null>;
        sku: FormControl<string | null>;
        name: FormControl<string | null>;
        taxCategoryId: FormControl<string | null>;
        stockOnHand: FormControl<number | null>;
        useGlobalOutOfStockThreshold: FormControl<boolean | null>;
        outOfStockThreshold: FormControl<number | null>;
        trackInventory: FormControl<GlobalFlag | null>;
        facetValueIds: FormControl<string[] | null>;
        customFields?: FormControl<unknown> | undefined;
    }>;
    stockLevelsForm: import("@angular/forms").FormArray<FormGroup<{
        stockLocationId: FormControl<string | null>;
        stockLocationName: FormControl<string | null>;
        stockOnHand: FormControl<number | null>;
        stockAllocated: FormControl<number | null>;
    }>>;
    pricesForm: import("@angular/forms").FormArray<FormGroup<{
        price: FormControl<number | null>;
        currencyCode: FormControl<CurrencyCode | null>;
        delete: FormControl<boolean | null>;
    }>>;
    assetChanges: SelectedAssets;
    taxCategories$: Observable<Array<ItemOf<GetProductVariantDetailQuery, 'taxCategories'>>>;
    unusedStockLocation$: Observable<Array<ItemOf<GetProductVariantDetailQuery, 'stockLocations'>>>;
    unusedCurrencyCodes$: Observable<string[]>;
    channelPriceIncludesTax$: Observable<boolean>;
    readonly GlobalFlag: typeof GlobalFlag;
    globalTrackInventory: boolean;
    globalOutOfStockThreshold: number;
    facetValues$: Observable<NonNullable<GetProductVariantDetailQuery['productVariant']>['facetValues']>;
    channelDefaultCurrencyCode: CurrencyCode;
    constructor(productDetailService: ProductDetailService, formBuilder: FormBuilder, modalService: ModalService, notificationService: NotificationService, dataService: DataService, changeDetector: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    addPriceInCurrency(currencyCode: CurrencyCode): void;
    toggleDeletePrice(deleteFormControl: FormControl): void;
    addStockLocation(stockLocation: ItemOf<GetProductVariantDetailQuery, 'stockLocations'>): void;
    save(): void;
    assetsChanged(): boolean;
    inventoryIsNotTracked(formGroup: UntypedFormGroup): boolean;
    optionGroupCode(optionGroupId: string): string | undefined;
    optionName(option: ProductOptionFragment): string;
    removeFacetValue(facetValueId: string): void;
    selectFacetValue(): void;
    private displayFacetValueModal;
    protected setFormValues(variant: NonNullable<GetProductVariantDetailQuery['productVariant']>, languageCode: LanguageCode): void;
    /**
     * Given a product and the value of the detailForm, this method creates an updated copy of the product which
     * can then be persisted to the API.
     */
    private getUpdatedVariant;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductVariantDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductVariantDetailComponent, "vdr-product-variant-detail", never, {}, {}, never, never, false, never>;
}
export {};
