import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { RootNode } from './array-to-tree';
import { CollectionPartial, RearrangeEvent } from './collection-tree.types';
import * as i0 from "@angular/core";
/**
 * Facilitates communication between the CollectionTreeComponent and child CollectionTreeNodeComponents
 * without introducing a cyclic dependency.
 */
export declare class CollectionTreeService implements OnDestroy {
    private allMoveListItems;
    private collectionTree;
    private _rearrange$;
    private _delete$;
    rearrange$: Observable<RearrangeEvent>;
    delete$: Observable<string>;
    constructor();
    ngOnDestroy(): void;
    setCollectionTree(tree: RootNode<CollectionPartial>): void;
    resetMoveList(): void;
    getMoveListItems(collection: CollectionPartial): {
        path: string;
        id: string;
        ancestorIdPath: Set<string>;
    }[];
    onDrop(event: CdkDragDrop<CollectionPartial | RootNode<CollectionPartial>>): void;
    onMove(event: RearrangeEvent): void;
    onDelete(id: string): void;
    private calculateAllMoveListItems;
    static ɵfac: i0.ɵɵFactoryDeclaration<CollectionTreeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CollectionTreeService>;
}
