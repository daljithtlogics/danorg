import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { Asset, CollectionDetailQueryDocument, CollectionFragment, ConfigurableOperation, ConfigurableOperationDefinition, ConfigurableOperationInput, DataService, LanguageCode, LocalStorageService, ModalService, NotificationService, Permission, TypedBaseDetailComponent } from '@vendure/admin-ui/core';
import { Observable } from 'rxjs';
import { CollectionContentsComponent } from '../collection-contents/collection-contents.component';
import * as i0 from "@angular/core";
export declare const COLLECTION_DETAIL_QUERY: import("apollo-angular").TypedDocumentNode<unknown, unknown>;
export declare class CollectionDetailComponent extends TypedBaseDetailComponent<typeof CollectionDetailQueryDocument, 'collection'> implements OnInit, OnDestroy {
    private changeDetector;
    protected dataService: DataService;
    private formBuilder;
    private notificationService;
    private modalService;
    private localStorageService;
    customFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    detailForm: import("@angular/forms").FormGroup<{
        name: import("@angular/forms").FormControl<string | null>;
        slug: import("@angular/forms").FormControl<string | null>;
        description: import("@angular/forms").FormControl<string | null>;
        visible: import("@angular/forms").FormControl<boolean | null>;
        inheritFilters: import("@angular/forms").FormControl<boolean | null>;
        filters: import("@angular/forms").FormArray<import("@angular/forms").FormControl<unknown>>;
        customFields: import("@angular/forms").FormGroup<{
            [x: string]: import("@angular/forms").FormControl<false | "" | 0 | Date | null>;
        }>;
    }>;
    assetChanges: {
        assets?: Asset[];
        featuredAsset?: Asset;
    };
    filters: ConfigurableOperation[];
    allFilters: ConfigurableOperationDefinition[];
    updatedFilters$: Observable<ConfigurableOperationInput[]>;
    inheritFilters$: Observable<boolean>;
    livePreview: boolean;
    parentId$: Observable<string | undefined>;
    readonly updatePermission: Permission[];
    private filterRemoved$;
    contentsComponent: CollectionContentsComponent;
    constructor(changeDetector: ChangeDetectorRef, dataService: DataService, formBuilder: FormBuilder, notificationService: NotificationService, modalService: ModalService, localStorageService: LocalStorageService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    getFilterDefinition(_filter: ConfigurableOperation): ConfigurableOperationDefinition | undefined;
    assetsChanged(): boolean;
    /**
     * If creating a new Collection, automatically generate the slug based on the collection name.
     */
    updateSlug(nameValue: string): void;
    addFilter(collectionFilter: ConfigurableOperation): void;
    removeFilter(index: number): void;
    create(): void;
    save(): void;
    canDeactivate(): boolean;
    toggleLivePreview(): void;
    trackByFn(index: number, item: ConfigurableOperation): string;
    /**
     * Sets the values of the form on changes to the category or current language.
     */
    protected setFormValues(entity: CollectionFragment, languageCode: LanguageCode): void;
    /**
     * Given a category and the value of the form, this method creates an updated copy of the category which
     * can then be persisted to the API.
     */
    private getUpdatedCollection;
    /**
     * Maps an array of conditions or actions to the input format expected by the GraphQL API.
     */
    private mapOperationsToInputs;
    static ɵfac: i0.ɵɵFactoryDeclaration<CollectionDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CollectionDetailComponent, "vdr-collection-detail", never, {}, {}, never, never, false, never>;
}
