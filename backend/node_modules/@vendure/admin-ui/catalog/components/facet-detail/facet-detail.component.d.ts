import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { DataService, FacetWithValuesFragment, GetFacetDetailDocument, LanguageCode, ModalService, NotificationService, Permission, TypedBaseDetailComponent } from '@vendure/admin-ui/core';
import { BehaviorSubject, Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare const FACET_DETAIL_QUERY: import("apollo-angular").TypedDocumentNode<unknown, unknown>;
type ValueItem = FacetWithValuesFragment['values'][number] | {
    id: string;
    name: string;
    code: string;
};
export declare class FacetDetailComponent extends TypedBaseDetailComponent<typeof GetFacetDetailDocument, 'facet'> implements OnInit, OnDestroy {
    private changeDetector;
    protected dataService: DataService;
    private formBuilder;
    private notificationService;
    private modalService;
    readonly customFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    readonly customValueFields: import("@vendure/admin-ui/core").CustomFieldConfig[];
    detailForm: FormGroup<{
        facet: FormGroup<{
            code: FormControl<string | null>;
            name: FormControl<string | null>;
            visible: FormControl<boolean | null>;
            customFields: FormGroup<{
                [x: string]: FormControl<false | "" | 0 | Date | null>;
            }>;
        }>;
        values: FormGroup<{
            [key: string]: FormGroup<{
                id: FormControl<string>;
                name: FormControl<string>;
                code: FormControl<string>;
                customFields: FormGroup;
            }>;
        }>;
    }>;
    currentPage: number;
    itemsPerPage: number;
    filterControl: FormControl<string | null>;
    values$: BehaviorSubject<ValueItem[]>;
    filteredValues$: Observable<ValueItem[]>;
    readonly updatePermission: Permission[];
    constructor(changeDetector: ChangeDetectorRef, dataService: DataService, formBuilder: FormBuilder, notificationService: NotificationService, modalService: ModalService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    updateCode(currentCode: string, nameValue: string): void;
    updateValueCode(currentCode: string, nameValue: string, valueId: string): void;
    customValueFieldIsSet(index: number, name: string): boolean;
    addFacetValue(): void;
    create(): void;
    save(): void;
    deleteFacetValue(facetValueId: string): void;
    private showModalAndDelete;
    /**
     * Sets the values of the form on changes to the facet or current language.
     */
    protected setFormValues(facet: FacetWithValuesFragment, languageCode: LanguageCode): void;
    /**
     * Given a facet and the value of the detailForm, this method creates an updated copy of the facet which
     * can then be persisted to the API.
     */
    private getUpdatedFacet;
    /**
     * Given an array of facet values and the values from the detailForm, this method creates a new array
     * which can be persisted to the API via a createFacetValues mutation.
     */
    private getCreatedFacetValues;
    /**
     * Given an array of facet values and the values from the detailForm, this method creates a new array
     * which can be persisted to the API via an updateFacetValues mutation.
     */
    private getUpdatedFacetValues;
    private createTempId;
    private isTempId;
    static ɵfac: i0.ɵɵFactoryDeclaration<FacetDetailComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FacetDetailComponent, "vdr-facet-detail", never, {}, {}, never, never, false, never>;
}
export {};
