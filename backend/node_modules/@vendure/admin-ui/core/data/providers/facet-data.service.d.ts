import { WatchQueryFetchPolicy } from '@apollo/client/core';
import * as Codegen from '../../common/generated-types';
import { BaseDataService } from './base-data.service';
export declare class FacetDataService {
    private baseDataService;
    constructor(baseDataService: BaseDataService);
    getFacetValues(options: Codegen.FacetValueListOptions, fetchPolicy?: WatchQueryFetchPolicy): import("@vendure/admin-ui/core").QueryResult<Codegen.GetFacetValueListQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.FacetValueListOptions> | undefined;
    }>>;
    createFacet(facet: Codegen.CreateFacetInput): import("rxjs").Observable<Codegen.CreateFacetMutation>;
    updateFacet(facet: Codegen.UpdateFacetInput): import("rxjs").Observable<Codegen.UpdateFacetMutation>;
    deleteFacet(id: string, force: boolean): import("rxjs").Observable<Codegen.DeleteFacetMutation>;
    deleteFacets(ids: string[], force: boolean): import("rxjs").Observable<Codegen.DeleteFacetsMutation>;
    createFacetValues(facetValues: Codegen.CreateFacetValueInput[]): import("rxjs").Observable<Codegen.CreateFacetValuesMutation>;
    updateFacetValues(facetValues: Codegen.UpdateFacetValueInput[]): import("rxjs").Observable<Codegen.UpdateFacetValuesMutation>;
    deleteFacetValues(ids: string[], force: boolean): import("rxjs").Observable<Codegen.DeleteFacetValuesMutation>;
    assignFacetsToChannel(input: Codegen.AssignFacetsToChannelInput): import("rxjs").Observable<Codegen.AssignFacetsToChannelMutation>;
    removeFacetsFromChannel(input: Codegen.RemoveFacetsFromChannelInput): import("rxjs").Observable<Codegen.RemoveFacetsFromChannelMutation>;
}
