import { FetchPolicy, WatchQueryFetchPolicy } from '@apollo/client/core';
import * as Codegen from '../../common/generated-types';
import { ChannelListOptions, JobListOptions, SellerListOptions, TaxCategoryListOptions } from '../../common/generated-types';
import { BaseDataService } from './base-data.service';
export declare class SettingsDataService {
    private baseDataService;
    constructor(baseDataService: BaseDataService);
    getAvailableCountries(): import("@vendure/admin-ui/core").QueryResult<Codegen.GetAvailableCountriesQuery, Record<string, any>>;
    createCountry(input: Codegen.CreateCountryInput): import("rxjs").Observable<Codegen.CreateCountryMutation>;
    updateCountry(input: Codegen.UpdateCountryInput): import("rxjs").Observable<Codegen.UpdateCountryMutation>;
    deleteCountry(id: string): import("rxjs").Observable<Codegen.DeleteCountryMutation>;
    deleteCountries(ids: string[]): import("rxjs").Observable<Codegen.DeleteCountriesMutation>;
    getZone(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetZoneQuery, Codegen.Exact<{
        id: string;
    }>>;
    createZone(input: Codegen.CreateZoneInput): import("rxjs").Observable<Codegen.CreateZoneMutation>;
    updateZone(input: Codegen.UpdateZoneInput): import("rxjs").Observable<Codegen.UpdateZoneMutation>;
    deleteZone(id: string): import("rxjs").Observable<Codegen.DeleteZoneMutation>;
    deleteZones(ids: string[]): import("rxjs").Observable<Codegen.DeleteZonesMutation>;
    addMembersToZone(zoneId: string, memberIds: string[]): import("rxjs").Observable<Codegen.AddMembersToZoneMutation>;
    removeMembersFromZone(zoneId: string, memberIds: string[]): import("rxjs").Observable<Codegen.RemoveMembersFromZoneMutation>;
    getTaxCategories(options?: TaxCategoryListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetTaxCategoriesQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.TaxCategoryListOptions> | undefined;
    }>>;
    createTaxCategory(input: Codegen.CreateTaxCategoryInput): import("rxjs").Observable<Codegen.CreateTaxCategoryMutation>;
    updateTaxCategory(input: Codegen.UpdateTaxCategoryInput): import("rxjs").Observable<Codegen.UpdateTaxCategoryMutation>;
    deleteTaxCategory(id: string): import("rxjs").Observable<Codegen.DeleteTaxCategoryMutation>;
    deleteTaxCategories(ids: string[]): import("rxjs").Observable<Codegen.DeleteTaxCategoriesMutation>;
    getTaxRatesSimple(take?: number, skip?: number, fetchPolicy?: FetchPolicy): import("@vendure/admin-ui/core").QueryResult<Codegen.GetTaxRateListSimpleQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.TaxRateListOptions> | undefined;
    }>>;
    createTaxRate(input: Codegen.CreateTaxRateInput): import("rxjs").Observable<Codegen.CreateTaxRateMutation>;
    updateTaxRate(input: Codegen.UpdateTaxRateInput): import("rxjs").Observable<Codegen.UpdateTaxRateMutation>;
    deleteTaxRate(id: string): import("rxjs").Observable<Codegen.DeleteTaxRateMutation>;
    deleteTaxRates(ids: string[]): import("rxjs").Observable<Codegen.DeleteTaxRatesMutation>;
    getChannels(options?: ChannelListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetChannelsQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.ChannelListOptions> | undefined;
    }>>;
    getSellerList(options?: SellerListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetSellersQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.SellerListOptions> | undefined;
    }>>;
    createSeller(input: Codegen.CreateSellerInput): import("rxjs").Observable<Codegen.CreateSellerMutation>;
    updateSeller(input: Codegen.UpdateSellerInput): import("rxjs").Observable<Codegen.UpdateSellerMutation>;
    deleteSeller(id: string): import("rxjs").Observable<Codegen.DeleteSellerMutation>;
    deleteSellers(ids: string[]): import("rxjs").Observable<Codegen.DeleteSellersMutation>;
    getActiveChannel(fetchPolicy?: FetchPolicy): import("@vendure/admin-ui/core").QueryResult<Codegen.GetActiveChannelQuery, Codegen.Exact<{
        [key: string]: never;
    }>>;
    createChannel(input: Codegen.CreateChannelInput): import("rxjs").Observable<Codegen.CreateChannelMutation>;
    updateChannel(input: Codegen.UpdateChannelInput): import("rxjs").Observable<Codegen.UpdateChannelMutation>;
    deleteChannel(id: string): import("rxjs").Observable<Codegen.DeleteChannelMutation>;
    deleteChannels(ids: string[]): import("rxjs").Observable<Codegen.DeleteChannelsMutation>;
    createPaymentMethod(input: Codegen.CreatePaymentMethodInput): import("rxjs").Observable<Codegen.CreatePaymentMethodMutation>;
    updatePaymentMethod(input: Codegen.UpdatePaymentMethodInput): import("rxjs").Observable<Codegen.UpdatePaymentMethodMutation>;
    deletePaymentMethod(id: string, force: boolean): import("rxjs").Observable<Codegen.DeletePaymentMethodMutation>;
    deletePaymentMethods(ids: string[], force: boolean): import("rxjs").Observable<Codegen.DeletePaymentMethodsMutation>;
    getPaymentMethodOperations(): import("@vendure/admin-ui/core").QueryResult<Codegen.GetPaymentMethodOperationsQuery, Record<string, any>>;
    getGlobalSettings(fetchPolicy?: WatchQueryFetchPolicy): import("@vendure/admin-ui/core").QueryResult<Codegen.GetGlobalSettingsQuery, Record<string, any>>;
    updateGlobalSettings(input: Codegen.UpdateGlobalSettingsInput): import("rxjs").Observable<Codegen.UpdateGlobalSettingsMutation>;
    getJob(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetJobInfoQuery, Codegen.Exact<{
        id: string;
    }>>;
    pollJobs(ids: string[]): import("@vendure/admin-ui/core").QueryResult<Codegen.GetJobsByIdQuery, Codegen.Exact<{
        ids: string | string[];
    }>>;
    getAllJobs(options?: JobListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetAllJobsQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.JobListOptions> | undefined;
    }>>;
    getJobQueues(): import("@vendure/admin-ui/core").QueryResult<Codegen.GetJobQueueListQuery, Record<string, any>>;
    getRunningJobs(): import("@vendure/admin-ui/core").QueryResult<Codegen.GetAllJobsQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.JobListOptions> | undefined;
    }>>;
    cancelJob(id: string): import("rxjs").Observable<Codegen.CancelJobMutation>;
}
