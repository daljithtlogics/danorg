import { MutationUpdaterFn, WatchQueryFetchPolicy } from '@apollo/client/core';
import { TypedDocumentNode } from '@graphql-typed-document-node/core';
import { Apollo } from 'apollo-angular';
import { DocumentNode } from 'graphql/language/ast';
import { Observable } from 'rxjs';
import { QueryResult } from '../query-result';
import { ServerConfigService } from '../server-config';
import * as i0 from "@angular/core";
export declare class BaseDataService {
    private apollo;
    private serverConfigService;
    constructor(apollo: Apollo, serverConfigService: ServerConfigService);
    private get customFields();
    /**
     * Performs a GraphQL watch query
     */
    query<T, V extends Record<string, any> = Record<string, any>>(query: DocumentNode | TypedDocumentNode<T, V>, variables?: V, fetchPolicy?: WatchQueryFetchPolicy): QueryResult<T, V>;
    /**
     * Performs a GraphQL mutation
     */
    mutate<T, V extends Record<string, any> = Record<string, any>>(mutation: DocumentNode | TypedDocumentNode<T, V>, variables?: V, update?: MutationUpdaterFn<T>): Observable<T>;
    private prepareCustomFields;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BaseDataService>;
}
