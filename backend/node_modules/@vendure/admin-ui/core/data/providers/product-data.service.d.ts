import * as Codegen from '../../common/generated-types';
import { BaseDataService } from './base-data.service';
export declare class ProductDataService {
    private baseDataService;
    constructor(baseDataService: BaseDataService);
    searchProducts(term: string, take?: number, skip?: number): import("@vendure/admin-ui/core").QueryResult<Codegen.SearchProductsQuery, Codegen.Exact<{
        input: Codegen.SearchInput;
    }>>;
    productSelectorSearch(term: string, take: number): import("@vendure/admin-ui/core").QueryResult<Codegen.ProductSelectorSearchQuery, Codegen.Exact<{
        term: string;
        take: number;
    }>>;
    reindex(): import("rxjs").Observable<Codegen.ReindexMutation>;
    getPendingSearchIndexUpdates(): import("@vendure/admin-ui/core").QueryResult<Codegen.GetPendingSearchIndexUpdatesQuery, Record<string, any>>;
    runPendingSearchIndexUpdates(): import("rxjs").Observable<Codegen.RunPendingSearchIndexUpdatesMutation>;
    getProducts(options: Codegen.ProductListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductListQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.ProductListOptions> | undefined;
    }>>;
    getProduct(id: string, variantListOptions?: Codegen.ProductVariantListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductWithVariantsQuery, Codegen.Exact<{
        id: string;
        variantListOptions?: Codegen.InputMaybe<Codegen.ProductVariantListOptions> | undefined;
    }>>;
    getProductSimple(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductSimpleQuery, Codegen.Exact<{
        id: string;
    }>>;
    getProductVariantsSimple(options: Codegen.ProductVariantListOptions, productId?: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductVariantListSimpleQuery, Codegen.Exact<{
        options: Codegen.ProductVariantListOptions;
        productId?: Codegen.InputMaybe<string> | undefined;
    }>>;
    getProductVariants(options: Codegen.ProductVariantListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductVariantListQuery, Codegen.Exact<{
        options: Codegen.ProductVariantListOptions;
    }>>;
    getProductVariantsForProduct(options: Codegen.ProductVariantListOptions, productId: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductVariantListForProductQuery, Codegen.Exact<{
        options: Codegen.ProductVariantListOptions;
        productId?: Codegen.InputMaybe<string> | undefined;
    }>>;
    getProductVariant(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductVariantQuery, Codegen.Exact<{
        id: string;
    }>>;
    getProductVariantsOptions(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductVariantOptionsQuery, Codegen.Exact<{
        id: string;
    }>>;
    getProductOptionGroup(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductOptionGroupQuery, Codegen.Exact<{
        id: string;
    }>>;
    createProduct(product: Codegen.CreateProductInput): import("rxjs").Observable<Codegen.CreateProductMutation>;
    updateProduct(product: Codegen.UpdateProductInput): import("rxjs").Observable<Codegen.UpdateProductMutation>;
    deleteProduct(id: string): import("rxjs").Observable<Codegen.DeleteProductMutation>;
    deleteProducts(ids: string[]): import("rxjs").Observable<Codegen.DeleteProductsMutation>;
    createProductVariants(input: Codegen.CreateProductVariantInput[]): import("rxjs").Observable<Codegen.CreateProductVariantsMutation>;
    updateProductVariants(variants: Codegen.UpdateProductVariantInput[]): import("rxjs").Observable<Codegen.UpdateProductVariantsMutation>;
    deleteProductVariant(id: string): import("rxjs").Observable<Codegen.DeleteProductVariantMutation>;
    deleteProductVariants(ids: string[]): import("rxjs").Observable<Codegen.DeleteProductVariantsMutation>;
    createProductOptionGroups(productOptionGroup: Codegen.CreateProductOptionGroupInput): import("rxjs").Observable<Codegen.CreateProductOptionGroupMutation>;
    addOptionGroupToProduct(variables: Codegen.AddOptionGroupToProductMutationVariables): import("rxjs").Observable<Codegen.AddOptionGroupToProductMutation>;
    addOptionToGroup(input: Codegen.CreateProductOptionInput): import("rxjs").Observable<Codegen.AddOptionToGroupMutation>;
    deleteProductOption(id: string): import("rxjs").Observable<Codegen.DeleteProductOptionMutation>;
    removeOptionGroupFromProduct(variables: Codegen.RemoveOptionGroupFromProductMutationVariables): import("rxjs").Observable<Codegen.RemoveOptionGroupFromProductMutation>;
    updateProductOption(input: Codegen.UpdateProductOptionInput): import("rxjs").Observable<Codegen.UpdateProductOptionMutation>;
    updateProductOptionGroup(input: Codegen.UpdateProductOptionGroupInput): import("rxjs").Observable<Codegen.UpdateProductOptionGroupMutation>;
    getProductOptionGroups(filterTerm?: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetProductOptionGroupsQuery, Codegen.Exact<{
        filterTerm?: Codegen.InputMaybe<string> | undefined;
    }>>;
    getAssetList(take?: number, skip?: number): import("@vendure/admin-ui/core").QueryResult<Codegen.GetAssetListQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.AssetListOptions> | undefined;
    }>>;
    getAsset(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetAssetQuery, Codegen.Exact<{
        id: string;
    }>>;
    createAssets(files: File[]): import("rxjs").Observable<Codegen.CreateAssetsMutation>;
    updateAsset(input: Codegen.UpdateAssetInput): import("rxjs").Observable<Codegen.UpdateAssetMutation>;
    deleteAssets(ids: string[], force: boolean): import("rxjs").Observable<Codegen.DeleteAssetsMutation>;
    assignProductsToChannel(input: Codegen.AssignProductsToChannelInput): import("rxjs").Observable<Codegen.AssignProductsToChannelMutation>;
    removeProductsFromChannel(input: Codegen.RemoveProductsFromChannelInput): import("rxjs").Observable<Codegen.RemoveProductsFromChannelMutation>;
    assignVariantsToChannel(input: Codegen.AssignProductVariantsToChannelInput): import("rxjs").Observable<Codegen.AssignVariantsToChannelMutation>;
    removeVariantsFromChannel(input: Codegen.RemoveProductVariantsFromChannelInput): import("rxjs").Observable<Codegen.RemoveVariantsFromChannelMutation>;
    getTag(id: string): import("@vendure/admin-ui/core").QueryResult<Codegen.GetTagQuery, Codegen.Exact<{
        id: string;
    }>>;
    getTagList(options?: Codegen.TagListOptions): import("@vendure/admin-ui/core").QueryResult<Codegen.GetTagListQuery, Codegen.Exact<{
        options?: Codegen.InputMaybe<Codegen.TagListOptions> | undefined;
    }>>;
    createTag(input: Codegen.CreateTagInput): import("rxjs").Observable<Codegen.CreateTagMutation>;
    updateTag(input: Codegen.UpdateTagInput): import("rxjs").Observable<Codegen.UpdateTagMutation>;
    deleteTag(id: string): import("rxjs").Observable<Codegen.DeleteTagMutation>;
}
