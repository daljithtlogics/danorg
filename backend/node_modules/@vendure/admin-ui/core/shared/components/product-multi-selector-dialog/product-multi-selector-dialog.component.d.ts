import { ChangeDetectorRef, OnInit } from '@angular/core';
import { PaginationInstance } from 'ngx-pagination';
import { BehaviorSubject, Observable } from 'rxjs';
import { SearchProductsQuery } from '../../../common/generated-types';
import { SelectionManager } from '../../../common/utilities/selection-manager';
import { DataService } from '../../../data/providers/data.service';
import { Dialog } from '../../../providers/modal/modal.types';
import * as i0 from "@angular/core";
export type SearchItem = SearchProductsQuery['search']['items'][number];
export declare class ProductMultiSelectorDialogComponent implements OnInit, Dialog<SearchItem[]> {
    private dataService;
    private changeDetector;
    mode: 'product' | 'variant';
    initialSelectionIds: string[];
    items$: Observable<SearchItem[]>;
    facetValues$: Observable<SearchProductsQuery['search']['facetValues']>;
    searchTerm$: BehaviorSubject<string>;
    searchFacetValueIds$: BehaviorSubject<string[]>;
    paginationConfig: PaginationInstance;
    selectionManager: SelectionManager<SearchItem>;
    resolveWith: (result?: SearchItem[]) => void;
    private paginationConfig$;
    constructor(dataService: DataService, changeDetector: ChangeDetectorRef);
    ngOnInit(): void;
    trackByFn(index: number, item: SearchItem): string;
    setSearchTerm(term: string): void;
    setFacetValueIds(ids: string[]): void;
    toggleSelection(item: SearchItem, event: MouseEvent): void;
    clearSelection(): void;
    isSelected(item: SearchItem): boolean;
    entityInfoClick(event: MouseEvent): void;
    pageChange(page: number): void;
    itemsPerPageChange(itemsPerPage: number): void;
    select(): void;
    cancel(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductMultiSelectorDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductMultiSelectorDialogComponent, "vdr-product-multi-selector-dialog", never, {}, {}, never, never, false, never>;
}
