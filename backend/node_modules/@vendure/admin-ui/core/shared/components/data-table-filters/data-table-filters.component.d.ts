import { AfterViewInit, ChangeDetectorRef, ComponentRef } from '@angular/core';
import { AbstractControl } from '@angular/forms';
import { FormInputComponent } from '../../../common/component-registry-types';
import { DataTableFilter } from '../../../providers/data-table/data-table-filter';
import { DataTableFilterCollection, FilterWithValue } from '../../../providers/data-table/data-table-filter-collection';
import { I18nService } from '../../../providers/i18n/i18n.service';
import { DropdownComponent } from '../dropdown/dropdown.component';
import { CustomFilterComponentDirective } from './custom-filter-component.directive';
import * as i0 from "@angular/core";
export declare class DataTableFiltersComponent implements AfterViewInit {
    private i18nService;
    private changeDetectorRef;
    filters: DataTableFilterCollection;
    filterWithValue?: FilterWithValue;
    dropdown: DropdownComponent;
    set customComponentHost(content: CustomFilterComponentDirective);
    _customComponentHost: CustomFilterComponentDirective;
    protected state: 'new' | 'active';
    protected formControl: AbstractControl;
    protected selectedFilter: DataTableFilter | undefined;
    protected customComponent?: ComponentRef<FormInputComponent>;
    onFKeyPress(event: KeyboardEvent): void;
    constructor(i18nService: I18nService, changeDetectorRef: ChangeDetectorRef);
    ngAfterViewInit(): void;
    selectFilter(filter: DataTableFilter, value?: any): void;
    activate(event: Event): void;
    deactivate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataTableFiltersComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataTableFiltersComponent, "vdr-data-table-filters", never, { "filters": { "alias": "filters"; "required": false; }; "filterWithValue": { "alias": "filterWithValue"; "required": false; }; }, {}, never, never, false, never>;
}
