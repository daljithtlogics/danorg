import { AfterContentInit, ChangeDetectorRef, EventEmitter, Injector, OnChanges, OnDestroy, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable, Subject } from 'rxjs';
import { LanguageCode } from '../../../common/generated-types';
import { DataService } from '../../../data/providers/data.service';
import { DataTableFilterCollection } from '../../../providers/data-table/data-table-filter-collection';
import { DataTableConfig, LocalStorageService } from '../../../providers/local-storage/local-storage.service';
import { BulkActionMenuComponent } from '../bulk-action-menu/bulk-action-menu.component';
import { FilterPresetService } from '../data-table-filter-presets/filter-preset.service';
import { DataTable2ColumnComponent } from './data-table-column.component';
import { DataTableComponentConfig, DataTableCustomComponentService, DataTableLocationId } from './data-table-custom-component.service';
import { DataTableCustomFieldColumnComponent } from './data-table-custom-field-column.component';
import { DataTable2SearchComponent } from './data-table-search.component';
import * as i0 from "@angular/core";
/**
 * @description
 * A table for displaying PaginatedList results. It is designed to be used inside components which
 * extend the {@link BaseListComponent} or {@link TypedBaseListComponent} class.
 *
 * @example
 * ```html
 * <vdr-data-table-2
 *     id="product-review-list"
 *     [items]="items$ | async"
 *     [itemsPerPage]="itemsPerPage$ | async"
 *     [totalItems]="totalItems$ | async"
 *     [currentPage]="currentPage$ | async"
 *     [filters]="filters"
 *     (pageChange)="setPageNumber($event)"
 *     (itemsPerPageChange)="setItemsPerPage($event)"
 * >
 *     <vdr-bulk-action-menu
 *         locationId="product-review-list"
 *         [hostComponent]="this"
 *         [selectionManager]="selectionManager"
 *     />
 *     <vdr-dt2-search
 *         [searchTermControl]="searchTermControl"
 *         searchTermPlaceholder="Filter by title"
 *     />
 *     <vdr-dt2-column [heading]="'common.id' | translate" [hiddenByDefault]="true">
 *         <ng-template let-review="item">
 *             {{ review.id }}
 *         </ng-template>
 *     </vdr-dt2-column>
 *     <vdr-dt2-column
 *         [heading]="'common.created-at' | translate"
 *         [hiddenByDefault]="true"
 *         [sort]="sorts.get('createdAt')"
 *     >
 *         <ng-template let-review="item">
 *             {{ review.createdAt | localeDate : 'short' }}
 *         </ng-template>
 *     </vdr-dt2-column>
 *     <vdr-dt2-column
 *         [heading]="'common.updated-at' | translate"
 *         [hiddenByDefault]="true"
 *         [sort]="sorts.get('updatedAt')"
 *     >
 *         <ng-template let-review="item">
 *             {{ review.updatedAt | localeDate : 'short' }}
 *         </ng-template>
 *     </vdr-dt2-column>
 *     <vdr-dt2-column [heading]="'common.name' | translate" [optional]="false" [sort]="sorts.get('name')">
 *         <ng-template let-review="item">
 *             <a class="button-ghost" [routerLink]="['./', review.id]"
 *                 ><span>{{ review.name }}</span>
 *                 <clr-icon shape="arrow right"></clr-icon>
 *             </a>
 *         </ng-template>
 *     </vdr-dt2-column>
 * </vdr-data-table-2>
 * ```
 *
 * @docsCategory components
 */
export declare class DataTable2Component<T> implements AfterContentInit, OnChanges, OnDestroy {
    protected changeDetectorRef: ChangeDetectorRef;
    protected localStorageService: LocalStorageService;
    protected dataService: DataService;
    id: DataTableLocationId;
    items: T[];
    itemsPerPage: number;
    currentPage: number;
    totalItems: number;
    emptyStateLabel: string;
    filters: DataTableFilterCollection;
    activeIndex: number;
    pageChange: EventEmitter<number>;
    itemsPerPageChange: EventEmitter<number>;
    columns: QueryList<DataTable2ColumnComponent<T>>;
    customFieldColumns: QueryList<DataTableCustomFieldColumnComponent<T>>;
    searchComponent: DataTable2SearchComponent;
    bulkActionMenuComponent: BulkActionMenuComponent;
    customSearchTemplate: TemplateRef<any>;
    templateRefs: QueryList<TemplateRef<any>>;
    injector: Injector;
    route: ActivatedRoute;
    filterPresetService: FilterPresetService;
    dataTableCustomComponentService: DataTableCustomComponentService;
    protected customComponents: Map<string, {
        config: DataTableComponentConfig;
        injector: Injector;
    }>;
    rowTemplate: TemplateRef<any>;
    currentStart: number;
    currentEnd: number;
    disableSelect: boolean;
    showSearchFilterRow: boolean;
    protected uiLanguage$: Observable<LanguageCode>;
    protected destroy$: Subject<void>;
    constructor(changeDetectorRef: ChangeDetectorRef, localStorageService: LocalStorageService, dataService: DataService);
    get selectionManager(): import("@vendure/admin-ui/core").SelectionManager<any>;
    get allColumns(): DataTable2ColumnComponent<T>[];
    get visibleSortedColumns(): DataTable2ColumnComponent<T>[];
    get sortedColumns(): DataTable2ColumnComponent<T>[];
    private shiftDownHandler;
    private shiftUpHandler;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    onColumnReorder(event: {
        column: DataTable2ColumnComponent<any>;
        newIndex: number;
    }): void;
    onColumnsReset(): void;
    toggleSearchFilterRow(): void;
    trackByFn(index: number, item: any): any;
    onToggleAllClick(): void;
    onRowClick(item: T, event: MouseEvent): void;
    protected getDataTableConfig(): DataTableConfig;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataTable2Component<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataTable2Component<any>, "vdr-data-table-2", never, { "id": { "alias": "id"; "required": false; }; "items": { "alias": "items"; "required": false; }; "itemsPerPage": { "alias": "itemsPerPage"; "required": false; }; "currentPage": { "alias": "currentPage"; "required": false; }; "totalItems": { "alias": "totalItems"; "required": false; }; "emptyStateLabel": { "alias": "emptyStateLabel"; "required": false; }; "filters": { "alias": "filters"; "required": false; }; "activeIndex": { "alias": "activeIndex"; "required": false; }; }, { "pageChange": "pageChange"; "itemsPerPageChange": "itemsPerPageChange"; }, ["searchComponent", "bulkActionMenuComponent", "customSearchTemplate", "columns", "customFieldColumns", "templateRefs"], ["vdr-bulk-action-menu"], false, never>;
}
