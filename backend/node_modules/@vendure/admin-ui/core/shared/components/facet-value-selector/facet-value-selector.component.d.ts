import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { FacetValueFragment } from '../../../common/generated-types';
import { DataService } from '../../../data/providers/data.service';
import * as i0 from "@angular/core";
/**
 * @description
 * A form control for selecting facet values.
 *
 * @example
 * ```HTML
 * <vdr-facet-value-selector
 *   [facets]="facets"
 *   (selectedValuesChange)="selectedValues = $event"
 * ></vdr-facet-value-selector>
 * ```
 * The `facets` input should be provided from the parent component
 * like this:
 *
 * @example
 * ```ts
 * this.facets = this.dataService
 *   .facet.getAllFacets()
 *   .mapSingle(data => data.facets.items);
 * ```
 * @docsCategory components
 */
export declare class FacetValueSelectorComponent implements OnInit, OnDestroy, ControlValueAccessor {
    private dataService;
    private changeDetectorRef;
    selectedValuesChange: EventEmitter<FacetValueFragment[]>;
    readonly: boolean;
    transformControlValueAccessorValue: (value: FacetValueFragment[]) => any[];
    searchInput$: Subject<string>;
    searchLoading: boolean;
    searchResults$: Observable<FacetValueFragment[]>;
    selectedIds$: Subject<string[]>;
    private ngSelect;
    onChangeFn: (val: any) => void;
    onTouchFn: () => void;
    disabled: boolean;
    value: Array<string | FacetValueFragment>;
    private subscription;
    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    private initSearchResults;
    ngOnDestroy(): void;
    onChange(selected: FacetValueFragment[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    focus(): void;
    writeValue(obj: string | FacetValueFragment[] | Array<string | number> | null): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FacetValueSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FacetValueSelectorComponent, "vdr-facet-value-selector", never, { "readonly": { "alias": "readonly"; "required": false; }; "transformControlValueAccessorValue": { "alias": "transformControlValueAccessorValue"; "required": false; }; }, { "selectedValuesChange": "selectedValuesChange"; }, never, never, false, never>;
}
