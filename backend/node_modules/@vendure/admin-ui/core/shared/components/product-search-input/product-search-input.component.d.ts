import { EventEmitter } from '@angular/core';
import { SearchProductsQuery } from '../../../common/generated-types';
import * as i0 from "@angular/core";
type FacetValueResult = SearchProductsQuery['search']['facetValues'][number];
export declare class ProductSearchInputComponent {
    facetValueResults: FacetValueResult;
    searchTermChange: EventEmitter<string>;
    facetValueChange: EventEmitter<string[]>;
    private selectComponent;
    private lastTerm;
    private lastFacetValueIds;
    setSearchTerm(term: string | null): void;
    setFacetValues(ids: string[]): void;
    filterFacetResults: (term: string, item: FacetValueResult | {
        label: string;
    }) => boolean;
    onSelectChange(selectedItems: Array<FacetValueResult | {
        label: string;
    }>): void;
    addTagFn(item: any): {
        label: any;
    };
    isSearchHeaderSelected(): boolean;
    private isFacetValueItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSearchInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductSearchInputComponent, "vdr-product-search-input", never, { "facetValueResults": { "alias": "facetValueResults"; "required": false; }; }, { "searchTermChange": "searchTermChange"; "facetValueChange": "facetValueChange"; }, never, never, false, never>;
}
export {};
