import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subject } from 'rxjs';
import { ItemOf } from '../../../common/base-list.component';
import { GetZoneSelectorListQuery } from '../../../common/generated-types';
import { DataService } from '../../../data/providers/data.service';
import * as i0 from "@angular/core";
export declare const GET_ZONE_SELECTOR_LIST: import("apollo-angular").TypedDocumentNode<unknown, unknown>;
type Zone = ItemOf<GetZoneSelectorListQuery, 'zones'>;
/**
 * @description
 * A form control for selecting zones.
 *
 * @docsCategory components
 */
export declare class ZoneSelectorComponent implements ControlValueAccessor {
    private dataService;
    private changeDetectorRef;
    selectedValuesChange: EventEmitter<{
        __typename?: "Zone" | undefined;
        id: string;
        createdAt: any;
        updatedAt: any;
        name: string;
    }>;
    readonly: boolean;
    transformControlValueAccessorValue: (value: Zone | undefined) => any;
    selectedId$: Subject<string>;
    private ngSelect;
    onChangeFn: (val: any) => void;
    onTouchFn: () => void;
    disabled: boolean;
    value: string | Zone;
    zones$: import("rxjs").Observable<{
        __typename?: "Zone" | undefined;
        id: string;
        createdAt: any;
        updatedAt: any;
        name: string;
    }[]>;
    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef);
    onChange(selected: Zone): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    focus(): void;
    writeValue(obj: string | Zone | null): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ZoneSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ZoneSelectorComponent, "vdr-zone-selector", never, { "readonly": { "alias": "readonly"; "required": false; }; "transformControlValueAccessorValue": { "alias": "transformControlValueAccessorValue"; "required": false; }; }, { "selectedValuesChange": "selectedValuesChange"; }, never, never, false, never>;
}
export {};
