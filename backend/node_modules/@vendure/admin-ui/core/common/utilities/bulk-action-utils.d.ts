import { Observable } from 'rxjs';
import { DataService } from '../../data/providers/data.service';
import { BulkAction } from '../../providers/bulk-action-registry/bulk-action-types';
import { BaseListComponent } from '../base-list.component';
import { DeletionResponse } from '../generated-types';
/**
 * @description
 * Resolves to an object containing the Channel code of the given channelId, or if no channelId
 * is supplied, the code of the activeChannel.
 */
export declare function getChannelCodeFromUserStatus(dataService: DataService, channelId?: string): Promise<{
    channelCode: string;
}>;
/**
 * @description
 * Resolves to `true` if multiple Channels are set up.
 */
export declare function isMultiChannel(dataService: DataService): Promise<boolean>;
/**
 * @description
 * Resolves to `true` if the current active Channel is not the default Channel.
 */
export declare function currentChannelIsNotDefault(dataService: DataService): Promise<boolean>;
export type CreateBulkDeleteActionConfig<ItemType> = Pick<BulkAction, 'location' | 'requiresPermission'> & {
    getItemName: (item: ItemType) => string;
    shouldRetryItem?: (response: DeletionResponse, item: ItemType) => boolean;
    bulkDelete: (dataService: DataService, ids: string[], retrying: boolean) => Observable<DeletionResponse[]>;
};
/**
 * @description
 * Creates a BulkAction which can be used to delete multiple items.
 */
export declare function createBulkDeleteAction<ItemType>(config: CreateBulkDeleteActionConfig<ItemType>): BulkAction<any, BaseListComponent<any, any, any>>;
export type CreateBulkAssignToChannelActionConfig<ItemType> = Pick<BulkAction, 'location' | 'requiresPermission'> & {
    getItemName: (item: ItemType) => string;
    bulkAssignToChannel: (dataService: DataService, ids: string[], channelId: string) => Observable<Array<Partial<ItemType>>>;
};
export declare function createBulkAssignToChannelAction<ItemType>(config: CreateBulkAssignToChannelActionConfig<ItemType>): BulkAction<any, BaseListComponent<any, any, any>>;
export type CreateBulkRemoveFromChannelActionConfig<ItemType, RemoveResult = Partial<ItemType>> = Pick<BulkAction, 'location' | 'requiresPermission'> & {
    getItemName: (item: ItemType) => string;
    bulkRemoveFromChannel: (dataService: DataService, ids: string[], channelId: string, retrying: boolean) => Observable<RemoveResult[]>;
    /**
     * An optional test of whether the removal succeeded for the given item. If this
     * function returns a string, that is taken to be an error message which will be
     * displayed to the user.
     */
    isErrorResult?: (result: RemoveResult) => string | undefined;
};
export declare function createBulkRemoveFromChannelAction<ItemType, ResultType = Partial<ItemType>>(config: CreateBulkRemoveFromChannelActionConfig<ItemType, ResultType>): BulkAction<any, BaseListComponent<any, any, any>>;
