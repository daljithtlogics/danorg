import { FormInputComponent } from '../../common/component-registry-types';
import { CustomFields, CustomFieldsFragment } from '../../common/generated-types';
import { ComponentRegistryService } from '../component-registry/component-registry.service';
import * as i0 from "@angular/core";
export type CustomFieldConfigType = CustomFieldsFragment;
export interface CustomFieldControl extends FormInputComponent<CustomFieldConfigType> {
}
export type CustomFieldEntityName = Exclude<keyof CustomFields, '__typename'>;
/**
 * This service allows the registration of custom controls for customFields.
 *
 * @deprecated The ComponentRegistryService now handles custom field components directly.
 */
export declare class CustomFieldComponentService {
    private componentRegistryService;
    constructor(componentRegistryService: ComponentRegistryService);
    /**
     * Checks whether a custom component is registered for the given entity custom field,
     * and if so returns the ID of that component.
     */
    customFieldComponentExists(entity: CustomFieldEntityName, fieldName: string): string | undefined;
    private generateId;
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomFieldComponentService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CustomFieldComponentService>;
}
