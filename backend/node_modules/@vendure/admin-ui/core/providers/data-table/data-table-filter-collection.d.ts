import { ActivatedRoute, Router } from '@angular/router';
import { CustomFieldConfig, DateOperators, IdOperators } from '../../common/generated-types';
import { DataTableFilter, DataTableFilterBooleanType, DataTableFilterCustomType, DataTableFilterDateRangeType, DataTableFilterIDType, DataTableFilterNumberType, DataTableFilterOptions, DataTableFilterSelectType, DataTableFilterTextType, DataTableFilterType, DataTableFilterValue } from './data-table-filter';
export declare class FilterWithValue<Type extends DataTableFilterType = DataTableFilterType> {
    readonly filter: DataTableFilter<any, Type>;
    value: DataTableFilterValue<Type>;
    private onUpdateFns;
    constructor(filter: DataTableFilter<any, Type>, value: DataTableFilterValue<Type>, onUpdate?: (value: DataTableFilterValue<Type>) => void);
    onUpdate(fn: (value: DataTableFilterValue<Type>) => void): void;
    updateValue(value: DataTableFilterValue<Type>): void;
    isId(): this is FilterWithValue<DataTableFilterIDType>;
    isText(): this is FilterWithValue<DataTableFilterTextType>;
    isNumber(): this is FilterWithValue<DataTableFilterNumberType>;
    isBoolean(): this is FilterWithValue<DataTableFilterBooleanType>;
    isSelect(): this is FilterWithValue<DataTableFilterSelectType>;
    isDateRange(): this is FilterWithValue<DataTableFilterDateRangeType>;
    isCustom(): this is FilterWithValue<DataTableFilterCustomType>;
}
export declare class DataTableFilterCollection<FilterInput extends Record<string, any> = Record<string, any>> {
    #private;
    private router;
    valueChanges: import("rxjs").Observable<FilterWithValue<DataTableFilterType>[]>;
    private readonly destroy$;
    constructor(router: Router);
    get length(): number;
    get activeFilters(): FilterWithValue[];
    destroy(): void;
    addFilter<FilterType extends DataTableFilterType>(config: DataTableFilterOptions<FilterInput, FilterType>): DataTableFilterCollection<FilterInput>;
    addFilters<FilterType extends DataTableFilterType>(configs: Array<DataTableFilterOptions<FilterInput, FilterType>>): DataTableFilterCollection<FilterInput>;
    addIdFilter(): FilterInput extends {
        id?: IdOperators | null;
    } ? DataTableFilterCollection<FilterInput> : never;
    addDateFilters(): FilterInput extends {
        createdAt?: DateOperators | null;
        updatedAt?: DateOperators | null;
    } ? DataTableFilterCollection<FilterInput> : never;
    addCustomFieldFilters(customFields: CustomFieldConfig[]): this;
    getFilter(name: string): DataTableFilter<FilterInput> | undefined;
    getFilters(): Array<DataTableFilter<FilterInput>>;
    removeActiveFilterAtIndex(index: number): void;
    createFilterInput(): FilterInput;
    connectToRoute(route: ActivatedRoute): this;
    serialize(): string;
    private serializeValue;
    private deserializeValue;
    private onActivateFilter;
    private createFilterWithValue;
}
