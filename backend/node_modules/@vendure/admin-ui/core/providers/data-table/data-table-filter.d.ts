import { Type as ComponentType } from '@angular/core';
import { LocalizedString } from '@vendure/common/lib/generated-types';
import { FormInputComponent } from '../../common/component-registry-types';
import { BooleanOperators, DateOperators, IdOperators, NumberOperators, StringOperators } from '../../common/generated-types';
export interface DataTableFilterIDType {
    kind: 'id';
}
export interface DataTableFilterTextType {
    kind: 'text';
    placeholder?: string;
}
export interface DataTableFilterSelectType {
    kind: 'select';
    options: Array<{
        value: any;
        label: string;
    }>;
}
export interface DataTableFilterBooleanType {
    kind: 'boolean';
}
export interface DataTableFilterNumberType {
    kind: 'number';
    inputType?: 'number' | 'currency';
}
export interface DataTableFilterDateRangeType {
    kind: 'dateRange';
}
export interface DataTableFilterCustomType {
    kind: 'custom';
    component: ComponentType<FormInputComponent>;
    serializeValue: (value: any) => string;
    deserializeValue: (serialized: string) => any;
    getLabel(value: any): string | Promise<string>;
}
export type KindValueMap = {
    id: {
        raw: {
            operator: keyof IdOperators;
            term: string;
        };
        input: IdOperators;
    };
    text: {
        raw: {
            operator: keyof StringOperators;
            term: string;
        };
        input: StringOperators;
    };
    select: {
        raw: string[];
        input: StringOperators;
    };
    boolean: {
        raw: boolean;
        input: BooleanOperators;
    };
    dateRange: {
        raw: {
            mode: 'relative' | 'range';
            relativeValue: number;
            relativeUnit: 'day' | 'month' | 'year';
            start?: string;
            end?: string;
        };
        input: DateOperators;
    };
    number: {
        raw: {
            operator: keyof NumberOperators;
            amount: number;
        };
        input: NumberOperators;
    };
    custom: {
        raw: any;
        input: any;
    };
};
export type DataTableFilterType = DataTableFilterIDType | DataTableFilterTextType | DataTableFilterSelectType | DataTableFilterBooleanType | DataTableFilterDateRangeType | DataTableFilterNumberType | DataTableFilterCustomType;
export interface DataTableFilterOptions<FilterInput extends Record<string, any> = any, Type extends DataTableFilterType = DataTableFilterType> {
    readonly name: string;
    readonly type: Type;
    readonly label: string | LocalizedString[];
    readonly filterField?: keyof FilterInput;
    readonly toFilterInput?: (value: DataTableFilterValue<Type>) => Partial<FilterInput>;
}
export type DataTableFilterValue<Type extends DataTableFilterType> = KindValueMap[Type['kind']]['raw'];
export type DataTableFilterOperator<Type extends DataTableFilterType> = KindValueMap[Type['kind']]['input'];
export declare class DataTableFilter<FilterInput extends Record<string, any> = any, Type extends DataTableFilterType = DataTableFilterType> {
    private readonly options;
    private onActivate?;
    constructor(options: DataTableFilterOptions<FilterInput, Type>, onActivate?: ((filter: DataTableFilter<FilterInput, Type>, value: DataTableFilterValue<Type> | undefined) => void) | undefined);
    get name(): string;
    get type(): Type;
    get label(): string | LocalizedString[];
    getFilterOperator(value: any): DataTableFilterOperator<Type>;
    toFilterInput(value: DataTableFilterValue<Type>): Partial<FilterInput>;
    activate(value: DataTableFilterValue<Type>): void;
    isId(): this is DataTableFilter<FilterInput, DataTableFilterIDType>;
    isText(): this is DataTableFilter<FilterInput, DataTableFilterTextType>;
    isNumber(): this is DataTableFilter<FilterInput, DataTableFilterNumberType>;
    isBoolean(): this is DataTableFilter<FilterInput, DataTableFilterBooleanType>;
    isSelect(): this is DataTableFilter<FilterInput, DataTableFilterSelectType>;
    isDateRange(): this is DataTableFilter<FilterInput, DataTableFilterDateRangeType>;
    isCustom(): this is DataTableFilter<FilterInput, DataTableFilterCustomType>;
}
