import { Type } from '@angular/core';
import { ResolveFn, Route } from '@angular/router';
import { ResultOf, TypedDocumentNode } from '@graphql-typed-document-node/core';
import { DocumentNode } from 'graphql';
import { BehaviorSubject, Observable } from 'rxjs';
import { BaseDetailComponent } from '../common/base-detail.component';
import { BreadcrumbValue } from '../providers/breadcrumb/breadcrumb.service';
import { AngularRouteComponent } from './components/angular-route.component';
/**
 * @description
 * Configuration for a route component.
 *
 * @docsCategory routes
 */
export type RegisterRouteComponentOptions<Component extends any | BaseDetailComponent<Entity>, Entity extends {
    id: string;
    updatedAt?: string;
}, T extends DocumentNode | TypedDocumentNode<any, {
    id: string;
}>, Field extends keyof ResultOf<T>, R extends Field> = {
    component: Type<Component> | Component;
    title?: string;
    breadcrumb?: BreadcrumbValue;
    path?: string;
    query?: T;
    getBreadcrumbs?: (entity: Exclude<ResultOf<T>[R], 'Query'>) => BreadcrumbValue;
    entityKey?: Component extends BaseDetailComponent<any> ? R : undefined;
    variables?: T extends TypedDocumentNode<any, infer V> ? Omit<V, 'id'> : never;
    routeConfig?: Route;
} & (Component extends BaseDetailComponent<any> ? {
    entityKey: R;
} : unknown);
/**
 * @description
 * Registers an Angular standalone component to be rendered in a route.
 *
 * @example
 * ```ts title="routes.ts"
 * import { registerRouteComponent } from '\@vendure/admin-ui/core';
 * import { registerReactRouteComponent } from '\@vendure/admin-ui/react';
 *
 * import { ProductReviewDetailComponent } from './components/product-review-detail/product-review-detail.component';
 * import { AllProductReviewsList } from './components/all-product-reviews-list/all-product-reviews-list.component';
 * import { GetReviewDetailDocument } from './generated-types';
 *
 * export default [
 *     registerRouteComponent({
 *         path: '',
 *         component: AllProductReviewsList,
 *         breadcrumb: 'Product reviews',
 *     }),
 *     registerRouteComponent({
 *         path: ':id',
 *         component: ProductReviewDetailComponent,
 *         query: GetReviewDetailDocument,
 *         entityKey: 'productReview',
 *         getBreadcrumbs: entity => [
 *             {
 *                 label: 'Product reviews',
 *                 link: ['/extensions', 'product-reviews'],
 *             },
 *             {
 *                 label: `#${entity?.id} (${entity?.product.name})`,
 *                 link: [],
 *             },
 *         ],
 *     }),
 * ];
 * ```
 *
 * @docsCategory routes
 */
export declare function registerRouteComponent<Component extends any | BaseDetailComponent<Entity>, Entity extends {
    id: string;
    updatedAt?: string;
}, T extends DocumentNode | TypedDocumentNode<any, {
    id: string;
}>, Field extends keyof ResultOf<T>, R extends Field>(options: RegisterRouteComponentOptions<Component, Entity, T, Field, R>): {
    resolve: {
        detail?: ResolveFn<{
            entity: Observable<ResultOf<T>[Field] | null>;
            result?: ResultOf<T> | undefined;
        }> | undefined;
    };
    data: {
        breadcrumb: BehaviorSubject<BreadcrumbValue> | ((data: any) => any);
    };
    component: typeof AngularRouteComponent;
    title?: string | Type<import("@angular/router").Resolve<string>> | ResolveFn<string> | undefined;
    path: string;
    pathMatch?: "prefix" | "full" | undefined;
    matcher?: import("@angular/router").UrlMatcher | undefined;
    loadComponent?: (() => Type<unknown> | Observable<Type<unknown> | import("@angular/router").DefaultExport<Type<unknown>>> | Promise<Type<unknown> | import("@angular/router").DefaultExport<Type<unknown>>>) | undefined;
    redirectTo?: string | undefined;
    outlet?: string | undefined;
    canActivate?: any[] | undefined;
    canMatch?: any[] | undefined;
    canActivateChild?: any[] | undefined;
    canDeactivate?: any[] | undefined;
    canLoad?: any[] | undefined;
    children?: import("@angular/router").Routes | undefined;
    loadChildren?: import("@angular/router").LoadChildrenCallback | undefined;
    runGuardsAndResolvers?: import("@angular/router").RunGuardsAndResolvers | undefined;
    providers: (import("@angular/core").Provider | import("@angular/core").EnvironmentProviders)[];
};
