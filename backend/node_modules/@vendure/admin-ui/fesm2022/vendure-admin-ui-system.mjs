import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';
import * as i1 from '@vendure/admin-ui/core';
import { JobState, BaseListComponent, SortOrder, SharedModule } from '@vendure/admin-ui/core';
import * as i3 from '@clr/angular';
import * as i3$1 from '@angular/common';
import * as i4 from '@ngx-translate/core';
import * as i5 from '@angular/forms';
import { FormControl } from '@angular/forms';
import { timer } from 'rxjs';
import { takeUntil, filter, map } from 'rxjs/operators';
import * as i2 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i6 from '@ng-select/ng-select';
import { marker } from '@biesbjerg/ngx-translate-extract-marker';

class HealthCheckComponent {
    constructor(healthCheckService) {
        this.healthCheckService = healthCheckService;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: HealthCheckComponent, deps: [{ token: i1.HealthCheckService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: HealthCheckComponent, selector: "vdr-health-check", ngImport: i0, template: "<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\r\n                    <div class=\"status-icon\">\r\n                        <clr-icon\r\n                            [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\r\n                            [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\r\n                            size=\"48\"\r\n                        ></clr-icon>\r\n                    </div>\r\n                    <div class=\"status-detail\">\r\n                        <ng-container *ngIf=\"status === 'ok'; else error\">\r\n                            {{ 'system.health-all-systems-up' | translate }}\r\n                        </ng-container>\r\n                        <ng-template #error>\r\n                            {{ 'system.health-error' | translate }}\r\n                        </ng-template>\r\n                        <div class=\"last-checked\">\r\n                            {{ 'system.health-last-checked' | translate }}:\r\n                            {{ healthCheckService.lastCheck$ | async | localeDate : 'mediumTime' }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\r\n                <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\r\n                    <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\r\n                </button>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n    <vdr-page-block>\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"left\">\r\n                        {{ 'common.name' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-status' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-message' | translate }}\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let row of healthCheckService.details$ | async\">\r\n                    <td class=\"align-middle left\">{{ row.key }}</td>\r\n                    <td class=\"align-middle left\">\r\n                        <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\r\n                            <ng-container *ngIf=\"row.result.status === 'up'; else down\">\r\n                                <clr-icon shape=\"check-circle\"></clr-icon>\r\n                                {{ 'system.health-status-up' | translate }}\r\n                            </ng-container>\r\n                            <ng-template #down>\r\n                                <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                                {{ 'system.health-status-down' | translate }}\r\n                            </ng-template>\r\n                        </vdr-chip>\r\n                    </td>\r\n                    <td class=\"align-middle left\">{{ row.result.message }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </vdr-page-block>\r\n</vdr-page-body>\r\n", styles: [".system-status-header{display:flex;justify-content:space-between;align-items:flex-start}.system-status-header .status-detail{font-weight:700;margin-inline-end:6px}.system-status-header .last-checked{font-weight:400;color:var(--color-grey-500)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items", inputs: ["locationId"] }, { kind: "component", type: i1.PageHeaderComponent, selector: "vdr-page-header" }, { kind: "component", type: i1.PageTitleComponent, selector: "vdr-page-title", inputs: ["title"] }, { kind: "component", type: i1.PageBodyComponent, selector: "vdr-page-body" }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.LocaleDatePipe, name: "localeDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: HealthCheckComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-health-check', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <div class=\"system-status-header\" *ngIf=\"healthCheckService.status$ | async as status\">\r\n                    <div class=\"status-icon\">\r\n                        <clr-icon\r\n                            [attr.shape]=\"status === 'ok' ? 'check-circle' : 'exclamation-circle'\"\r\n                            [ngClass]=\"{ 'is-success': status === 'ok', 'is-danger': status !== 'ok' }\"\r\n                            size=\"48\"\r\n                        ></clr-icon>\r\n                    </div>\r\n                    <div class=\"status-detail\">\r\n                        <ng-container *ngIf=\"status === 'ok'; else error\">\r\n                            {{ 'system.health-all-systems-up' | translate }}\r\n                        </ng-container>\r\n                        <ng-template #error>\r\n                            {{ 'system.health-error' | translate }}\r\n                        </ng-template>\r\n                        <div class=\"last-checked\">\r\n                            {{ 'system.health-last-checked' | translate }}:\r\n                            {{ healthCheckService.lastCheck$ | async | localeDate : 'mediumTime' }}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"system-status\"></vdr-action-bar-items>\r\n                <button class=\"btn btn-secondary\" (click)=\"healthCheckService.refresh()\">\r\n                    <clr-icon shape=\"refresh\"></clr-icon> {{ 'system.health-refresh' | translate }}\r\n                </button>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n    <vdr-page-block>\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"left\">\r\n                        {{ 'common.name' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-status' | translate }}\r\n                    </th>\r\n                    <th class=\"left\">\r\n                        {{ 'system.health-message' | translate }}\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let row of healthCheckService.details$ | async\">\r\n                    <td class=\"align-middle left\">{{ row.key }}</td>\r\n                    <td class=\"align-middle left\">\r\n                        <vdr-chip [colorType]=\"row.result.status === 'up' ? 'success' : 'error'\">\r\n                            <ng-container *ngIf=\"row.result.status === 'up'; else down\">\r\n                                <clr-icon shape=\"check-circle\"></clr-icon>\r\n                                {{ 'system.health-status-up' | translate }}\r\n                            </ng-container>\r\n                            <ng-template #down>\r\n                                <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                                {{ 'system.health-status-down' | translate }}\r\n                            </ng-template>\r\n                        </vdr-chip>\r\n                    </td>\r\n                    <td class=\"align-middle left\">{{ row.result.message }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </vdr-page-block>\r\n</vdr-page-body>\r\n", styles: [".system-status-header{display:flex;justify-content:space-between;align-items:flex-start}.system-status-header .status-detail{font-weight:700;margin-inline-end:6px}.system-status-header .last-checked{font-weight:400;color:var(--color-grey-500)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.HealthCheckService }]; } });

class JobStateLabelComponent {
    get iconShape() {
        switch (this.job.state) {
            case JobState.COMPLETED:
                return 'check-circle';
            case JobState.FAILED:
                return 'exclamation-circle';
            case JobState.CANCELLED:
                return 'ban';
            case JobState.PENDING:
            case JobState.RETRYING:
                return 'hourglass';
            case JobState.RUNNING:
                return 'sync';
        }
    }
    get colorType() {
        switch (this.job.state) {
            case JobState.COMPLETED:
                return 'success';
            case JobState.FAILED:
            case JobState.CANCELLED:
                return 'error';
            case JobState.PENDING:
            case JobState.RETRYING:
                return '';
            case JobState.RUNNING:
                return 'warning';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: JobStateLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: JobStateLabelComponent, selector: "vdr-job-state-label", inputs: { job: "job" }, ngImport: i0, template: "<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n", styles: [".progress{margin-inline-start:3px}clr-icon{min-width:12px}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "pipe", type: i3$1.PercentPipe, name: "percent" }, { kind: "pipe", type: i3$1.TitleCasePipe, name: "titlecase" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: JobStateLabelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-job-state-label', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-chip [colorType]=\"colorType\">\r\n    <clr-icon [attr.shape]=\"iconShape\" class=\"mr1\"></clr-icon>\r\n    {{ job.state | titlecase }}\r\n    <span *ngIf=\"job.state === 'RUNNING'\" class=\"progress\">\r\n        {{ (job.progress / 100) | percent }}\r\n    </span>\r\n</vdr-chip>\r\n", styles: [".progress{margin-inline-start:3px}clr-icon{min-width:12px}\n"] }]
        }], propDecorators: { job: [{
                type: Input
            }] } });

class JobListComponent extends BaseListComponent {
    constructor(dataService, router, route) {
        super(router, route);
        this.dataService = dataService;
        this.liveUpdate = new FormControl(true);
        this.queueFilter = new FormControl('all');
        this.stateFilter = new FormControl('');
        super.setQueryFn((...args) => this.dataService.settings.getAllJobs(...args), data => data.jobs, (skip, take) => {
            const queueFilter = this.queueFilter.value === 'all' ? null : { queueName: { eq: this.queueFilter.value } };
            const stateFilter = this.stateFilter.value;
            return {
                options: {
                    skip,
                    take,
                    filter: {
                        ...queueFilter,
                        ...(stateFilter ? { state: { eq: stateFilter } } : {}),
                    },
                    sort: {
                        createdAt: SortOrder.DESC,
                    },
                },
            };
        });
    }
    ngOnInit() {
        super.ngOnInit();
        timer(5000, 2000)
            .pipe(takeUntil(this.destroy$), filter(() => !!this.liveUpdate.value))
            .subscribe(() => {
            this.refresh();
        });
        this.queues$ = this.dataService.settings
            .getJobQueues()
            .mapStream(res => res.jobQueues)
            .pipe(map(queues => [{ name: 'all', running: true }, ...queues]));
    }
    hasResult(job) {
        const result = job.result;
        if (result == null) {
            return false;
        }
        if (typeof result === 'object') {
            return Object.keys(result).length > 0;
        }
        return true;
    }
    cancelJob(id) {
        this.dataService.settings.cancelJob(id).subscribe(() => this.refresh());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: JobListComponent, deps: [{ token: i1.DataService }, { token: i2.Router }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.2", type: JobListComponent, selector: "vdr-job-list", usesInheritance: true, ngImport: i0, template: "<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <clr-checkbox-wrapper class=\"mr-2\">\r\n                    <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\" />\r\n                    <label>{{ 'common.live-update' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\r\n                <ng-select\r\n                    class=\"mr-2\"\r\n                    [addTag]=\"false\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    [formControl]=\"stateFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-option [value]=\"''\">\r\n                        <vdr-chip>{{ 'system.job-state-all' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'PENDING'\">\r\n                        <vdr-chip>{{ 'system.job-state-pending' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'RUNNING'\">\r\n                        <vdr-chip colorType=\"warning\">{{ 'system.job-state-running' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'COMPLETED'\">\r\n                        <vdr-chip colorType=\"success\">{{ 'system.job-state-completed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'FAILED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-failed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'CANCELLED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-cancelled' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                </ng-select>\r\n                <ng-select\r\n                    [addTag]=\"false\"\r\n                    [items]=\"queues$ | async\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    bindValue=\"name\"\r\n                    [formControl]=\"queueFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n                        <ng-container *ngIf=\"item.name === 'all'; else others\">\r\n                            <vdr-chip>{{ 'system.all-job-queues' | translate }}</vdr-chip>\r\n                        </ng-container>\r\n                        <ng-template #others>\r\n                            <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </ng-select>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n\r\n    <vdr-data-table-2\r\n        id=\"job-list\"\r\n        [items]=\"items$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        [currentPage]=\"currentPage$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    >\r\n        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.createdAt | timeAgo }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-queue-name' | translate\" id=\"job-queue-name\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-data' | translate\" id=\"job-data\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"job.data\">\r\n                    <button\r\n                        class=\"button-small\"\r\n                        vdrDropdownTrigger\r\n                        [title]=\"'system.job-data' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-state' | translate\" id=\"job-state\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\r\n                <div *ngIf=\"job.state === 'FAILED'\" class=\"retry-info\">after {{ job.attempts }} attempts</div>\r\n                <div *ngIf=\"job.state === 'RUNNING' || job.state === 'RETRYING'\" class=\"retry-info\">\r\n                    attempting {{ job.attempts }} of {{ job.retries + 1 }}\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-duration' | translate\" id=\"job-duration\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.duration | duration }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-result' | translate\" id=\"job-result\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"hasResult(job)\">\r\n                    <button class=\"button-small mr-1\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                        {{ 'system.job-result' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"job.error\">\r\n                    <button class=\"button-small\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                        {{ 'system.job-error' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            {{ job.error }}\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"cancelJob(job.id)\"\r\n                            [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.cancel' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n</vdr-page-body>\r\n", styles: [".result-detail{margin:0 12px}.retry-info{margin-inline-start:6px;color:var(--color-grey-400)}\n"], dependencies: [{ kind: "directive", type: i3.ClrIconCustomTag, selector: "clr-icon" }, { kind: "directive", type: i3.ClrLabel, selector: "label", inputs: ["for"] }, { kind: "directive", type: i3.ClrCheckbox, selector: "[clrCheckbox],[clrToggle]" }, { kind: "component", type: i3.ClrCheckboxWrapper, selector: "clr-checkbox-wrapper,clr-toggle-wrapper" }, { kind: "directive", type: i3$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "deselectOnClick"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i6.NgOptionComponent, selector: "ng-option", inputs: ["value", "disabled"] }, { kind: "directive", type: i6.NgOptionTemplateDirective, selector: "[ng-option-tmp]" }, { kind: "directive", type: i6.NgLabelTemplateDirective, selector: "[ng-label-tmp]" }, { kind: "component", type: i1.ActionBarComponent, selector: "vdr-action-bar" }, { kind: "component", type: i1.ActionBarLeftComponent, selector: "vdr-ab-left", inputs: ["grow"] }, { kind: "component", type: i1.ActionBarRightComponent, selector: "vdr-ab-right", inputs: ["grow"] }, { kind: "component", type: i1.ChipComponent, selector: "vdr-chip", inputs: ["icon", "invert", "colorFrom", "colorType"], outputs: ["iconClick"] }, { kind: "directive", type: i1.FormFieldControlDirective, selector: "input, textarea, select" }, { kind: "component", type: i1.DropdownComponent, selector: "vdr-dropdown", inputs: ["manualToggle"] }, { kind: "component", type: i1.DropdownMenuComponent, selector: "vdr-dropdown-menu", inputs: ["vdrPosition", "customClasses"] }, { kind: "directive", type: i1.DropdownTriggerDirective, selector: "[vdrDropdownTrigger]" }, { kind: "directive", type: i1.DropdownItemDirective, selector: "[vdrDropdownItem]" }, { kind: "component", type: i1.ObjectTreeComponent, selector: "vdr-object-tree", inputs: ["value", "isArrayItem"] }, { kind: "component", type: i1.ActionBarItemsComponent, selector: "vdr-action-bar-items", inputs: ["locationId"] }, { kind: "component", type: i1.DataTable2Component, selector: "vdr-data-table-2", inputs: ["id", "items", "itemsPerPage", "currentPage", "totalItems", "emptyStateLabel", "filters", "activeIndex"], outputs: ["pageChange", "itemsPerPageChange"] }, { kind: "component", type: i1.DataTable2ColumnComponent, selector: "vdr-dt2-column", inputs: ["id", "expand", "heading", "align", "sort", "optional", "hiddenByDefault", "orderable"], exportAs: ["row"] }, { kind: "component", type: i1.PageHeaderComponent, selector: "vdr-page-header" }, { kind: "component", type: i1.PageTitleComponent, selector: "vdr-page-title", inputs: ["title"] }, { kind: "component", type: i1.PageBodyComponent, selector: "vdr-page-body" }, { kind: "component", type: i1.PageBlockComponent, selector: "vdr-page-block" }, { kind: "component", type: JobStateLabelComponent, selector: "vdr-job-state-label", inputs: ["job"] }, { kind: "pipe", type: i3$1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "translate" }, { kind: "pipe", type: i1.HasPermissionPipe, name: "hasPermission" }, { kind: "pipe", type: i1.TimeAgoPipe, name: "timeAgo" }, { kind: "pipe", type: i1.DurationPipe, name: "duration" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: JobListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'vdr-job-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<vdr-page-header>\r\n    <vdr-page-title></vdr-page-title>\r\n</vdr-page-header>\r\n<vdr-page-body>\r\n    <vdr-page-block>\r\n        <vdr-action-bar>\r\n            <vdr-ab-left>\r\n                <clr-checkbox-wrapper class=\"mr-2\">\r\n                    <input type=\"checkbox\" clrCheckbox [formControl]=\"liveUpdate\" name=\"live-update\" />\r\n                    <label>{{ 'common.live-update' | translate }}</label>\r\n                </clr-checkbox-wrapper>\r\n            </vdr-ab-left>\r\n            <vdr-ab-right>\r\n                <vdr-action-bar-items locationId=\"job-list\"></vdr-action-bar-items>\r\n                <ng-select\r\n                    class=\"mr-2\"\r\n                    [addTag]=\"false\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    [formControl]=\"stateFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-option [value]=\"''\">\r\n                        <vdr-chip>{{ 'system.job-state-all' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'PENDING'\">\r\n                        <vdr-chip>{{ 'system.job-state-pending' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'RUNNING'\">\r\n                        <vdr-chip colorType=\"warning\">{{ 'system.job-state-running' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'COMPLETED'\">\r\n                        <vdr-chip colorType=\"success\">{{ 'system.job-state-completed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'FAILED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-failed' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                    <ng-option [value]=\"'CANCELLED'\">\r\n                        <vdr-chip colorType=\"error\">{{ 'system.job-state-cancelled' | translate }}</vdr-chip>\r\n                    </ng-option>\r\n                </ng-select>\r\n                <ng-select\r\n                    [addTag]=\"false\"\r\n                    [items]=\"queues$ | async\"\r\n                    [hideSelected]=\"true\"\r\n                    [multiple]=\"false\"\r\n                    [markFirst]=\"false\"\r\n                    [clearable]=\"false\"\r\n                    [searchable]=\"false\"\r\n                    bindValue=\"name\"\r\n                    [formControl]=\"queueFilter\"\r\n                    (change)=\"refresh()\"\r\n                >\r\n                    <ng-template ng-label-tmp ng-option-tmp let-item=\"item\">\r\n                        <ng-container *ngIf=\"item.name === 'all'; else others\">\r\n                            <vdr-chip>{{ 'system.all-job-queues' | translate }}</vdr-chip>\r\n                        </ng-container>\r\n                        <ng-template #others>\r\n                            <vdr-chip [colorFrom]=\"item.name\">{{ item.name }}</vdr-chip>\r\n                        </ng-template>\r\n                    </ng-template>\r\n                </ng-select>\r\n            </vdr-ab-right>\r\n        </vdr-action-bar>\r\n    </vdr-page-block>\r\n\r\n    <vdr-data-table-2\r\n        id=\"job-list\"\r\n        [items]=\"items$ | async\"\r\n        [itemsPerPage]=\"itemsPerPage$ | async\"\r\n        [totalItems]=\"totalItems$ | async\"\r\n        [currentPage]=\"currentPage$ | async\"\r\n        (pageChange)=\"setPageNumber($event)\"\r\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n    >\r\n        <vdr-dt2-column [heading]=\"'common.id' | translate\" id=\"id\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.id }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'common.created-at' | translate\" id=\"created-at\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.createdAt | timeAgo }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-queue-name' | translate\" id=\"job-queue-name\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-chip [colorFrom]=\"job.queueName\">{{ job.queueName }}</vdr-chip>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-data' | translate\" id=\"job-data\" [optional]=\"false\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"job.data\">\r\n                    <button\r\n                        class=\"button-small\"\r\n                        vdrDropdownTrigger\r\n                        [title]=\"'system.job-data' | translate\"\r\n                    >\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.data\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-state' | translate\" id=\"job-state\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-job-state-label [job]=\"job\"></vdr-job-state-label>\r\n                <div *ngIf=\"job.state === 'FAILED'\" class=\"retry-info\">after {{ job.attempts }} attempts</div>\r\n                <div *ngIf=\"job.state === 'RUNNING' || job.state === 'RETRYING'\" class=\"retry-info\">\r\n                    attempting {{ job.attempts }} of {{ job.retries + 1 }}\r\n                </div>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-duration' | translate\" id=\"job-duration\">\r\n            <ng-template let-job=\"item\">\r\n                {{ job.duration | duration }}\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n        <vdr-dt2-column [heading]=\"'system.job-result' | translate\" id=\"job-result\">\r\n            <ng-template let-job=\"item\">\r\n                <vdr-dropdown *ngIf=\"hasResult(job)\">\r\n                    <button class=\"button-small mr-1\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"details\"></clr-icon>\r\n                        {{ 'system.job-result' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            <vdr-object-tree [value]=\"job.result\"></vdr-object-tree>\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"job.error\">\r\n                    <button class=\"button-small\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"exclamation-circle\"></clr-icon>\r\n                        {{ 'system.job-error' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu>\r\n                        <div class=\"result-detail\">\r\n                            {{ job.error }}\r\n                        </div>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n                <vdr-dropdown *ngIf=\"!job.isSettled && job.state !== 'FAILED'\">\r\n                    <button class=\"icon-button\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"ellipsis-vertical\" size=\"12\"></clr-icon>\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"delete-button\"\r\n                            (click)=\"cancelJob(job.id)\"\r\n                            [disabled]=\"!(['DeleteSettings', 'DeleteSystem'] | hasPermission)\"\r\n                            vdrDropdownItem\r\n                        >\r\n                            <clr-icon shape=\"ban\" class=\"is-danger\"></clr-icon>\r\n                            {{ 'common.cancel' | translate }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </ng-template>\r\n        </vdr-dt2-column>\r\n    </vdr-data-table-2>\r\n</vdr-page-body>\r\n", styles: [".result-detail{margin:0 12px}.retry-info{margin-inline-start:6px;color:var(--color-grey-400)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i2.Router }, { type: i2.ActivatedRoute }]; } });

const systemRoutes = [
    {
        path: 'jobs',
        component: JobListComponent,
        data: {
            breadcrumb: marker('breadcrumb.job-queue'),
        },
    },
    {
        path: 'system-status',
        component: HealthCheckComponent,
        data: {
            breadcrumb: marker('breadcrumb.system-status'),
        },
    },
];

class SystemModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: SystemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.2", ngImport: i0, type: SystemModule, declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent], imports: [SharedModule, i2.RouterModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: SystemModule, imports: [SharedModule, RouterModule.forChild(systemRoutes)] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: SystemModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [HealthCheckComponent, JobListComponent, JobStateLabelComponent],
                    imports: [SharedModule, RouterModule.forChild(systemRoutes)],
                }]
        }] });

// This file was generated by the build-public-api.ts script

/**
 * Generated bundle index. Do not edit.
 */

export { HealthCheckComponent, JobListComponent, JobStateLabelComponent, SystemModule, systemRoutes };
//# sourceMappingURL=vendure-admin-ui-system.mjs.map
